const mongoose = require('mongoose');

// Connect to MongoDB
const MONGODB_URI = process.env.MONGODB_URI || 'mongodb://localhost:27017/your-database-name';

mongoose.connect(MONGODB_URI);

const InventoryMasterSchema = new mongoose.Schema({}, { strict: false, collection: 'inventorymasters' });
const InventoryItemSchema = new mongoose.Schema({}, { strict: false, collection: 'inventoryitems' });

const InventoryMaster = mongoose.model('InventoryMaster', InventoryMasterSchema);
const InventoryItem = mongoose.model('InventoryItem', InventoryItemSchema);

async function checkLowStockItems() {
  try {
    console.log('üîç ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏ó‡∏µ‡πà‡πÉ‡∏Å‡∏•‡πâ‡∏´‡∏°‡∏î (‚â§ 2)...\n');

    // ‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏°‡∏µ availableQuantity <= 2 ‡πÅ‡∏•‡∏∞ >= 0
    const lowStockCount = await InventoryMaster.countDocuments({
      availableQuantity: { $lte: 2, $gte: 0 }
    });

    console.log(`‚úÖ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏ó‡∏µ‡πà‡πÉ‡∏Å‡∏•‡πâ‡∏´‡∏°‡∏î (‚â§ 2): ${lowStockCount} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£\n`);
    console.log('='.repeat(80));

    // ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Ç‡∏≠‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡πÉ‡∏Å‡∏•‡πâ‡∏´‡∏°‡∏î
    const lowStockItems = await InventoryMaster.find({
      availableQuantity: { $lte: 2, $gte: 0 }
    })
    .select('itemName categoryId totalQuantity availableQuantity userOwnedQuantity createdAt')
    .sort({ availableQuantity: 1, itemName: 1 })
    .lean();

    console.log(`‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î ${lowStockItems.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£:`);
    console.log('='.repeat(80));

    lowStockItems.forEach((item, index) => {
      console.log(`\n${index + 1}. ${item.itemName}`);
      console.log(`   ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà ID: ${item.categoryId}`);
      console.log(`   ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏ö‡∏¥‡∏Å‡πÑ‡∏î‡πâ: ${item.availableQuantity || 0} (‡πÉ‡∏Å‡∏•‡πâ‡∏´‡∏°‡∏î/‡∏´‡∏°‡∏î)`);
      console.log(`   ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: ${item.totalQuantity || 0}`);
      console.log(`   ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà user ‡∏ñ‡∏∑‡∏≠: ${item.userOwnedQuantity || 0}`);
    });

    console.log('\n' + '='.repeat(80));
    console.log('‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•:');
    console.log('='.repeat(80));
    console.log(`üìä ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡πÉ‡∏Å‡∏•‡πâ‡∏´‡∏°‡∏î (‚â§ 2): ${lowStockCount} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);
    
    // ‡πÅ‡∏¢‡∏Å‡∏ï‡∏≤‡∏°‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏Å‡∏•‡πâ‡∏´‡∏°‡∏î
    const zeroStock = lowStockItems.filter(item => (item.availableQuantity || 0) === 0).length;
    const oneStock = lowStockItems.filter(item => (item.availableQuantity || 0) === 1).length;
    const twoStock = lowStockItems.filter(item => (item.availableQuantity || 0) === 2).length;

    console.log(`    - ‡∏´‡∏°‡∏î (0): ${zeroStock} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);
    console.log(`    - ‡πÄ‡∏´‡∏•‡∏∑‡∏≠ 1: ${oneStock} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);
    console.log(`    - ‡πÄ‡∏´‡∏•‡∏∑‡∏≠ 2: ${twoStock} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);

  } catch (error) {
    console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:', error);
  } finally {
    mongoose.connection.close();
  }
}

checkLowStockItems();

