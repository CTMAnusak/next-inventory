/**
 * Script: ‡∏•‡∏ö ITAdmin Collection
 * 
 * ‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå‡∏ô‡∏µ‡πâ‡∏à‡∏∞:
 * 1. ‡∏™‡∏≥‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ITAdmin collection (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
 * 2. ‡∏•‡∏ö collection itadmins ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
 * 3. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏•‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
 * 
 * ‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô:
 * node remove-itadmin-collection.js
 */

const { MongoClient } = require('mongodb');
const fs = require('fs');
const path = require('path');

// MongoDB connection string
const MONGODB_URI = process.env.MONGODB_URI || 'mongodb://localhost:27017/inventory-management';

async function removeITAdminCollection() {
  let client;
  
  try {
    console.log('üóëÔ∏è  ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏•‡∏ö ITAdmin Collection');
    console.log('üì° ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ MongoDB...');
    
    client = new MongoClient(MONGODB_URI);
    await client.connect();
    
    const db = client.db();
    const itAdminCollection = db.collection('itadmins');
    
    // 1. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ collection ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    const collections = await db.listCollections({ name: 'itadmins' }).toArray();
    
    if (collections.length === 0) {
      console.log('‚úÖ Collection itadmins ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß - ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏•‡∏ö');
      return;
    }
    
    // 2. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô collection
    const count = await itAdminCollection.countDocuments();
    console.log(`üìä ‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô itadmins collection: ${count} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);
    
    // 3. ‡∏™‡∏≥‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡πà‡∏≠‡∏ô‡∏•‡∏ö (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•)
    if (count > 0) {
      const backupDir = './backup_migration';
      if (!fs.existsSync(backupDir)) {
        fs.mkdirSync(backupDir);
      }
      
      const backupFile = path.join(backupDir, `backup_itadmins_before_delete_${new Date().toISOString().replace(/[:.]/g, '-')}.json`);
      const data = await itAdminCollection.find({}).toArray();
      fs.writeFileSync(backupFile, JSON.stringify(data, null, 2));
      console.log(`üíæ ‡∏™‡∏≥‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏ß‡πâ‡∏ó‡∏µ‡πà: ${backupFile}`);
    }
    
    // 4. ‡∏•‡∏ö collection
    console.log('üóëÔ∏è  ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏•‡∏ö collection itadmins...');
    await db.dropCollection('itadmins');
    
    // 5. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏•‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
    const collectionsAfter = await db.listCollections({ name: 'itadmins' }).toArray();
    
    if (collectionsAfter.length === 0) {
      console.log('‚úÖ ‡∏•‡∏ö collection itadmins ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!');
    } else {
      console.log('‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö collection ‡πÑ‡∏î‡πâ');
    }
    
    // 6. ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ collections ‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠
    console.log('\nüìã Collections ‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:');
    const allCollections = await db.listCollections().toArray();
    allCollections.forEach((collection, index) => {
      console.log(`   ${index + 1}. ${collection.name}`);
    });
    
    console.log('\nüéâ ‡∏Å‡∏≤‡∏£‡∏•‡∏ö collection ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!');
    console.log('üí° ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏∞‡πÉ‡∏ä‡πâ userRole ‡πÉ‡∏ô users collection ‡πÅ‡∏ó‡∏ô');
    
  } catch (error) {
    console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö collection:', error);
    process.exit(1);
  } finally {
    if (client) {
      await client.close();
      console.log('\nüì° ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ MongoDB');
    }
  }
}

// ‡∏£‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö collection
if (require.main === module) {
  removeITAdminCollection()
    .then(() => {
      console.log('\n‚úÖ Script ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô');
      process.exit(0);
    })
    .catch((error) => {
      console.error('‚ùå Script ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:', error);
      process.exit(1);
    });
}

module.exports = { removeITAdminCollection };
