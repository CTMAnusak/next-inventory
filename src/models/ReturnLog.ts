import mongoose, { Document, Schema } from 'mongoose';

export interface IReturnItem {
  itemId: string;       // Reference to specific InventoryItem._id being returned
  itemName?: string;    // üÜï Snapshot: ‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå (‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ß‡πâ‡πÄ‡∏°‡∏∑‡πà‡∏≠ InventoryItem ‡∏ñ‡∏π‡∏Å‡∏•‡∏ö)
  category?: string;    // üÜï Snapshot: ‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà (‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ß‡πâ‡πÄ‡∏°‡∏∑‡πà‡∏≠ InventoryItem ‡∏ñ‡∏π‡∏Å‡∏•‡∏ö)
  categoryId?: string;  // üÜï Snapshot: ID ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà (‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ß‡πâ‡πÄ‡∏°‡∏∑‡πà‡∏≠ InventoryItem ‡∏ñ‡∏π‡∏Å‡∏•‡∏ö)
  quantity: number;
  serialNumber?: string; // üÜï Snapshot: Serial Number (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
  numberPhone?: string; // üÜï Snapshot: Phone Number (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ã‡∏¥‡∏°‡∏Å‡∏≤‡∏£‡πå‡∏î)
  assetNumber?: string; // ‡πÄ‡∏•‡∏Ç‡∏ó‡∏£‡∏±‡∏û‡∏¢‡πå‡∏™‡∏¥‡∏ô
  image?: string; // ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
  statusOnReturn?: string; // ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Ñ‡∏∑‡∏ô (‡∏°‡∏µ/‡∏´‡∏≤‡∏¢/‡∏ä‡∏≥‡∏£‡∏∏‡∏î - ‡∏à‡∏≤‡∏Å status config)
  conditionOnReturn?: string; // ‡∏™‡∏†‡∏≤‡∏û‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Ñ‡∏∑‡∏ô (‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ/‡∏ä‡∏≥‡∏£‡∏∏‡∏î - ‡∏à‡∏≤‡∏Å condition config)
  statusOnReturnName?: string; // üÜï Snapshot: ‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ (‡∏™‡∏†‡∏≤‡∏û‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå)
  conditionOnReturnName?: string; // üÜï Snapshot: ‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏†‡∏≤‡∏û (‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå)
  itemNotes?: string; // ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
  approvalStatus: 'pending' | 'approved'; // ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏Ç‡∏≠‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ô‡∏µ‡πâ
  approvedAt?: Date; // ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥
  approvedBy?: string; // Admin userId ‡∏ó‡∏µ‡πà‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥
  approvedByName?: string; // üÜï Snapshot: ‡∏ä‡∏∑‡πà‡∏≠ Admin ‡∏ú‡∏π‡πâ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥
}

export interface IReturnLog extends Document {
  // User info - store only userId for real-time lookup
  userId: string; // Reference to User._id for real-time lookup
  // Store user info for branch users (who don't have user profiles)
  returnerFirstName?: string; // ‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏Ñ‡∏∑‡∏ô‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏™‡∏≤‡∏Ç‡∏≤)
  returnerLastName?: string; // ‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•‡∏ú‡∏π‡πâ‡∏Ñ‡∏∑‡∏ô‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏™‡∏≤‡∏Ç‡∏≤)
  returnerNickname?: string; // ‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏•‡πà‡∏ô‡∏ú‡∏π‡πâ‡∏Ñ‡∏∑‡∏ô‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏™‡∏≤‡∏Ç‡∏≤)
  returnerDepartment?: string; // ‡πÅ‡∏ú‡∏ô‡∏Å‡∏ú‡∏π‡πâ‡∏Ñ‡∏∑‡∏ô‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏™‡∏≤‡∏Ç‡∏≤)
  returnerPhone?: string; // ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏ú‡∏π‡πâ‡∏Ñ‡∏∑‡∏ô‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏™‡∏≤‡∏Ç‡∏≤)
  returnerOffice?: string; // ‡∏≠‡∏≠‡∏ü‡∏ü‡∏¥‡∏®/‡∏™‡∏≤‡∏Ç‡∏≤‡∏ú‡∏π‡πâ‡∏Ñ‡∏∑‡∏ô‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏™‡∏≤‡∏Ç‡∏≤)
  returnDate: Date; // ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏Ñ‡∏∑‡∏ô
  items: IReturnItem[]; // ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏ó‡∏µ‡πà‡∏Ñ‡∏∑‡∏ô (‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏°‡∏µ approvalStatus ‡πÅ‡∏¢‡∏Å‡∏Å‡∏±‡∏ô)
  notes?: string; // ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏‡∏£‡∏ß‡∏°‡∏Å‡∏≤‡∏£‡∏Ñ‡∏∑‡∏ô
  
  createdAt: Date;
  updatedAt: Date;
}

const ReturnItemSchema = new Schema<IReturnItem>({
  itemId: { type: String, required: true },         // Reference to specific InventoryItem._id
  itemName: { type: String },                       // üÜï Snapshot: ‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå
  category: { type: String },                       // üÜï Snapshot: ‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà
  categoryId: { type: String },                     // üÜï Snapshot: ID ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà
  quantity: { type: Number, required: true, min: 1 },
  serialNumber: { type: String },                   // Serial Number
  numberPhone: { type: String },                    // Phone Number (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ã‡∏¥‡∏°‡∏Å‡∏≤‡∏£‡πå‡∏î)
  assetNumber: { type: String },
  image: { type: String },                          // path ‡∏Ç‡∏≠‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
  statusOnReturn: { type: String },                 // ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Ñ‡∏∑‡∏ô (‡∏°‡∏µ/‡∏´‡∏≤‡∏¢ - ‡∏à‡∏≤‡∏Å status config)
  conditionOnReturn: { type: String },              // ‡∏™‡∏†‡∏≤‡∏û‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Ñ‡∏∑‡∏ô (‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ/‡∏ä‡∏≥‡∏£‡∏∏‡∏î - ‡∏à‡∏≤‡∏Å condition config)
  statusOnReturnName: { type: String },             // üÜï Snapshot: ‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
  conditionOnReturnName: { type: String },          // üÜï Snapshot: ‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏†‡∏≤‡∏û
  itemNotes: { type: String },                      // ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
  approvalStatus: { 
    type: String, 
    enum: ['pending', 'approved'], 
    default: 'pending' 
  },                                                // ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥
  approvedAt: { type: Date },                       // ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥
  approvedBy: { type: String },                     // Admin userId ‡∏ó‡∏µ‡πà‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥
  approvedByName: { type: String }                  // üÜï Snapshot: ‡∏ä‡∏∑‡πà‡∏≠ Admin
});

const ReturnLogSchema = new Schema<IReturnLog>({
  userId: { type: String, required: true },  // Reference to User._id
  // Store user info for branch users (who don't have user profiles)
  returnerFirstName: { type: String }, // ‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏Ñ‡∏∑‡∏ô‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏™‡∏≤‡∏Ç‡∏≤)
  returnerLastName: { type: String }, // ‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•‡∏ú‡∏π‡πâ‡∏Ñ‡∏∑‡∏ô‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏™‡∏≤‡∏Ç‡∏≤)
  returnerNickname: { type: String }, // ‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏•‡πà‡∏ô‡∏ú‡∏π‡πâ‡∏Ñ‡∏∑‡∏ô‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏™‡∏≤‡∏Ç‡∏≤)
  returnerDepartment: { type: String }, // ‡πÅ‡∏ú‡∏ô‡∏Å‡∏ú‡∏π‡πâ‡∏Ñ‡∏∑‡∏ô‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏™‡∏≤‡∏Ç‡∏≤)
  returnerPhone: { type: String }, // ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏ú‡∏π‡πâ‡∏Ñ‡∏∑‡∏ô‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏™‡∏≤‡∏Ç‡∏≤)
  returnerOffice: { type: String }, // ‡∏≠‡∏≠‡∏ü‡∏ü‡∏¥‡∏®/‡∏™‡∏≤‡∏Ç‡∏≤‡∏ú‡∏π‡πâ‡∏Ñ‡∏∑‡∏ô‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏™‡∏≤‡∏Ç‡∏≤)
  returnDate: { type: Date, required: true },
  items: [ReturnItemSchema],
  notes: { type: String }
}, {
  timestamps: true
});

// Recommended indexes
ReturnLogSchema.index({ returnDate: -1, createdAt: -1 });
ReturnLogSchema.index({ userId: 1 });
ReturnLogSchema.index({ 'items.approvalStatus': 1 });
ReturnLogSchema.index({ 'items.itemId': 1 });

// Force recreation to ensure schema updates during dev hot-reload
if (mongoose.models.ReturnLog) {
  delete mongoose.models.ReturnLog;
}

export default mongoose.model<IReturnLog>('ReturnLog', ReturnLogSchema);
