import mongoose, { Document, Schema } from 'mongoose';

export interface IRecycleBin extends Document {
  // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏•‡∏ö
  itemName: string;
  category: string;
  categoryId: string;               // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô
  inventoryMasterId: string;        // üÜï ID ‡∏Ç‡∏≠‡∏á InventoryMaster ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏°
  serialNumber?: string;            // SN ‡∏Ç‡∏≠‡∏á‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
  numberPhone?: string;             // ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ã‡∏¥‡∏°‡∏Å‡∏≤‡∏£‡πå‡∏î)
  
  // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏•‡∏ö
  deleteType: 'individual_item' | 'bulk_delete';    // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô
  deletedAt: Date;                                  // ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏•‡∏ö
  deleteReason: string;                             // ‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏•‡∏ö
  deletedBy: string;                                // ‡∏ú‡∏π‡πâ‡∏•‡∏ö (user_id)
  deletedByName: string;                            // ‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏•‡∏ö
  
  // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏î‡∏¥‡∏°‡∏Å‡πà‡∏≠‡∏ô‡∏ñ‡∏π‡∏Å‡∏•‡∏ö (‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏õ‡πá‡∏ô JSON object)
  originalData: any;
  
  // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏ñ‡∏≤‡∏ß‡∏£
  permanentDeleteAt: Date;                          // ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏•‡∏ö‡∏ñ‡∏≤‡∏ß‡∏£ (30 ‡∏ß‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏á deletedAt)
  isRestored: boolean;                              // ‡∏ñ‡∏π‡∏Å‡∏Å‡∏π‡πâ‡∏Ñ‡∏∑‡∏ô‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  restoredAt?: Date;                                // ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏Å‡∏π‡πâ‡∏Ñ‡∏∑‡∏ô
  restoredBy?: string;                              // ‡∏ú‡∏π‡πâ‡∏Å‡∏π‡πâ‡∏Ñ‡∏∑‡∏ô (user_id)
  restoredByName?: string;                          // ‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏Å‡∏π‡πâ‡∏Ñ‡∏∑‡∏ô
  
  createdAt: Date;
  updatedAt: Date;
}

const RecycleBinSchema = new Schema<IRecycleBin>({
  itemName: { 
    type: String, 
    required: true,
    index: true
  },
  category: { 
    type: String, 
    required: true,
    index: true
  },
  categoryId: {
    type: String,
    required: true,
    index: true
  },
  inventoryMasterId: {
    type: String,
    required: true,
    index: true  // üÜï ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÅ‡∏•‡∏∞‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
  },
  serialNumber: { 
    type: String,
    sparse: true,
    index: true  // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ SN ‡πÉ‡∏ô‡∏ñ‡∏±‡∏á‡∏Ç‡∏¢‡∏∞
  },
  numberPhone: {
    type: String,
    sparse: true,
    index: true  // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå‡πÉ‡∏ô‡∏ñ‡∏±‡∏á‡∏Ç‡∏¢‡∏∞
  },
  
  deleteType: {
    type: String,
    enum: ['individual_item', 'bulk_delete'],  // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡∏∑‡πà‡∏≠
    required: true,
    index: true
  },
  deletedAt: {
    type: Date,
    required: true,
    default: Date.now,
    index: true
  },
  deleteReason: {
    type: String,
    required: true
  },
  deletedBy: {
    type: String,
    required: true,
    index: true
  },
  deletedByName: {
    type: String,
    required: true
  },
  
  originalData: {
    type: Schema.Types.Mixed,
    required: true
  },
  
  permanentDeleteAt: {
    type: Date,
    required: true,
    index: true  // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö auto-cleanup
  },
  isRestored: {
    type: Boolean,
    default: false,
    index: true
  },
  restoredAt: Date,
  restoredBy: String,
  restoredByName: String
}, {
  timestamps: true
});

// Indexes ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö performance
RecycleBinSchema.index({ serialNumber: 1, isRestored: 1 }); // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö SN ‡∏ã‡πâ‡∏≥
RecycleBinSchema.index({ numberPhone: 1, isRestored: 1 }); // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå‡∏ã‡πâ‡∏≥
RecycleBinSchema.index({ deletedAt: 1, isRestored: 1 });    // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö auto-cleanup
RecycleBinSchema.index({ inventoryMasterId: 1, isRestored: 1 }); // üÜï ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏°
RecycleBinSchema.index({ itemName: 1, categoryId: 1, deleteType: 1 }); // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö UI listing

// Pre-save middleware: ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì permanentDeleteAt
RecycleBinSchema.pre('save', function(next) {
  if (this.isNew && !this.permanentDeleteAt) {
    // üïê ‡∏£‡∏∞‡∏ö‡∏ö‡∏ô‡∏±‡∏ö‡∏ß‡∏±‡∏ô: ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ô‡∏±‡∏ö‡∏ó‡∏µ‡πà 18:00 ‡∏ô. ‡∏Ç‡∏≠‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏•‡∏ö
    // ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: ‡∏•‡∏ö 15 ‡∏°.‡∏Ñ. 12:00 ‚Üí ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ô‡∏±‡∏ö 15 ‡∏°.‡∏Ñ. 18:00 ‚Üí ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà 16 ‡∏°.‡∏Ñ. 18:00 = ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà 1
    const deleteDate = this.deletedAt || new Date();
    
    // ‡∏´‡∏≤‡πÄ‡∏ß‡∏•‡∏≤ 18:00 ‡∏Ç‡∏≠‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏•‡∏ö
    const startCountDate = new Date(deleteDate);
    startCountDate.setHours(18, 0, 0, 0); // ‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏õ‡πá‡∏ô 18:00:00.000
    
    // ‡∏ñ‡πâ‡∏≤‡∏•‡∏ö‡∏Å‡πà‡∏≠‡∏ô 18:00 ‚Üí ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ô‡∏±‡∏ö‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ 18:00
    // ‡∏ñ‡πâ‡∏≤‡∏•‡∏ö‡∏´‡∏•‡∏±‡∏á 18:00 ‚Üí ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ô‡∏±‡∏ö‡∏û‡∏£‡∏∏‡πà‡∏á‡∏ô‡∏µ‡πâ 18:00
    if (deleteDate.getHours() >= 18 || 
        (deleteDate.getHours() === 18 && deleteDate.getMinutes() > 0)) {
      // ‡∏•‡∏ö‡∏´‡∏•‡∏±‡∏á 18:00 ‡πÅ‡∏•‡πâ‡∏ß ‚Üí ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ô‡∏±‡∏ö‡∏û‡∏£‡∏∏‡πà‡∏á‡∏ô‡∏µ‡πâ 18:00
      startCountDate.setDate(startCountDate.getDate() + 1);
    }
    
    // ‡∏ö‡∏ß‡∏Å 30 ‡∏ß‡∏±‡∏ô‡∏à‡∏≤‡∏Å‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ô‡∏±‡∏ö
    this.permanentDeleteAt = new Date(startCountDate.getTime() + (30 * 24 * 60 * 60 * 1000));
  }
  next();
});

// Static methods ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö common operations
RecycleBinSchema.statics.findBySerialNumber = function(serialNumber: string) {
  return this.findOne({ 
    serialNumber: serialNumber
  });
};

// üÜï ‡πÉ‡∏´‡∏°‡πà: ‡∏à‡∏±‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ï‡∏≤‡∏° inventoryMasterId
RecycleBinSchema.statics.findGroupedDeletedItems = function(page: number = 1, limit: number = 50) {
  const skip = (page - 1) * limit;
  
  return this.aggregate([
    {
      $match: {
        isRestored: { $ne: true }
      }
    },
    {
      $group: {
        _id: '$inventoryMasterId',
        itemName: { $first: '$itemName' },
        category: { $first: '$category' },
        categoryId: { $first: '$categoryId' },
        deleteType: { $first: '$deleteType' },
        deletedAt: { $first: '$deletedAt' },
        deleteReason: { $first: '$deleteReason' },
        deletedBy: { $first: '$deletedBy' },
        deletedByName: { $first: '$deletedByName' },
        permanentDeleteAt: { $first: '$permanentDeleteAt' },
        totalItems: { $sum: 1 },
        items: {
          $push: {
            _id: '$_id',
            serialNumber: '$serialNumber',
            numberPhone: '$numberPhone',
            originalData: '$originalData'
          }
        }
      }
    },
    {
      $sort: { deletedAt: -1 }
    },
    {
      $skip: skip
    },
    {
      $limit: limit
    }
  ]);
};

// ‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ß‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö backward compatibility
RecycleBinSchema.statics.findDeletedItems = function(page: number = 1, limit: number = 50) {
  const skip = (page - 1) * limit;
  return this.find({ 
    deleteType: 'individual_item',
    isRestored: { $ne: true }
  })
  .sort({ deletedAt: -1 })
  .skip(skip)
  .limit(limit);
};

RecycleBinSchema.statics.findDeletedCategories = function(page: number = 1, limit: number = 50) {
  const skip = (page - 1) * limit;
  return this.find({ 
    deleteType: 'bulk_delete',
    isRestored: { $ne: true }
  })
  .sort({ deletedAt: -1 })
  .skip(skip)
  .limit(limit);
};

RecycleBinSchema.statics.findExpiredItems = function() {
  return this.find({
    permanentDeleteAt: { $lte: new Date() }
  });
};

// Force recreation of model to ensure schema updates
if (mongoose.models.RecycleBin) {
  delete mongoose.models.RecycleBin;
}

export default mongoose.model<IRecycleBin>('RecycleBin', RecycleBinSchema);
