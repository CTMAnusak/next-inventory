import mongoose, { Document, Schema } from 'mongoose';

export interface IInventoryMaster extends Document {
  masterItemId: string;         // üÜï ‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á InventoryItem._id ‡πÅ‡∏£‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á (‡πÄ‡∏õ‡πá‡∏ô master reference)
  itemName: string;             // ‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå
  categoryId: string;           // ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà
  relatedItemIds: string[];     // üÜï ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ InventoryItem._id ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô
  // hasSerialNumber removed - use itemDetails.withSerialNumber > 0 instead
  
  // ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ä‡∏¥‡πâ‡∏ô (‡πÄ‡∏Å‡πá‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÅ‡∏•‡∏∞ ID ‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£)
  itemDetails: {
    withSerialNumber: {
      count: number;        // ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏µ Serial Number
      itemIds: string[];    // ID ‡∏Ç‡∏≠‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏°‡∏µ SN
    };
    withPhoneNumber: {
      count: number;        // ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏µ Phone Number
      itemIds: string[];      // ID ‡∏Ç‡∏≠‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏°‡∏µ Phone
    };
    other: {
      count: number;          // ‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ó‡∏±‡πâ‡∏á SN ‡πÅ‡∏•‡∏∞ Phone
      itemIds: string[];      // ID ‡∏Ç‡∏≠‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏≠‡∏∑‡πà‡∏ô‡πÜ
    };
  };
  
  // ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏£‡∏ß‡∏°
  totalQuantity: number;        // ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (admin_stock + user_owned)
  availableQuantity: number;    // ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÉ‡∏´‡πâ‡∏¢‡∏∑‡∏° (admin_stock ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô)
  userOwnedQuantity: number;    // ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà user ‡∏ñ‡∏∑‡∏≠ (user_owned ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô)
  
  // üÜï FIXED: ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ (‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö dynamic keys ‡∏ï‡∏≤‡∏° config)
  statusBreakdown: Record<string, number>; // ‡πÄ‡∏ä‡πà‡∏ô { status_available: 2, status_missing: 1 }
  
  // üÜï NEW: ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏ï‡∏≤‡∏°‡∏™‡∏†‡∏≤‡∏û‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå (‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö dynamic keys ‡∏ï‡∏≤‡∏° config)
  conditionBreakdown: Record<string, number>; // ‡πÄ‡∏ä‡πà‡∏ô { cond_working: 3, cond_damaged: 1 }
  
  // Stock Management - ‡πÉ‡∏´‡∏°‡πà
  stockManagement: {
    adminDefinedStock: number;    // ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà Admin ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÉ‡∏´‡πâ‡∏°‡∏µ‡πÉ‡∏ô‡∏Ñ‡∏•‡∏±‡∏á
    userContributedCount: number; // ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà User ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤  
    currentlyAllocated: number;   // ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡πÄ‡∏ö‡∏¥‡∏Å‡∏à‡∏≤‡∏Å admin stock
    realAvailable: number;        // adminDefinedStock - currentlyAllocated
  };
  
  // Admin Stock Operations History - ‡πÉ‡∏´‡∏°‡πà
  adminStockOperations: [{
    date: Date;
    adminId: string;
    adminName: string;
    operationType: 'set_stock' | 'adjust_stock' | 'initial_stock';
    previousStock: number;
    newStock: number;
    adjustmentAmount: number;
    reason: string;
  }];
  
  // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
  lastUpdated: Date;
  lastUpdatedBy?: string;       // Admin ‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
  
  createdAt: Date;
  updatedAt: Date;
}

const InventoryMasterSchema = new Schema<IInventoryMaster>({
  masterItemId: { 
    type: String, 
    required: true,
    index: true
  },
  itemName: { 
    type: String, 
    required: true,
    index: true
  },
  categoryId: { 
    type: String, 
    required: true,
    index: true
  },
  relatedItemIds: [{
    type: String,
    required: true
  }],
  // hasSerialNumber field removed - use itemDetails.withSerialNumber > 0 instead
  
  // ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ä‡∏¥‡πâ‡∏ô (‡πÄ‡∏Å‡πá‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÅ‡∏•‡∏∞ ID ‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£)
  itemDetails: {
    withSerialNumber: {
      count: {
        type: Number,
        min: 0,
        default: 0
      },
      itemIds: [{
        type: String,
        required: true
      }]
    },
    withPhoneNumber: {
      count: {
        type: Number,
        min: 0,
        default: 0
      },
      itemIds: [{
        type: String,
        required: true
      }]
    },
    other: {
      count: {
        type: Number,
        min: 0,
        default: 0
      },
      itemIds: [{
        type: String,
        required: true
      }]
    }
  },
  
  // ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏£‡∏ß‡∏°
  totalQuantity: {
    type: Number,
    required: true,
    min: 0,
    default: 0
  },
  availableQuantity: {
    type: Number,
    required: true,
    min: 0,
    default: 0
  },
  userOwnedQuantity: {
    type: Number,
    required: true,
    min: 0,
    default: 0
  },
  
  // üÜï FIXED: ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ (‡πÉ‡∏ä‡πâ dynamic object ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö config)
  statusBreakdown: {
    type: Schema.Types.Mixed, // ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö dynamic keys ‡πÄ‡∏ä‡πà‡∏ô { status_available: 2, status_missing: 1 }
    default: {}
  },
  
  // üÜï NEW: ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏ï‡∏≤‡∏°‡∏™‡∏†‡∏≤‡∏û‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå (‡πÉ‡∏ä‡πâ dynamic object ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö config)
  conditionBreakdown: {
    type: Schema.Types.Mixed, // ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö dynamic keys ‡πÄ‡∏ä‡πà‡∏ô { cond_working: 3, cond_damaged: 1 }
    default: {}
  },
  
  // Stock Management - ‡πÉ‡∏´‡∏°‡πà
  stockManagement: {
    adminDefinedStock: {
      type: Number,
      min: 0,
      default: 0
    },
    userContributedCount: {
      type: Number,
      min: 0,
      default: 0
    },
    currentlyAllocated: {
      type: Number,
      min: 0,
      default: 0
    },
    realAvailable: {
      type: Number,
      min: 0,
      default: 0
    }
  },
  
  // Admin Stock Operations History - ‡πÉ‡∏´‡∏°‡πà
  adminStockOperations: [{
    date: {
      type: Date,
      default: Date.now
    },
    adminId: {
      type: String,
      required: true
    },
    adminName: {
      type: String,
      required: true
    },
    operationType: {
      type: String,
      enum: ['set_stock', 'adjust_stock', 'initial_stock'],
      required: true
    },
    previousStock: {
      type: Number,
      min: 0
    },
    newStock: {
      type: Number,
      min: 0
    },
    adjustmentAmount: {
      type: Number
    },
    reason: {
      type: String,
      required: true
    }
  }],
  
  // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï
  lastUpdated: {
    type: Date,
    default: Date.now
  },
  lastUpdatedBy: {
    type: String  // Admin user_id
  }
}, {
  timestamps: true
});

// Unique index ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö itemName + categoryId
InventoryMasterSchema.index({ itemName: 1, categoryId: 1 }, { unique: true });

// Pre-save validation
InventoryMasterSchema.pre('save', function(next) {
  // üîß CRITICAL FIX: ‡∏•‡∏ö validation ‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡πÉ‡∏´‡πâ totalQuantity = availableQuantity + userOwnedQuantity
  // ‡πÄ‡∏û‡∏£‡∏≤‡∏∞ totalQuantity ‡∏Ñ‡∏ß‡∏£‡∏ô‡∏±‡∏ö‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡∏£‡∏ß‡∏°‡∏ä‡∏≥‡∏£‡∏∏‡∏î/‡∏™‡∏π‡∏ç‡∏´‡∏≤‡∏¢)
  // ‡πÅ‡∏ï‡πà availableQuantity ‡∏ô‡∏±‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ó‡∏µ‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÄ‡∏ö‡∏¥‡∏Å (available + working)
  
  // ‚úÖ NEW: Validation ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á - ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ñ‡πà‡∏≤‡πÑ‡∏°‡πà‡∏ï‡∏¥‡∏î‡∏•‡∏ö
  if (this.totalQuantity < 0) {
    console.warn(`Invalid totalQuantity for ${this.itemName}: ${this.totalQuantity}`);
    this.totalQuantity = 0;
  }
  if (this.availableQuantity < 0) {
    console.warn(`Invalid availableQuantity for ${this.itemName}: ${this.availableQuantity}`);
    this.availableQuantity = 0;
  }
  if (this.userOwnedQuantity < 0) {
    console.warn(`Invalid userOwnedQuantity for ${this.itemName}: ${this.userOwnedQuantity}`);
    this.userOwnedQuantity = 0;
  }
  
  // Stock Management Auto-correction: realAvailable = adminDefinedStock - currentlyAllocated
  if (this.stockManagement) {
    this.stockManagement.realAvailable = Math.max(0, this.stockManagement.adminDefinedStock - this.stockManagement.currentlyAllocated);
  }
  
  // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï lastUpdated
  this.lastUpdated = new Date();
  
  next();
});

// Static methods ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö common operations
InventoryMasterSchema.statics.updateSummary = async function(itemName: string, category: string) {
  const InventoryItem = mongoose.model('InventoryItems');
  
  // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏à‡∏≤‡∏Å InventoryItem
  // üîß CRITICAL FIX: Exclude soft-deleted items from aggregation
  const stats = await InventoryItem.aggregate([
    {
      $match: { 
        itemName, 
        categoryId: category, // üÜï FIXED: Use categoryId field
        deletedAt: { $exists: false } // üÜï FIXED: Use proper soft delete check
      }
    },
    {
      $group: {
        _id: null,
        totalQuantity: { $sum: 1 },
        availableQuantity: {
          $sum: {
            $cond: [
              { $eq: ['$currentOwnership.ownerType', 'admin_stock'] },
              1, 0
            ]
          }
        },
        userOwnedQuantity: {
          $sum: {
            $cond: [
              { $eq: ['$currentOwnership.ownerType', 'user_owned'] },
              1, 0
            ]
          }
        },
        statusBreakdown: {
          $push: '$statusId' // üÜï FIXED: Use statusId instead of status
        },
        conditionBreakdown: { // üÜï NEW: Collect conditionId
          $push: '$conditionId'
        }
        // hasSerialNumber calculation removed - use itemDetails.withSerialNumber > 0 instead
      }
    }
  ]);
  
  if (stats.length === 0) {
    // ‡πÑ‡∏°‡πà‡∏°‡∏µ item ‡πÅ‡∏•‡πâ‡∏ß ‡∏•‡∏ö master record
    await this.deleteOne({ itemName, categoryId: category });
    return null;
  }
  
  const stat = stats[0];
  
  // üÜï FIXED: ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì status breakdown ‡πÅ‡∏ö‡∏ö dynamic
  const statusBreakdown: Record<string, number> = {};
  const conditionBreakdown: Record<string, number> = {};
  
  stat.statusBreakdown.forEach((status: string) => {
    statusBreakdown[status] = (statusBreakdown[status] || 0) + 1;
  });
  
  // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì condition breakdown ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
  if (stat.conditionBreakdown) {
    stat.conditionBreakdown.forEach((condition: string) => {
      conditionBreakdown[condition] = (conditionBreakdown[condition] || 0) + 1;
    });
  }
  
  // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏´‡∏£‡∏∑‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á master record
  return await this.findOneAndUpdate(
    { itemName, categoryId: category },
    {
      itemName,
      categoryId: category,
      // hasSerialNumber removed - use itemDetails.withSerialNumber > 0 instead
      totalQuantity: stat.totalQuantity,
      availableQuantity: stat.availableQuantity,
      userOwnedQuantity: stat.userOwnedQuantity,
      statusBreakdown,
      conditionBreakdown, // üÜï NEW: Include condition breakdown
      lastUpdated: new Date()
    },
    { 
      upsert: true, 
      new: true,
      runValidators: true
    }
  );
};

InventoryMasterSchema.statics.incrementQuantity = async function(
  itemName: string, 
  category: string, 
  ownerType: 'admin_stock' | 'user_owned',
  status: string = 'active',
  delta: number = 1
) {
  const updateFields: any = {
    $inc: {
      totalQuantity: delta,
      [`statusBreakdown.${status}`]: delta
    },
    $set: {
      lastUpdated: new Date()
    }
  };
  
  if (ownerType === 'admin_stock') {
    updateFields.$inc.availableQuantity = delta;
  } else {
    updateFields.$inc.userOwnedQuantity = delta;
  }
  
  return await this.findOneAndUpdate(
    { itemName, category },
    updateFields,
    { 
      upsert: true, 
      new: true,
      runValidators: true
    }
  );
};

// Static methods ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Admin Stock Management
InventoryMasterSchema.statics.setAdminStock = async function(itemName: string, category: string, newStock: number, reason: string, adminId: string, adminName: string) {
  const item = await this.findOne({ itemName, categoryId: category });
  if (!item) {
    throw new Error(`‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ ${itemName} ‡πÉ‡∏ô‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà ${category}`);
  }
  
  const previousStock = item.stockManagement?.adminDefinedStock || 0;
  
  // Initialize stockManagement if not exists
  if (!item.stockManagement) {
    item.stockManagement = {
      adminDefinedStock: 0,
      userContributedCount: 0,
      currentlyAllocated: 0,
      realAvailable: 0
    };
  }
  
  // Initialize adminStockOperations if not exists
  if (!item.adminStockOperations) {
    item.adminStockOperations = [];
  }
  
  // ‡πÄ‡∏û‡∏¥‡πà‡∏° operation ‡∏•‡∏á‡πÉ‡∏ô history
  item.adminStockOperations.push({
    date: new Date(),
    adminId,
    adminName,
    operationType: 'set_stock',
    previousStock,
    newStock,
    adjustmentAmount: newStock - previousStock,
    reason
  });
  
  // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï stock
  item.stockManagement.adminDefinedStock = newStock;
  item.lastUpdated = new Date();
  item.lastUpdatedBy = adminId;
  
  await item.save();
  return item;
};

InventoryMasterSchema.statics.adjustAdminStock = async function(itemName: string, category: string, adjustment: number, reason: string, adminId: string, adminName: string) {
  const item = await this.findOne({ itemName, categoryId: category });
  if (!item) {
    throw new Error(`‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ ${itemName} ‡πÉ‡∏ô‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà ${category}`);
  }
  
  // Initialize stockManagement if not exists
  if (!item.stockManagement) {
    item.stockManagement = {
      adminDefinedStock: 0,
      userContributedCount: 0,
      currentlyAllocated: 0,
      realAvailable: 0
    };
  }
  
  const previousStock = item.stockManagement.adminDefinedStock;
  const newStock = Math.max(0, previousStock + adjustment);
  
  // Initialize adminStockOperations if not exists
  if (!item.adminStockOperations) {
    item.adminStockOperations = [];
  }
  
  // ‡πÄ‡∏û‡∏¥‡πà‡∏° operation ‡∏•‡∏á‡πÉ‡∏ô history
  item.adminStockOperations.push({
    date: new Date(),
    adminId,
    adminName,
    operationType: 'adjust_stock',
    previousStock,
    newStock,
    adjustmentAmount: adjustment,
    reason
  });
  
  // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï stock
  item.stockManagement.adminDefinedStock = newStock;
  item.lastUpdated = new Date();
  item.lastUpdatedBy = adminId;
  
  await item.save();
  return item;
};

// Force recreation of model to ensure schema updates
if (mongoose.models.InventoryMasters) {
  delete mongoose.models.InventoryMasters;
}

export default mongoose.model<IInventoryMaster>('InventoryMasters', InventoryMasterSchema);
