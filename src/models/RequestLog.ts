import mongoose, { Document, Schema } from 'mongoose';

export interface IAssignedItemSnapshot {
  itemId: string;           // InventoryItem._id
  itemName: string;         // Snapshot: ‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå
  categoryId: string;       // Snapshot: ID ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà
  categoryName: string;     // Snapshot: ‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà
  serialNumber?: string;    // Snapshot: Serial Number
  numberPhone?: string;     // Snapshot: ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå (‡∏ã‡∏¥‡∏°‡∏Å‡∏≤‡∏£‡πå‡∏î)
  statusId?: string;        // Snapshot: ID ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
  statusName?: string;      // Snapshot: ‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
  conditionId?: string;     // Snapshot: ID ‡∏™‡∏†‡∏≤‡∏û
  conditionName?: string;   // Snapshot: ‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏†‡∏≤‡∏û
}

export interface IRequestItem {
  masterId: string;     // Reference to InventoryMaster._id (for lookup itemName/categoryId)
  itemName?: string;    // üÜï Snapshot: ‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå (‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ß‡πâ‡πÄ‡∏°‡∏∑‡πà‡∏≠ InventoryMaster ‡∏ñ‡∏π‡∏Å‡∏•‡∏ö)
  category?: string;    // üÜï Snapshot: ‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà (‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ß‡πâ‡πÄ‡∏°‡∏∑‡πà‡∏≠ InventoryMaster ‡∏ñ‡∏π‡∏Å‡∏•‡∏ö)
  categoryId?: string;  // üÜï Snapshot: ID ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà (‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ß‡πâ‡πÄ‡∏°‡∏∑‡πà‡∏≠ InventoryMaster ‡∏ñ‡∏π‡∏Å‡∏•‡∏ö)
  quantity: number;
  serialNumbers?: string[]; // Serial numbers if applicable (user request)
  assignedSerialNumbers?: string[]; // SN ‡∏ó‡∏µ‡πà Admin assign ‡πÉ‡∏´‡πâ‡πÄ‡∏°‡∏∑‡πà‡∏≠ approve
  assignedItemIds?: string[]; // IDs ‡∏Ç‡∏≠‡∏á InventoryItem ‡∏ó‡∏µ‡πà assign ‡πÉ‡∏´‡πâ
  assignedItemSnapshots?: IAssignedItemSnapshot[]; // üÜï Snapshot: ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏ó‡∏µ‡πà assign ‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ä‡∏¥‡πâ‡∏ô
  assignedPhoneNumbers?: string[]; // Phone numbers ‡∏ó‡∏µ‡πà Admin assign ‡πÉ‡∏´‡πâ (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ã‡∏¥‡∏°‡∏Å‡∏≤‡∏£‡πå‡∏î)
  availableItemIds?: string[]; // Available items for admin selection
  itemNotes?: string; // ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏‡∏Ç‡∏≠‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏ö‡∏¥‡∏Å (‡πÑ‡∏°‡πà‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö)
  statusOnRequest?: string; // ID ‡∏Ç‡∏≠‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ (‡∏™‡∏†‡∏≤‡∏û‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå: ‡∏°‡∏µ/‡∏´‡∏≤‡∏¢) ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥
  conditionOnRequest?: string; // ID ‡∏Ç‡∏≠‡∏á‡∏™‡∏†‡∏≤‡∏û (‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå: ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ/‡∏ä‡∏≥‡∏£‡∏∏‡∏î) ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥
  statusOnRequestName?: string; // üÜï Snapshot: ‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ (‡∏™‡∏†‡∏≤‡∏û‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå)
  conditionOnRequestName?: string; // üÜï Snapshot: ‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏†‡∏≤‡∏û (‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå)
  assignedQuantity?: number; // ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà Admin assign ‡πÉ‡∏´‡πâ‡πÅ‡∏•‡πâ‡∏ß
  itemApproved?: boolean; // ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ß‡πà‡∏≤‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ô‡∏µ‡πâ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
  approvedAt?: Date; // ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ô‡∏µ‡πâ
}

export interface IRequestLog extends Document {
  // User info - store only userId for real-time lookup
  userId: string; // Reference to User._id for real-time lookup
  // Store user info for branch users (who don't have user profiles)
  requesterFirstName?: string; // ‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏Ç‡∏≠‡πÄ‡∏ö‡∏¥‡∏Å (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏™‡∏≤‡∏Ç‡∏≤)
  requesterLastName?: string; // ‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•‡∏ú‡∏π‡πâ‡∏Ç‡∏≠‡πÄ‡∏ö‡∏¥‡∏Å (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏™‡∏≤‡∏Ç‡∏≤)
  requesterNickname?: string; // ‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏•‡πà‡∏ô‡∏ú‡∏π‡πâ‡∏Ç‡∏≠‡πÄ‡∏ö‡∏¥‡∏Å (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏™‡∏≤‡∏Ç‡∏≤)
  requesterDepartment?: string; // ‡πÅ‡∏ú‡∏ô‡∏Å‡∏ú‡∏π‡πâ‡∏Ç‡∏≠‡πÄ‡∏ö‡∏¥‡∏Å (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏™‡∏≤‡∏Ç‡∏≤)
  requesterPhone?: string; // ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏ú‡∏π‡πâ‡∏Ç‡∏≠‡πÄ‡∏ö‡∏¥‡∏Å (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏™‡∏≤‡∏Ç‡∏≤)
  requesterOffice?: string; // ‡∏≠‡∏≠‡∏ü‡∏ü‡∏¥‡∏®/‡∏™‡∏≤‡∏Ç‡∏≤‡∏ú‡∏π‡πâ‡∏Ç‡∏≠‡πÄ‡∏ö‡∏¥‡∏Å (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏™‡∏≤‡∏Ç‡∏≤)
  requestDate: Date; // ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏ö‡∏¥‡∏Å
  urgency: 'very_urgent' | 'normal'; // ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πà‡∏á‡∏î‡πà‡∏ß‡∏ô
  deliveryLocation: string; // ‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏±‡∏î‡∏™‡πà‡∏á
  notes?: string; // ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡πÄ‡∏ö‡∏¥‡∏Å (‡πÑ‡∏°‡πà‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö)
  items: IRequestItem[]; // ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏ö‡∏¥‡∏Å
  status: 'approved' | 'pending' | 'rejected' | 'completed'; // ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏ö‡∏¥‡∏Å
  requestType: 'request' | 'user-owned'; // ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó: ‡∏Å‡∏≤‡∏£‡πÄ‡∏ö‡∏¥‡∏Å ‡∏´‡∏£‡∏∑‡∏≠ ‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏ó‡∏µ‡πà user ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏≠‡∏á
  
  // Admin actions
  approvedAt?: Date;
  approvedBy?: string; // Admin userId
  approvedByName?: string; // üÜï Snapshot: ‡∏ä‡∏∑‡πà‡∏≠ Admin ‡∏ú‡∏π‡πâ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥
  rejectedAt?: Date;
  rejectedBy?: string; // Admin userId
  rejectedByName?: string; // üÜï Snapshot: ‡∏ä‡∏∑‡πà‡∏≠ Admin ‡∏ú‡∏π‡πâ‡∏õ‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò
  rejectionReason?: string;
  transferredItems?: any[]; // Items that were actually transferred
  
  createdAt: Date;
  updatedAt: Date;
}

const AssignedItemSnapshotSchema = new Schema({
  itemId: { type: String, required: true },
  itemName: { type: String, required: true },
  categoryId: { type: String, required: true },
  categoryName: { type: String, required: true },
  serialNumber: { type: String },
  numberPhone: { type: String },
  statusId: { type: String },
  statusName: { type: String },
  conditionId: { type: String },
  conditionName: { type: String }
}, { _id: false });

const RequestItemSchema = new Schema<IRequestItem>({
  masterId: { type: String, required: true },       // Reference to InventoryMaster._id
  itemName: { type: String },                       // üÜï Snapshot: ‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå
  category: { type: String },                       // üÜï Snapshot: ‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà
  categoryId: { type: String },                     // üÜï Snapshot: ID ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà
  quantity: { type: Number, required: true, min: 1 },
  serialNumbers: [{ type: String, required: false }],   // Serial numbers if available (user request)
  assignedSerialNumbers: [{ type: String, required: false }], // SN ‡∏ó‡∏µ‡πà Admin assign ‡πÉ‡∏´‡πâ
  assignedItemIds: [{ type: String, required: false }],  // InventoryItem IDs ‡∏ó‡∏µ‡πà assign ‡πÉ‡∏´‡πâ
  assignedItemSnapshots: [AssignedItemSnapshotSchema], // üÜï Snapshot: ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏ó‡∏µ‡πà assign ‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ä‡∏¥‡πâ‡∏ô
  assignedPhoneNumbers: [{ type: String, required: false }], // Phone numbers ‡∏ó‡∏µ‡πà Admin assign ‡πÉ‡∏´‡πâ
  availableItemIds: [{ type: String, required: false }],  // Available items for admin selection
  itemNotes: { type: String },
  statusOnRequest: { type: String }, // ID ‡∏Ç‡∏≠‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ (‡∏™‡∏†‡∏≤‡∏û‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå: ‡∏°‡∏µ/‡∏´‡∏≤‡∏¢) ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥
  conditionOnRequest: { type: String }, // ID ‡∏Ç‡∏≠‡∏á‡∏™‡∏†‡∏≤‡∏û (‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå: ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ/‡∏ä‡∏≥‡∏£‡∏∏‡∏î) ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥
  statusOnRequestName: { type: String }, // üÜï Snapshot: ‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
  conditionOnRequestName: { type: String }, // üÜï Snapshot: ‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏†‡∏≤‡∏û
  assignedQuantity: { type: Number, default: 0 }, // ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà Admin assign ‡πÉ‡∏´‡πâ‡πÅ‡∏•‡πâ‡∏ß
  itemApproved: { type: Boolean, default: false }, // ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ß‡πà‡∏≤‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ô‡∏µ‡πâ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
  approvedAt: { type: Date } // ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ô‡∏µ‡πâ
});

const RequestLogSchema = new Schema<IRequestLog>({
  userId: { type: String, required: true },  // Reference to User._id
  // Store user info for branch users (who don't have user profiles)
  requesterFirstName: { type: String }, // ‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏Ç‡∏≠‡πÄ‡∏ö‡∏¥‡∏Å (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏™‡∏≤‡∏Ç‡∏≤)
  requesterLastName: { type: String }, // ‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•‡∏ú‡∏π‡πâ‡∏Ç‡∏≠‡πÄ‡∏ö‡∏¥‡∏Å (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏™‡∏≤‡∏Ç‡∏≤)
  requesterNickname: { type: String }, // ‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏•‡πà‡∏ô‡∏ú‡∏π‡πâ‡∏Ç‡∏≠‡πÄ‡∏ö‡∏¥‡∏Å (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏™‡∏≤‡∏Ç‡∏≤)
  requesterDepartment: { type: String }, // ‡πÅ‡∏ú‡∏ô‡∏Å‡∏ú‡∏π‡πâ‡∏Ç‡∏≠‡πÄ‡∏ö‡∏¥‡∏Å (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏™‡∏≤‡∏Ç‡∏≤)
  requesterPhone: { type: String }, // ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏ú‡∏π‡πâ‡∏Ç‡∏≠‡πÄ‡∏ö‡∏¥‡∏Å (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏™‡∏≤‡∏Ç‡∏≤)
  requesterOffice: { type: String }, // ‡∏≠‡∏≠‡∏ü‡∏ü‡∏¥‡∏®/‡∏™‡∏≤‡∏Ç‡∏≤‡∏ú‡∏π‡πâ‡∏Ç‡∏≠‡πÄ‡∏ö‡∏¥‡∏Å (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏™‡∏≤‡∏Ç‡∏≤)
  requestDate: { type: Date, required: true },
  urgency: { 
    type: String, 
    enum: ['very_urgent', 'normal'], 
    required: true,
    default: 'normal'
  },
  deliveryLocation: { type: String, required: true },
  notes: { type: String },
  items: [RequestItemSchema],
  status: { 
    type: String, 
    enum: ['approved', 'pending', 'rejected', 'completed'], 
    default: 'pending'
  },
  requestType: {
    type: String,
    enum: ['request', 'user-owned'],
    required: true,
    default: 'request'
  },
  
  // Admin actions
  approvedAt: { type: Date },
  approvedBy: { type: String },
  approvedByName: { type: String }, // üÜï Snapshot: ‡∏ä‡∏∑‡πà‡∏≠ Admin ‡∏ú‡∏π‡πâ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥
  rejectedAt: { type: Date },
  rejectedBy: { type: String },
  rejectedByName: { type: String }, // üÜï Snapshot: ‡∏ä‡∏∑‡πà‡∏≠ Admin ‡∏ú‡∏π‡πâ‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò
  rejectionReason: { type: String },
  transferredItems: [{ type: Schema.Types.Mixed }]
}, {
  timestamps: true
});

// Recommended indexes for frequent queries and sorts
RequestLogSchema.index({ requestDate: -1, createdAt: -1 });
RequestLogSchema.index({ userId: 1 });
RequestLogSchema.index({ status: 1 });
RequestLogSchema.index({ 'items.masterId': 1 });

// Force recompile model in dev/hot-reload to pick up schema changes
if (mongoose.models.RequestLog) {
  delete mongoose.models.RequestLog;
}

// Create and export model with updated schema
const RequestLog = mongoose.models.RequestLog || mongoose.model<IRequestLog>('RequestLog', RequestLogSchema);

export default RequestLog;
