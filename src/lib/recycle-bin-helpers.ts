import RecycleBin from '@/models/RecycleBin';
import InventoryItem from '@/models/InventoryItem';
import { updateInventoryMaster } from './inventory-helpers';
import dbConnect from './mongodb';

export interface MoveToRecycleBinParams {
  item: any;  // InventoryItem document
  deleteType: 'individual_item' | 'category_bulk';
  deleteReason: string;
  deletedBy: string;
  deletedByName: string;
}

export interface RestoreFromRecycleBinParams {
  recycleBinId: string;
  restoredBy: string;
  restoredByName: string;
}

/**
 * ‡∏¢‡πâ‡∏≤‡∏¢‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏ñ‡∏±‡∏á‡∏Ç‡∏¢‡∏∞
 */
export async function moveToRecycleBin(params: MoveToRecycleBinParams) {
  const { item, deleteType, deleteReason, deletedBy, deletedByName } = params;
  
  await dbConnect();
  
  console.log(`üóëÔ∏è Moving item to recycle bin:`, {
    itemName: item.itemName,
    category: item.category,
    serialNumber: item.serialNumber || 'No SN',
    numberPhone: item.numberPhone || 'No Phone',
    deleteType
  });
  
  // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÉ‡∏ô‡∏ñ‡∏±‡∏á‡∏Ç‡∏¢‡∏∞
  const recycleBinItem = new RecycleBin({
    itemName: item.itemName,
    category: item.category,
    serialNumber: item.serialNumber,
    numberPhone: item.numberPhone,  // ‡πÄ‡∏û‡∏¥‡πà‡∏° numberPhone
    deleteType,
    deleteReason,
    deletedBy,
    deletedByName,
    deletedAt: new Date(),
    originalData: item.toObject ? item.toObject() : item
  });
  
  await recycleBinItem.save();
  console.log(`‚úÖ Item moved to recycle bin: ${recycleBinItem._id}`);
  
  return recycleBinItem;
}

/**
 * ‡∏Å‡∏π‡πâ‡∏Ñ‡∏∑‡∏ô‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏à‡∏≤‡∏Å‡∏ñ‡∏±‡∏á‡∏Ç‡∏¢‡∏∞
 */
export async function restoreFromRecycleBin(params: RestoreFromRecycleBinParams) {
  const { recycleBinId, restoredBy, restoredByName } = params;
  
  await dbConnect();
  
  // ‡∏´‡∏≤ item ‡πÉ‡∏ô‡∏ñ‡∏±‡∏á‡∏Ç‡∏¢‡∏∞
  const recycleBinItem = await RecycleBin.findById(recycleBinId);
  if (!recycleBinItem) {
    throw new Error('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÉ‡∏ô‡∏ñ‡∏±‡∏á‡∏Ç‡∏¢‡∏∞');
  }
  
  console.log(`‚ôªÔ∏è Restoring item from recycle bin:`, {
    itemName: recycleBinItem.itemName,
    category: recycleBinItem.category,
    serialNumber: recycleBinItem.serialNumber || 'No SN',
    numberPhone: recycleBinItem.numberPhone || 'No Phone',
    deleteType: recycleBinItem.deleteType
  });
  
  if (recycleBinItem.deleteType === 'individual_item') {
    // ‡∏Å‡∏π‡πâ‡∏Ñ‡∏∑‡∏ô‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏£‡∏≤‡∏¢‡∏ä‡∏¥‡πâ‡∏ô
    // üîß CRITICAL FIX: ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô duplicate key error ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö serialNumber
    const itemData = {
      itemName: recycleBinItem.itemName,
      category: recycleBinItem.category,
      status: recycleBinItem.originalData.status, // ‡∏Å‡∏π‡πâ‡∏Ñ‡∏∑‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏î‡∏¥‡∏°
      currentOwnership: recycleBinItem.originalData.currentOwnership,
      sourceInfo: recycleBinItem.originalData.sourceInfo,
      transferInfo: recycleBinItem.originalData.transferInfo
    };
    
    // ‡πÄ‡∏û‡∏¥‡πà‡∏° serialNumber ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡∏à‡∏£‡∏¥‡∏á (‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà null ‡∏´‡∏£‡∏∑‡∏≠ undefined)
    if (recycleBinItem.serialNumber && recycleBinItem.serialNumber.trim() !== '') {
      itemData.serialNumber = recycleBinItem.serialNumber;
    }
    
    // ‡πÄ‡∏û‡∏¥‡πà‡∏° numberPhone ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡∏à‡∏£‡∏¥‡∏á (‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà null ‡∏´‡∏£‡∏∑‡∏≠ undefined)
    if (recycleBinItem.numberPhone && recycleBinItem.numberPhone.trim() !== '') {
      itemData.numberPhone = recycleBinItem.numberPhone;
    }
    
    const restoredItem = new InventoryItem(itemData);
    
    try {
      await restoredItem.save();
      console.log(`‚úÖ Individual item restored: ${restoredItem._id}`);
      console.log(`üìã Restored item details: ${itemData.itemName} (SN: ${itemData.serialNumber || 'No SN'})`);
    } catch (error) {
      console.error(`‚ùå Error saving restored item:`, error);
      
      // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô duplicate key error ‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°
      if (error.code === 11000) {
        console.error(`üîç Duplicate key details:`, {
          itemName: itemData.itemName,
          category: itemData.category,
          serialNumber: itemData.serialNumber,
          numberPhone: itemData.numberPhone
        });
        throw new Error(`‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏•‡πâ‡∏ß: ${itemData.itemName} ${itemData.serialNumber ? `(SN: ${itemData.serialNumber})` : '(‡πÑ‡∏°‡πà‡∏°‡∏µ SN)'}`);
      }
      throw error;
    }
    
    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï InventoryMaster (‡∏Ç‡πâ‡∏≤‡∏° auto-detection ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°)
    await updateInventoryMaster(recycleBinItem.itemName, recycleBinItem.category, { skipAutoDetection: true });
    
    // ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏ñ‡∏±‡∏á‡∏Ç‡∏¢‡∏∞ (‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡∏Å‡∏π‡πâ‡∏Ñ‡∏∑‡∏ô‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß)
    await RecycleBin.findByIdAndDelete(recycleBinId);
    console.log(`üóëÔ∏è Removed restored item from recycle bin: ${recycleBinId}`);
    
    return { type: 'individual', item: restoredItem };
    
  } else if (recycleBinItem.deleteType === 'category_bulk') {
    // ‡∏Å‡∏π‡πâ‡∏Ñ‡∏∑‡∏ô‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    const categoryItems = await RecycleBin.find({
      itemName: recycleBinItem.itemName,
      category: recycleBinItem.category,
      deleteType: 'category_bulk'
    });
    
    const restoredItems = [];
    const errors = [];
    
    for (const item of categoryItems) {
      try {
        // üîß CRITICAL FIX: ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô duplicate key error ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö category bulk restore
        const itemData = {
          itemName: item.itemName,
          category: item.category,
          status: item.originalData.status, // ‡∏Å‡∏π‡πâ‡∏Ñ‡∏∑‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏î‡∏¥‡∏°
          currentOwnership: item.originalData.currentOwnership,
          sourceInfo: item.originalData.sourceInfo,
          transferInfo: item.originalData.transferInfo
        };
        
        // ‡πÄ‡∏û‡∏¥‡πà‡∏° serialNumber ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡∏à‡∏£‡∏¥‡∏á (‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà null ‡∏´‡∏£‡∏∑‡∏≠ undefined)
        if (item.serialNumber && item.serialNumber.trim() !== '') {
          itemData.serialNumber = item.serialNumber;
        }
        
        // ‡πÄ‡∏û‡∏¥‡πà‡∏° numberPhone ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡∏à‡∏£‡∏¥‡∏á (‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà null ‡∏´‡∏£‡∏∑‡∏≠ undefined)
        if (item.numberPhone && item.numberPhone.trim() !== '') {
          itemData.numberPhone = item.numberPhone;
        }
        
        const restoredItem = new InventoryItem(itemData);
        await restoredItem.save();
        restoredItems.push(restoredItem);
        
        console.log(`‚úÖ Restored item: ${itemData.itemName} (SN: ${itemData.serialNumber || 'No SN'})`);
      } catch (error) {
        console.error(`‚ùå Error restoring item ${item.itemName}:`, error);
        
        // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô duplicate key error ‡πÉ‡∏´‡πâ‡πÄ‡∏Å‡πá‡∏ö error ‡πÑ‡∏ß‡πâ‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
        if (error.code === 11000) {
          const errorMsg = `‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ ${item.itemName} ${item.serialNumber ? `(SN: ${item.serialNumber})` : '(‡πÑ‡∏°‡πà‡∏°‡∏µ SN)'} ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏•‡πâ‡∏ß`;
          errors.push(errorMsg);
          console.error(`üîç Duplicate key: ${errorMsg}`);
        } else {
          errors.push(`‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏Å‡∏±‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ ${item.itemName}: ${error.message}`);
        }
      }
    }
    
    console.log(`‚úÖ Category restored: ${restoredItems.length}/${categoryItems.length} items`);
    if (errors.length > 0) {
      console.log(`‚ö†Ô∏è Errors encountered: ${errors.length} items`);
      errors.forEach(error => console.log(`   - ${error}`));
    }
    
    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï InventoryMaster (‡∏Ç‡πâ‡∏≤‡∏° auto-detection ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°)
    await updateInventoryMaster(recycleBinItem.itemName, recycleBinItem.category, { skipAutoDetection: true });
    
    // ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Ç‡∏≠‡∏á category ‡∏ô‡∏µ‡πâ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏ñ‡∏±‡∏á‡∏Ç‡∏¢‡∏∞ (‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡∏Å‡∏π‡πâ‡∏Ñ‡∏∑‡∏ô‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß)
    const deleteResult = await RecycleBin.deleteMany({
      itemName: recycleBinItem.itemName,
      category: recycleBinItem.category,
      deleteType: 'category_bulk'
    });
    console.log(`üóëÔ∏è Removed ${deleteResult.deletedCount} category items from recycle bin`);
    
    // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ errors ‡πÉ‡∏´‡πâ throw error ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î
    if (errors.length > 0) {
      const successCount = restoredItems.length;
      const errorCount = errors.length;
      const totalCount = categoryItems.length;
      
      throw new Error(`‡∏Å‡∏π‡πâ‡∏Ñ‡∏∑‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ${successCount}/${totalCount} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£. ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Å‡∏π‡πâ‡∏Ñ‡∏∑‡∏ô‡πÑ‡∏î‡πâ ${errorCount} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å:\n${errors.join('\n')}`);
    }
    
    return { type: 'category', items: restoredItems };
  }
  
  throw new Error('‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á');
}

/**
 * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ Serial Number ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ñ‡∏±‡∏á‡∏Ç‡∏¢‡∏∞‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
 */
export async function checkSerialNumberInRecycleBin(serialNumber: string) {
  if (!serialNumber || serialNumber.trim() === '') {
    return null;
  }
  
  await dbConnect();
  
  // ‚úÖ ‡πÉ‡∏´‡∏°‡πà: ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö isRestored ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏Å‡∏π‡πâ‡∏Ñ‡∏∑‡∏ô‡πÅ‡∏•‡πâ‡∏ß‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏•‡∏ö‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏ñ‡∏±‡∏á‡∏Ç‡∏¢‡∏∞
  const recycleBinItem = await RecycleBin.findOne({
    serialNumber: serialNumber.trim()
  });
  return recycleBinItem;
}

/**
 * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ Phone Number ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ñ‡∏±‡∏á‡∏Ç‡∏¢‡∏∞‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
 */
export async function checkPhoneNumberInRecycleBin(numberPhone: string) {
  if (!numberPhone || numberPhone.trim() === '') {
    return null;
  }
  
  await dbConnect();
  
  // ‚úÖ ‡πÉ‡∏´‡∏°‡πà: ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö isRestored ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏Å‡∏π‡πâ‡∏Ñ‡∏∑‡∏ô‡πÅ‡∏•‡πâ‡∏ß‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏•‡∏ö‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏ñ‡∏±‡∏á‡∏Ç‡∏¢‡∏∞
  const recycleBinItem = await RecycleBin.findOne({
    numberPhone: numberPhone.trim()
  });
  return recycleBinItem;
}

/**
 * ‡∏•‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÉ‡∏ô‡∏ñ‡∏±‡∏á‡∏Ç‡∏¢‡∏∞‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ñ‡∏≤‡∏ß‡∏£ (Auto-cleanup)
 */
export async function permanentDeleteExpiredItems() {
  await dbConnect();
  
  console.log('üßπ Starting permanent cleanup of expired recycle bin items...');
  
  const expiredItems = await RecycleBin.findExpiredItems();
  console.log(`üìä Found ${expiredItems.length} expired items to delete permanently`);
  
  if (expiredItems.length === 0) {
    console.log('‚úÖ No expired items found');
    return { deletedCount: 0, items: [] };
  }
  
  const deletedItems = [];
  for (const item of expiredItems) {
    console.log(`üóëÔ∏è Permanently deleting: ${item.itemName} (SN: ${item.serialNumber || 'No SN'})`);
    deletedItems.push({
      itemName: item.itemName,
      category: item.category,
      serialNumber: item.serialNumber,
      deletedAt: item.deletedAt,
      permanentDeleteAt: item.permanentDeleteAt
    });
  }
  
  // ‡∏•‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏
  const result = await RecycleBin.deleteMany({
    _id: { $in: expiredItems.map(item => item._id) }
  });
  
  console.log(`‚úÖ Permanently deleted ${result.deletedCount} expired items`);
  
  return {
    deletedCount: result.deletedCount,
    items: deletedItems
  };
}

/**
 * ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÉ‡∏ô‡∏ñ‡∏±‡∏á‡∏Ç‡∏¢‡∏∞ (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö UI)
 */
export async function getRecycleBinItems(type: 'individual' | 'category' = 'individual', page: number = 1, limit: number = 50) {
  await dbConnect();
  
  if (type === 'individual') {
    const items = await RecycleBin.findDeletedItems(page, limit);
    const total = await RecycleBin.countDocuments({ 
      deleteType: 'individual_item'
    });
    
    return { items, total, page, limit };
  } else {
    // Group by itemName + category for category view
    const categories = await RecycleBin.aggregate([
      {
        $match: {
          deleteType: 'category_bulk'
        }
      },
      {
        $group: {
          _id: { itemName: '$itemName', category: '$category' },
          count: { $sum: 1 },
          deletedAt: { $first: '$deletedAt' },
          deleteReason: { $first: '$deleteReason' },
          deletedBy: { $first: '$deletedBy' },
          deletedByName: { $first: '$deletedByName' },
          permanentDeleteAt: { $first: '$permanentDeleteAt' },
          sampleId: { $first: '$_id' }
        }
      },
      {
        $sort: { deletedAt: -1 }
      },
      {
        $skip: (page - 1) * limit
      },
      {
        $limit: limit
      }
    ]);
    
    const totalCategories = await RecycleBin.aggregate([
      {
        $match: {
          deleteType: 'category_bulk'
        }
      },
      {
        $group: {
          _id: { itemName: '$itemName', category: '$category' }
        }
      },
      {
        $count: 'total'
      }
    ]);
    
    const total = totalCategories[0]?.total || 0;
    
    return { items: categories, total, page, limit };
  }
}
