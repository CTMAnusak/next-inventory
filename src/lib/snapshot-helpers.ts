/**
 * =========================================
 * SNAPSHOT HELPERS
 * =========================================
 * 
 * ‡∏™‡∏£‡πâ‡∏≤‡∏á snapshot ‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ß‡πâ‡πÉ‡∏ô RequestLog ‡πÅ‡∏•‡∏∞ ReturnLog
 * ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏π‡∏ç‡∏´‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏°‡∏∑‡πà‡∏≠ InventoryItem ‡∏´‡∏£‡∏∑‡∏≠ InventoryMaster ‡∏ñ‡∏π‡∏Å‡∏•‡∏ö
 */

import InventoryItem from '@/models/InventoryItem';
import InventoryConfig from '@/models/InventoryConfig';

/**
 * ‡∏™‡∏£‡πâ‡∏≤‡∏á snapshot ‡∏Ç‡∏≠‡∏á InventoryItem ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡πÉ‡∏ô RequestLog
 */
export async function createInventoryItemSnapshot(itemId: string) {
  try {
    const inventoryItem = await InventoryItem.findById(itemId);
    
    if (!inventoryItem) {
      console.warn(`‚ö†Ô∏è InventoryItem not found: ${itemId}`);
      return null;
    }
    
    // Get configurations for names
    const config = await InventoryConfig.findOne({});
    const categoryConfigs = config?.categoryConfigs || [];
    const statusConfigs = config?.statusConfigs || [];
    const conditionConfigs = config?.conditionConfigs || [];
    
    const categoryConfig = categoryConfigs.find((c: any) => c.id === (inventoryItem as any).categoryId);
    const statusConfig = statusConfigs.find((s: any) => s.id === inventoryItem.statusId);
    const conditionConfig = conditionConfigs.find((c: any) => c.id === inventoryItem.conditionId);

    return { 
      itemId: itemId,
      itemName: (inventoryItem as any).itemName || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏',
      categoryId: (inventoryItem as any).categoryId || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏',
      categoryName: categoryConfig?.name || (inventoryItem as any).categoryId || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏',
      serialNumber: inventoryItem.serialNumber || undefined,
      numberPhone: inventoryItem.numberPhone || undefined,
      statusId: inventoryItem.statusId || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏',
      statusName: statusConfig?.name || inventoryItem.statusId || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏',
      conditionId: inventoryItem.conditionId || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏',
      conditionName: conditionConfig?.name || inventoryItem.conditionId || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'
    };
  } catch (error) {
    console.error(`‚ùå Error creating snapshot for item ${itemId}:`, error);
    return null;
  }
}

/**
 * ‡∏™‡∏£‡πâ‡∏≤‡∏á snapshot ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏´‡∏•‡∏≤‡∏¢‡πÜ items ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ô
 */
export async function createInventoryItemSnapshotsBatch(itemIds: string[]) {
  const snapshots = await Promise.all(
    itemIds.map(itemId => createInventoryItemSnapshot(itemId))
  );
  
  // Filter out null values
  return snapshots.filter(snapshot => snapshot !== null);
}

/**
 * ‡∏™‡∏£‡πâ‡∏≤‡∏á snapshot ‡∏à‡∏≤‡∏Å InventoryItem object ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß (‡∏õ‡∏£‡∏∞‡∏´‡∏¢‡∏±‡∏î query)
 */
export async function createInventoryItemSnapshotFromObject(inventoryItem: any) {
  try {
    // Get configurations for names
    const config = await InventoryConfig.findOne({});
    const categoryConfigs = config?.categoryConfigs || [];
    const statusConfigs = config?.statusConfigs || [];
    const conditionConfigs = config?.conditionConfigs || [];
    
    const categoryConfig = categoryConfigs.find((c: any) => c.id === inventoryItem.categoryId);
    const statusConfig = statusConfigs.find((s: any) => s.id === inventoryItem.statusId);
    const conditionConfig = conditionConfigs.find((c: any) => c.id === inventoryItem.conditionId);
    
    return {
      itemId: inventoryItem._id.toString(),
      itemName: inventoryItem.itemName || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏',
      categoryId: inventoryItem.categoryId || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏',
      categoryName: categoryConfig?.name || inventoryItem.categoryId || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏',
      serialNumber: inventoryItem.serialNumber || undefined,
      numberPhone: inventoryItem.numberPhone || undefined,
      statusId: inventoryItem.statusId || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏',
      statusName: statusConfig?.name || inventoryItem.statusId || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏',
      conditionId: inventoryItem.conditionId || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏',
      conditionName: conditionConfig?.name || inventoryItem.conditionId || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'
    };
  } catch (error) {
    console.error(`‚ùå Error creating snapshot from object:`, error);
    return null;
  }
}

/**
 * =========================================
 * UPDATE SNAPSHOT BEFORE DELETE
 * =========================================
 * ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï snapshot ‡πÉ‡∏ô‡∏ó‡∏∏‡∏Å RequestLog ‡∏ó‡∏µ‡πà‡∏°‡∏µ itemId ‡∏ô‡∏µ‡πâ‡∏Å‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏•‡∏ö
 * ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏Ç‡∏≠‡∏á‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡πÑ‡∏ß‡πâ
 */
export async function updateSnapshotsBeforeDelete(itemId: string) {
  try {
    console.log(`\nüì∏ Updating snapshots before deleting item: ${itemId}`);
    
    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏Ç‡∏≠‡∏á InventoryItem
    const inventoryItem = await InventoryItem.findById(itemId);
    
    if (!inventoryItem) {
      console.warn(`‚ö†Ô∏è InventoryItem not found: ${itemId}`);
      return { success: false, message: 'Item not found' };
    }
    
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á snapshot ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
    const latestSnapshot = await createInventoryItemSnapshotFromObject(inventoryItem);
    
    if (!latestSnapshot) {
      console.error(`‚ùå Failed to create snapshot for item: ${itemId}`);
      return { success: false, message: 'Failed to create snapshot' };
    }
    
    console.log(`üì∏ Created latest snapshot:`, latestSnapshot);
    
    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï snapshot ‡πÉ‡∏ô RequestLog ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡∏°‡∏µ itemId ‡∏ô‡∏µ‡πâ
    const RequestLog = (await import('@/models/RequestLog')).default;
    
    const requestLogs = await RequestLog.find({
      'items.assignedItemIds': itemId
    });
    
    console.log(`üìã Found ${requestLogs.length} RequestLogs with this item`);
    
    let updatedCount = 0;
    
    for (const requestLog of requestLogs) {
      let hasUpdates = false;
      
      for (const item of requestLog.items) {
        // ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤ item ‡∏ô‡∏µ‡πâ‡∏°‡∏µ itemId ‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡∏•‡∏ö‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        if (item.assignedItemIds?.includes(itemId)) {
          // Initialize assignedItemSnapshots ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ
          if (!item.assignedItemSnapshots) {
            (item as any).assignedItemSnapshots = [];
          }
          
          // ‡∏´‡∏≤ snapshot ‡πÄ‡∏î‡∏¥‡∏°‡∏Ç‡∏≠‡∏á itemId ‡∏ô‡∏µ‡πâ
          const existingSnapshotIndex = (item as any).assignedItemSnapshots.findIndex(
            (s: any) => s.itemId === itemId
          );
          
          if (existingSnapshotIndex >= 0) {
            // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï snapshot ‡πÄ‡∏î‡∏¥‡∏°
            (item as any).assignedItemSnapshots[existingSnapshotIndex] = latestSnapshot;
            console.log(`   ‚úÖ Updated existing snapshot for item in RequestLog ${requestLog._id}`);
          } else {
            // ‡πÄ‡∏û‡∏¥‡πà‡∏° snapshot ‡πÉ‡∏´‡∏°‡πà
            (item as any).assignedItemSnapshots.push(latestSnapshot);
            console.log(`   ‚úÖ Added new snapshot for item in RequestLog ${requestLog._id}`);
          }
          
          hasUpdates = true;
        }
      }
      
      if (hasUpdates) {
        (requestLog as any).markModified('items');
        await requestLog.save();
        updatedCount++;
      }
    }
    
    console.log(`‚úÖ Updated ${updatedCount} RequestLogs with latest snapshot`);
    
    return {
      success: true,
      updatedRequestLogs: updatedCount,
      snapshot: latestSnapshot
    };
    
  } catch (error) {
    console.error(`‚ùå Error updating snapshots before delete:`, error);
    return {
      success: false,
      message: error instanceof Error ? error.message : 'Unknown error'
    };
  }
}
