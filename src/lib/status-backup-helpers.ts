import fs from 'fs';
import path from 'path';
import dbConnect from '@/lib/mongodb';
import InventoryConfig, { IStatusConfig } from '@/models/InventoryConfig';

// Status backup data structure
interface StatusBackupData {
  timestamp: string;
  statusConfigs: IStatusConfig[];
  version: string;
}

// ‚úÖ Backup ‡πÅ‡∏Ñ‡πà 2 ‡πÑ‡∏ü‡∏•‡πå‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
const BACKUP_DIR = path.join(process.cwd(), 'src', 'backups');
const CURRENT_BACKUP_FILE = path.join(BACKUP_DIR, 'status-configs-current.json');
const PREVIOUS_BACKUP_FILE = path.join(BACKUP_DIR, 'status-configs-previous.json');

/**
 * ‡∏™‡∏£‡πâ‡∏≤‡∏á backup ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö statusConfigs
 * ‡πÄ‡∏Å‡πá‡∏ö‡πÅ‡∏Ñ‡πà 2 ‡πÑ‡∏ü‡∏•‡πå: current ‡πÅ‡∏•‡∏∞ previous
 */
export async function createStatusBackup(): Promise<void> {
  try {
    await dbConnect();
    
    // Ensure backup directory exists
    if (!fs.existsSync(BACKUP_DIR)) {
      fs.mkdirSync(BACKUP_DIR, { recursive: true });
    }
    
    // Get current config
    const config = await InventoryConfig.findOne({});
    if (!config) {
      console.log('‚ö†Ô∏è  No inventory config found, skipping status backup');
      return;
    }
    
    // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ current backup ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß ‡∏¢‡πâ‡∏≤‡∏¢‡πÑ‡∏õ‡πÄ‡∏õ‡πá‡∏ô previous
    if (fs.existsSync(CURRENT_BACKUP_FILE)) {
      const currentData = fs.readFileSync(CURRENT_BACKUP_FILE, 'utf8');
      fs.writeFileSync(PREVIOUS_BACKUP_FILE, currentData);
      console.log('üì¶ Moved current backup to previous');
    }
    
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á current backup ‡πÉ‡∏´‡∏°‡πà
    const backupData: StatusBackupData = {
      timestamp: new Date().toISOString(),
      statusConfigs: config.statusConfigs || [],
      version: '1.0.0'
    };
    
    fs.writeFileSync(CURRENT_BACKUP_FILE, JSON.stringify(backupData, null, 2));
    
    console.log(`‚úÖ Status backup created: ${backupData.statusConfigs.length} status configs`);
  } catch (error) {
    console.error('‚ùå Error creating status backup:', error);
    throw error;
  }
}

/**
 * ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å backup
 */
export async function restoreStatusFromBackup(usePrevious: boolean = false): Promise<void> {
  try {
    await dbConnect();
    
    const backupFile = usePrevious ? PREVIOUS_BACKUP_FILE : CURRENT_BACKUP_FILE;
    const backupType = usePrevious ? 'previous' : 'current';
    
    if (!fs.existsSync(backupFile)) {
      throw new Error(`‚ùå ${backupType} backup file not found: ${backupFile}`);
    }
    
    const backupData: StatusBackupData = JSON.parse(fs.readFileSync(backupFile, 'utf8'));
    
    // Get or create config
    let config = await InventoryConfig.findOne({});
    if (!config) {
      throw new Error('‚ùå No inventory config found in database');
    }
    
    // Restore from backup
    config.statusConfigs = backupData.statusConfigs;
    await config.save();
    
    console.log(`‚úÖ Status restore completed from ${backupType} backup: ${backupData.timestamp}`);
    console.log(`üìä Restored: ${backupData.statusConfigs.length} status configs`);
  } catch (error) {
    console.error('‚ùå Error during status restore:', error);
    throw error;
  }
}

/**
 * ‡∏•‡∏¥‡∏™‡∏ï‡πå backup ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà
 */
export function listStatusBackups(): Array<{ type: string; file: string; exists: boolean; timestamp?: string; count?: number }> {
  const backups = [
    { type: 'current', file: CURRENT_BACKUP_FILE },
    { type: 'previous', file: PREVIOUS_BACKUP_FILE }
  ];
  
  return backups.map(backup => {
    const exists = fs.existsSync(backup.file);
    let timestamp: string | undefined;
    let count: number | undefined;
    
    if (exists) {
      try {
        const data: StatusBackupData = JSON.parse(fs.readFileSync(backup.file, 'utf8'));
        timestamp = data.timestamp;
        count = data.statusConfigs.length;
      } catch (error) {
        console.error(`Error reading backup ${backup.type}:`, error);
      }
    }
    
    return {
      type: backup.type,
      file: backup.file,
      exists,
      timestamp,
      count
    };
  });
}

/**
 * ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏°‡∏µ backup ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
 */
export function hasStatusBackups(): boolean {
  return fs.existsSync(CURRENT_BACKUP_FILE) || fs.existsSync(PREVIOUS_BACKUP_FILE);
}

/**
 * ‡∏•‡∏ö backup ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡πÉ‡∏ä‡πâ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ backup ‡πÅ‡∏•‡πâ‡∏ß)
 */
export function clearStatusBackups(): void {
  try {
    if (fs.existsSync(CURRENT_BACKUP_FILE)) {
      fs.unlinkSync(CURRENT_BACKUP_FILE);
      console.log('üóëÔ∏è  Deleted current status backup');
    }
    
    if (fs.existsSync(PREVIOUS_BACKUP_FILE)) {
      fs.unlinkSync(PREVIOUS_BACKUP_FILE);
      console.log('üóëÔ∏è  Deleted previous status backup');
    }
    
    console.log('‚úÖ All status backups cleared');
  } catch (error) {
    console.error('‚ùå Error clearing status backups:', error);
    throw error;
  }
}
