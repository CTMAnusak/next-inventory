/**
 * üéØ ‡πÄ‡∏û‡∏¥‡πà‡∏° sample statusConfig ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á‡πÉ‡∏ô MongoDB Atlas UI
 */

import mongoose from 'mongoose';
import InventoryConfig, { createStatusConfig } from '@/models/InventoryConfig';
import dotenv from 'dotenv';

// ‡πÇ‡∏´‡∏•‡∏î environment variables ‡∏à‡∏≤‡∏Å .env.local
dotenv.config({ path: '.env.local' });

const addSampleStatusConfig = async () => {
  try {

    // ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ database
    if (!process.env.MONGODB_URI) {
      throw new Error('MONGODB_URI ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÉ‡∏ô environment variables');
    }

    await mongoose.connect(process.env.MONGODB_URI);

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á sample statusConfig
    const sampleStatus = createStatusConfig("‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ", 1);

    // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏Ç‡πâ‡∏≤ database
    const result = await InventoryConfig.updateOne(
      {},
      {
        $push: {
          statusConfigs: sampleStatus
        }
      }
    );


    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
    const updatedDoc = await InventoryConfig.findOne();
    console.log('üßΩ statusConfigs ‡∏´‡∏•‡∏±‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏°:', JSON.stringify(updatedDoc?.statusConfigs, null, 2));

  } catch (error) {
    console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:', error);
  } finally {
    await mongoose.disconnect();
  }
};

// ‡∏£‡∏±‡∏ô script
if (require.main === module) {
  addSampleStatusConfig();
}

export default addSampleStatusConfig;
