/**
 * üßπ ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î Collection inventoryconfigs
 * 
 * ‡∏•‡∏ö fields ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô:
 * - statuses (‡πÄ‡∏Å‡πà‡∏≤)
 * - createdAt/updatedAt (redundant - ‡πÅ‡∏ï‡πà‡∏•‡∏∞ config ‡∏°‡∏µ timestamps ‡πÅ‡∏•‡πâ‡∏ß)
 * - __v (Mongoose version key)
 * 
 * ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÅ‡∏Ñ‡πà:
 * - _id (MongoDB ‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô)
 * - statusConfigs
 * - categoryConfigs
 */

import mongoose from 'mongoose';
import InventoryConfig from '@/models/InventoryConfig';
import dotenv from 'dotenv';

// ‡πÇ‡∏´‡∏•‡∏î environment variables ‡∏à‡∏≤‡∏Å .env.local
dotenv.config({ path: '.env.local' });

const cleanup = async () => {
  try {
    console.log('üßπ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î Collection inventoryconfigs...');

    // ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ database
    if (!process.env.MONGODB_URI) {
      throw new Error('MONGODB_URI ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÉ‡∏ô environment variables');
    }

    await mongoose.connect(process.env.MONGODB_URI);

    // ‡∏î‡∏π document ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
    const currentDoc = await InventoryConfig.findOne();

    // ‡∏•‡∏ö fields ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ - ‡∏£‡∏≠‡∏ö‡∏ó‡∏µ‡πà 1
    const result1 = await InventoryConfig.updateMany(
      {},
      {
        $unset: {
          statuses: "",          // ‡∏•‡∏ö statuses ‡πÄ‡∏Å‡πà‡∏≤
          createdAt: "",         // ‡∏•‡∏ö createdAt (redundant)
          updatedAt: "",         // ‡∏•‡∏ö updatedAt (redundant)
          __v: ""               // ‡∏•‡∏ö Mongoose version key
        }
      }
    );


    // ‡∏•‡∏ö fields ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ - ‡∏£‡∏≠‡∏ö‡∏ó‡∏µ‡πà 2 (‡∏Å‡∏£‡∏ì‡∏µ‡∏ó‡∏µ‡πà Mongoose ‡∏™‡∏£‡πâ‡∏≤‡∏á updatedAt ‡πÉ‡∏´‡∏°‡πà)
    const result2 = await InventoryConfig.collection.updateMany(
      {},
      {
        $unset: {
          updatedAt: "",         // ‡∏•‡∏ö updatedAt ‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á
          createdAt: "",         // ‡∏•‡∏ö createdAt ‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á (‡∏Å‡∏£‡∏ì‡∏µ‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏≠‡∏¢‡∏π‡πà)
        }
      }
    );



    // ‡∏î‡∏π document ‡∏´‡∏•‡∏±‡∏á‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î
    const cleanedDoc = await InventoryConfig.findOne();
    console.log('üßΩ Document ‡∏´‡∏•‡∏±‡∏á‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î:', JSON.stringify(cleanedDoc, null, 2));

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡πÄ‡∏â‡∏û‡∏≤‡∏∞ fields ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
    const expectedFields = ['_id', 'statusConfigs', 'categoryConfigs'];
    const actualFields = Object.keys(cleanedDoc?.toObject() || {});
    
    
    const unexpectedFields = actualFields.filter(field => !expectedFields.includes(field));
    if (unexpectedFields.length > 0) {
    } else {
    }

  } catch (error) {
    console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:', error);
  } finally {
    await mongoose.disconnect();
  }
};

// ‡∏£‡∏±‡∏ô script
if (require.main === module) {
  cleanup();
}

export default cleanup;
