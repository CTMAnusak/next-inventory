import dbConnect from '../lib/mongodb';
import mongoose from 'mongoose';

async function fixSerialNumberIndex() {
  try {
    console.log('üîß Starting serialNumber index fix...');
    
    await dbConnect();
    const db = mongoose.connection.db;
    if (!db) {
      throw new Error('Database connection failed');
    }
    const collection = db.collection('inventoryitems');

    // 1. ‡∏î‡∏π indexes ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà
    console.log('\nüìã Current indexes:');
    const currentIndexes = await collection.listIndexes().toArray();
    currentIndexes.forEach(index => {
      console.log(`  - ${JSON.stringify(index)}`);
    });

    // 2. ‡∏•‡∏ö index ‡πÄ‡∏Å‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    const indexesToDrop = ['serialNumber_1', 'serialNumber_sparse_unique', 'serialNumber_sparse_nonunique'];
    
    for (const indexName of indexesToDrop) {
      try {
        console.log(`\nüóëÔ∏è Dropping old index: ${indexName}...`);
        await collection.dropIndex(indexName);
        console.log(`‚úÖ Index ${indexName} dropped successfully`);
      } catch (error: any) {
        if (error.codeName === 'IndexNotFound') {
          console.log(`‚ÑπÔ∏è Index ${indexName} not found (already dropped)`);
        } else {
          console.log(`‚ö†Ô∏è Error dropping index ${indexName}:`, error.message);
        }
      }
    }

    // 3. ‡∏™‡∏£‡πâ‡∏≤‡∏á partial index ‡πÉ‡∏´‡∏°‡πà (‡πÄ‡∏â‡∏û‡∏≤‡∏∞ documents ‡∏ó‡∏µ‡πà‡∏°‡∏µ serialNumber)
    console.log('\nüèóÔ∏è Creating new partial index for serialNumber...');
    await collection.createIndex(
      { serialNumber: 1 }, 
      { 
        unique: true,   // ‡∏¢‡∏±‡∏á‡∏Ñ‡∏á unique ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö SN ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡πà‡∏≤
        partialFilterExpression: { 
          $and: [
            { serialNumber: { $exists: true } },
            { serialNumber: { $ne: null } },
            { serialNumber: { $ne: "" } }
          ]
        },
        name: 'serialNumber_partial_unique'
      }
    );
    console.log('‚úÖ New partial unique index created (unique only for non-null serialNumbers)');

    // 4. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö indexes ‡πÉ‡∏´‡∏°‡πà
    console.log('\nüìã Updated indexes:');
    const updatedIndexes = await collection.listIndexes().toArray();
    updatedIndexes.forEach(index => {
      console.log(`  - ${JSON.stringify(index)}`);
    });

    // 5. ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• - ‡πÅ‡∏õ‡∏•‡∏á empty string ‡πÄ‡∏õ‡πá‡∏ô undefined
    console.log('\nüßπ Cleaning up serialNumber data...');
    const cleanupResult = await collection.updateMany(
      { serialNumber: { $in: [null, ""] } },
      { $unset: { serialNumber: 1 } }
    );
    console.log(`‚úÖ Cleaned up ${cleanupResult.modifiedCount} documents with null/empty serialNumber`);

    // 6. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÇ‡∏î‡∏¢‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡∏ö documents ‡∏ó‡∏µ‡πà‡∏°‡∏µ serialNumber ‡πÄ‡∏õ‡πá‡∏ô null
    const nullSerialCount = await collection.countDocuments({ 
      $or: [
        { serialNumber: null },
        { serialNumber: { $exists: false } },
        { serialNumber: "" }
      ]
    });
    console.log(`\nüìä Documents with null/missing/empty serialNumber: ${nullSerialCount}`);

    // 7. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÇ‡∏î‡∏¢‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡∏ö documents ‡∏ó‡∏µ‡πà‡∏°‡∏µ serialNumber ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡πà‡∏≤
    const validSerialCount = await collection.countDocuments({ 
      $and: [
        { serialNumber: { $exists: true } },
        { serialNumber: { $ne: null } },
        { serialNumber: { $ne: "" } }
      ]
    });
    console.log(`üìä Documents with valid serialNumber: ${validSerialCount}`);

    console.log('\nüéâ Serial number index fix completed successfully!');
    
  } catch (error) {
    console.error('‚ùå Error fixing serialNumber index:', error);
    throw error;
  }
}

// Run the script
if (require.main === module) {
  fixSerialNumberIndex()
    .then(() => {
      console.log('\n‚úÖ Script completed successfully');
      process.exit(0);
    })
    .catch((error) => {
      console.error('\n‚ùå Script failed:', error);
      process.exit(1);
    });
}

export { fixSerialNumberIndex };
