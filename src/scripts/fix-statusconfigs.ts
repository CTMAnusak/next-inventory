/**
 * üîß ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏±‡∏ç‡∏´‡∏≤ statusConfigs ‡∏ó‡∏µ‡πà‡∏´‡∏≤‡∏¢‡πÑ‡∏õ‡πÉ‡∏ô MongoDB Atlas UI
 * 
 * ‡πÄ‡∏û‡∏¥‡πà‡∏° statusConfigs field ‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á‡πÉ‡∏ô UI ‡πÇ‡∏î‡∏¢‡πÉ‡∏™‡πà‡∏Ñ‡πà‡∏≤ empty array ‡πÑ‡∏ß‡πâ‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô
 */

import mongoose from 'mongoose';
import InventoryConfig from '@/models/InventoryConfig';
import dotenv from 'dotenv';

// ‡πÇ‡∏´‡∏•‡∏î environment variables ‡∏à‡∏≤‡∏Å .env.local
dotenv.config({ path: '.env.local' });

const fixStatusConfigs = async () => {
  try {

    // ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ database
    if (!process.env.MONGODB_URI) {
      throw new Error('MONGODB_URI ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÉ‡∏ô environment variables');
    }

    await mongoose.connect(process.env.MONGODB_URI);

    // ‡∏î‡∏π document ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
    const currentDoc = await InventoryConfig.findOne();
    console.log('- _id:', currentDoc?._id);
    console.log('- categoryConfigs length:', currentDoc?.categoryConfigs?.length || 0);
    console.log('- statusConfigs:', currentDoc?.statusConfigs);
    console.log('- statusConfigs type:', typeof currentDoc?.statusConfigs);
    console.log('- statusConfigs is array:', Array.isArray(currentDoc?.statusConfigs));

    // Force update ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ statusConfigs ‡πÅ‡∏™‡∏î‡∏á‡πÉ‡∏ô UI
    const result = await InventoryConfig.collection.updateOne(
      { _id: currentDoc?._id },
      {
        $set: {
          statusConfigs: []  // Force set ‡πÄ‡∏õ‡πá‡∏ô empty array
        }
      }
    );


    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏´‡∏•‡∏±‡∏á‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï
    const updatedDoc = await InventoryConfig.findOne();
    console.log('üßΩ Document ‡∏´‡∏•‡∏±‡∏á‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï:');
    console.log('- _id:', updatedDoc?._id);
    console.log('- categoryConfigs length:', updatedDoc?.categoryConfigs?.length || 0);
    console.log('- statusConfigs:', updatedDoc?.statusConfigs);
    console.log('- statusConfigs type:', typeof updatedDoc?.statusConfigs);
    console.log('- statusConfigs is array:', Array.isArray(updatedDoc?.statusConfigs));

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö fields ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    const allFields = Object.keys(updatedDoc?.toObject() || {});

  } catch (error) {
    console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:', error);
  } finally {
    await mongoose.disconnect();
  }
};

// ‡∏£‡∏±‡∏ô script
if (require.main === module) {
  fixStatusConfigs();
}

export default fixStatusConfigs;
