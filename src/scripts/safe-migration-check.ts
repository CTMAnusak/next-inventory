#!/usr/bin/env tsx

/**
 * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô Database ‡∏Å‡πà‡∏≠‡∏ô‡∏ó‡∏≥‡∏Å‡∏≤‡∏£ Migration
 */

import mongoose from 'mongoose';
import dbConnect from '../lib/mongodb';

// ‡∏™‡∏£‡πâ‡∏≤‡∏á temporary schema ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Inventory ‡πÄ‡∏Å‡πà‡∏≤
const OldInventorySchema = new mongoose.Schema({
  itemName: String,
  category: String,
  serialNumbers: [String],
  quantity: Number,
  totalQuantity: Number,
  status: String,
  dateAdded: Date,
  addedBy: [{
    role: String,
    userId: String,
    quantity: Number,
    dateAdded: Date
  }]
}, { timestamps: true });

async function checkDatabaseStatus() {
  try {
    await dbConnect();
    console.log('üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ Database...\n');

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Collections ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà
    const collections = await mongoose.connection.db.listCollections().toArray();
    const collectionNames = collections.map(c => c.name);
    
    console.log('üìä Collections ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà:');
    collectionNames.forEach(name => console.log(`  - ${name}`));
    console.log('');

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô Inventory ‡πÄ‡∏Å‡πà‡∏≤
    if (collectionNames.includes('inventories')) {
      const OldInventory = mongoose.models.OldInventory || 
        mongoose.model('OldInventory', OldInventorySchema, 'inventories');
      
      const oldCount = await OldInventory.countDocuments();
      console.log(`üì¶ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô Inventory ‡πÄ‡∏Å‡πà‡∏≤: ${oldCount} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);
      
      if (oldCount > 0) {
        const samples = await OldInventory.find({}).limit(3);
        console.log('üîç ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:');
        samples.forEach((item, i) => {
          console.log(`  ${i + 1}. ${item.itemName} - ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô: ${item.quantity}`);
        });
      }
    } else {
      console.log('‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö Collection "inventories" (Inventory ‡πÄ‡∏Å‡πà‡∏≤)');
    }
    
    console.log('');

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô Models ‡πÉ‡∏´‡∏°‡πà
    const newCollections = ['inventoryitems', 'inventorymasters', 'transferlogs'];
    for (const collName of newCollections) {
      if (collectionNames.includes(collName)) {
        const count = await mongoose.connection.db.collection(collName).countDocuments();
        console.log(`üìä ${collName}: ${count} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);
      } else {
        console.log(`‚ö™ ${collName}: ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•`);
      }
    }

    console.log('\nüéØ ‡∏™‡∏£‡∏∏‡∏õ:');
    
    if (collectionNames.includes('inventories')) {
      const oldCount = await mongoose.connection.db.collection('inventories').countDocuments();
      if (oldCount > 0) {
        console.log('‚úÖ ‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤‡∏≠‡∏¢‡∏π‡πà - ‡∏ï‡πâ‡∏≠‡∏á‡∏ó‡∏≥ Migration');
        console.log('üìù ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥: ‡∏£‡∏±‡∏ô migration script ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•');
      }
    }
    
    const hasNewData = newCollections.some(name => collectionNames.includes(name));
    if (hasNewData) {
      console.log('‚úÖ ‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß - ‡∏£‡∏∞‡∏ö‡∏ö‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô');
    } else {
      console.log('‚ö†Ô∏è  ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡πÉ‡∏´‡∏°‡πà');
      console.log('üìù ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥: ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡πà‡∏≤‡∏ô Admin Panel ‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏±‡∏ô sample data script');
    }

  } catch (error) {
    console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:', error);
  } finally {
    await mongoose.disconnect();
  }
}

// Run if called directly
if (require.main === module) {
  checkDatabaseStatus();
}

export { checkDatabaseStatus };
