/**
 * üßπ ‡∏•‡∏ö statuses field ‡πÄ‡∏Å‡πà‡∏≤‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å DB
 * 
 * Script ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏•‡∏ö statuses field ‡πÄ‡∏Å‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡∏Ñ‡∏á‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡πÉ‡∏ô DB
 * ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÅ‡∏Ñ‡πà statusConfigs ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
 */

import mongoose from 'mongoose';
import InventoryConfig from '@/models/InventoryConfig';
import dotenv from 'dotenv';

// ‡πÇ‡∏´‡∏•‡∏î environment variables ‡∏à‡∏≤‡∏Å .env.local
dotenv.config({ path: '.env.local' });

const removeStatusesField = async () => {
  try {
    console.log('üßπ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏•‡∏ö statuses field ‡πÄ‡∏Å‡πà‡∏≤...');

    // ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ database
    if (!process.env.MONGODB_URI) {
      throw new Error('MONGODB_URI ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÉ‡∏ô environment variables');
    }

    await mongoose.connect(process.env.MONGODB_URI);
    console.log('‚úÖ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ database ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö document ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
    const currentDoc = await InventoryConfig.findOne();
    console.log('üìã Document ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô:');
    console.log('- _id:', currentDoc?._id);
    console.log('- categoryConfigs length:', currentDoc?.categoryConfigs?.length || 0);
    console.log('- statusConfigs length:', currentDoc?.statusConfigs?.length || 0);
    console.log('- statuses (‡πÄ‡∏Å‡πà‡∏≤):', (currentDoc as any)?.statuses || '‡πÑ‡∏°‡πà‡∏°‡∏µ');

    // ‡∏•‡∏ö statuses field ‡πÄ‡∏Å‡πà‡∏≤‡∏≠‡∏≠‡∏Å
    const result = await InventoryConfig.collection.updateMany(
      {},
      {
        $unset: {
          statuses: ""  // ‡∏•‡∏ö statuses field ‡πÄ‡∏Å‡πà‡∏≤
        }
      }
    );

    console.log(`‚úÖ ‡∏•‡∏ö statuses field ‡πÄ‡∏Å‡πà‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ${result.modifiedCount} documents`);

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏´‡∏•‡∏±‡∏á‡∏•‡∏ö
    const updatedDoc = await InventoryConfig.findOne();
    console.log('üßΩ Document ‡∏´‡∏•‡∏±‡∏á‡∏•‡∏ö statuses field:');
    console.log('- _id:', updatedDoc?._id);
    console.log('- categoryConfigs length:', updatedDoc?.categoryConfigs?.length || 0);
    console.log('- statusConfigs length:', updatedDoc?.statusConfigs?.length || 0);
    console.log('- statuses (‡πÄ‡∏Å‡πà‡∏≤):', (updatedDoc as any)?.statuses || '‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÅ‡∏•‡πâ‡∏ß ‚úÖ');

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö fields ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    const allFields = Object.keys(updatedDoc?.toObject() || {});
    console.log('üìù Fields ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô document:', allFields);

    const expectedFields = ['_id', 'statusConfigs', 'categoryConfigs'];
    const unexpectedFields = allFields.filter(field => !expectedFields.includes(field));
    
    if (unexpectedFields.length > 0) {
      console.log('‚ö†Ô∏è Fields ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏Ñ‡∏≤‡∏î‡∏´‡∏ß‡∏±‡∏á:', unexpectedFields);
    } else {
      console.log('‚úÖ Fields ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏•‡πâ‡∏ß! ‡∏°‡∏µ‡πÄ‡∏â‡∏û‡∏≤‡∏∞:', expectedFields);
    }

  } catch (error) {
    console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:', error);
  } finally {
    await mongoose.disconnect();
    console.log('üîå ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ database');
  }
};

// ‡∏£‡∏±‡∏ô script
if (require.main === module) {
  removeStatusesField();
}

export default removeStatusesField;
