'use client';

import { useState, useEffect } from 'react';
import { Package, Hash, Calendar, User, CheckCircle, AlertCircle } from 'lucide-react';

interface AvailableItem {
  itemId: string;
  serialNumber?: string;
  numberPhone?: string;
  status?: string;
  statusId?: string;
  conditionId?: string;
  dateAdded: string;
  addedBy: string;
  isVirtual?: boolean;
  displayIndex?: number;
}

interface AvailableItemsResponse {
  itemName: string;
  category: string;
  totalAvailable: number;
  withSerialNumber: AvailableItem[];
  withoutSerialNumber: {
    count: number;
    items: AvailableItem[];
    hasMore: boolean;
  };
  withPhoneNumber?: AvailableItem[];
}

interface ConfigItem {
  id: string;
  name: string;
  order: number;
}

interface InventoryConfigs {
  statusConfigs: ConfigItem[];
  conditionConfigs: ConfigItem[];
  categoryConfigs: ConfigItem[];
}

interface SelectedItem {
  itemId: string;
  serialNumber?: string;
}

interface SerialNumberSelectorProps {
  itemName: string;
  category: string;
  requestedQuantity: number;
  requestedSerialNumbers?: string[]; // SN ‡∏ó‡∏µ‡πà user ‡πÄ‡∏à‡∏≤‡∏∞‡∏à‡∏á‡∏°‡∏≤
  onSelectionChange: (selectedItems: SelectedItem[]) => void;
}

export default function SerialNumberSelector({
  itemName,
  category,
  requestedQuantity,
  requestedSerialNumbers,
  onSelectionChange
}: SerialNumberSelectorProps) {
  const [availableItems, setAvailableItems] = useState<AvailableItemsResponse | null>(null);
  const [selectedItems, setSelectedItems] = useState<SelectedItem[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState('');
  const [configs, setConfigs] = useState<InventoryConfigs | null>(null);

  useEffect(() => {
    fetchAvailableItems();
    fetchConfigs();
  }, [itemName, category]);

  // Auto-select requested serial numbers when available items are loaded
  useEffect(() => {
    if (availableItems && requestedSerialNumbers && requestedSerialNumbers.length > 0) {
      autoSelectRequestedSerialNumbers();
    }
  }, [availableItems, requestedSerialNumbers]);

  useEffect(() => {
    onSelectionChange(selectedItems);
  }, [selectedItems, onSelectionChange]);

  const fetchAvailableItems = async () => {
    try {
      setLoading(true);
      setError('');
      
      const params = new URLSearchParams({
        itemName,
        category
      });

      const response = await fetch(`/api/admin/equipment-reports/available-items?${params}`);
      const data = await response.json();

      if (!response.ok) {
        throw new Error(data.error || '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î');
      }

      setAvailableItems(data);
      console.log('üîç Available items data:', data);
      console.log('üîç Sample item with SN:', data.withSerialNumber[0]);
    } catch (error) {
      console.error('Error fetching available items:', error);
      setError(error instanceof Error ? error.message : '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î');
    } finally {
      setLoading(false);
    }
  };

  const fetchConfigs = async () => {
    try {
      const response = await fetch('/api/admin/inventory/config');
      const data = await response.json();

      if (!response.ok) {
        throw new Error(data.error || '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î');
      }

      setConfigs(data);
      console.log('üîç Configs data:', data);
      console.log('üîç Status configs:', data.statusConfigs);
      console.log('üîç Condition configs:', data.conditionConfigs);
    } catch (error) {
      console.error('Error fetching configs:', error);
    }
  };

  const handleItemSelect = (item: AvailableItem) => {
    const uniqueKey = item.serialNumber ? `${item.itemId}-${item.serialNumber}` : item.itemId;
    const itemToAdd: SelectedItem = {
      itemId: item.itemId,
      serialNumber: item.serialNumber
    };

    setSelectedItems(prev => {
      // Check if already selected (by unique key for SN items, by itemId for non-SN items)
      const isAlreadySelected = item.serialNumber 
        ? prev.some(selected => selected.itemId === item.itemId && selected.serialNumber === item.serialNumber)
        : prev.some(selected => selected.itemId === item.itemId && !selected.serialNumber);

      if (isAlreadySelected) {
        // Remove if already selected
        return item.serialNumber
          ? prev.filter(selected => !(selected.itemId === item.itemId && selected.serialNumber === item.serialNumber))
          : prev.filter(selected => !(selected.itemId === item.itemId && !selected.serialNumber));
      } else {
        // Add if not selected and under limit
        if (prev.length < requestedQuantity) {
          return [...prev, itemToAdd];
        }
        return prev;
      }
    });
  };

  const autoSelectRequestedSerialNumbers = () => {
    if (!availableItems || !requestedSerialNumbers) {
      return;
    }

    const itemsToSelect: SelectedItem[] = [];
    const unavailableSerialNumbers: string[] = [];

    // Check each requested serial number
    for (const requestedSN of requestedSerialNumbers) {
      // Find if this SN is available
      const availableItem = availableItems.withSerialNumber.find(
        item => item.serialNumber === requestedSN
      );

      if (availableItem) {
        itemsToSelect.push({
          itemId: availableItem.itemId,
          serialNumber: availableItem.serialNumber
        });
      } else {
        unavailableSerialNumbers.push(requestedSN);
      }
    }

    // Set selected items
    setSelectedItems(itemsToSelect);

    // Show status messages
    if (unavailableSerialNumbers.length > 0) {
      setError(`‚ö†Ô∏è Serial Numbers ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÉ‡∏ô‡∏Ñ‡∏•‡∏±‡∏á: ${unavailableSerialNumbers.join(', ')}`);
    } else if (itemsToSelect.length > 0) {
      setError(`‚úÖ ‡∏•‡πá‡∏≠‡∏Ñ Serial Numbers ‡πÅ‡∏•‡πâ‡∏ß: ${itemsToSelect.map(item => item.serialNumber).join(', ')}`);
    } else {
      setError(''); // Clear any previous errors
    }
  };

  const handleAutoSelect = () => {
    if (!availableItems) return;

    // Auto-select items prioritizing those with serial numbers
    const autoSelected: SelectedItem[] = [];
    
    // First, select items with serial numbers
    for (const item of availableItems.withSerialNumber) {
      if (autoSelected.length < requestedQuantity) {
        autoSelected.push({
          itemId: item.itemId,
          serialNumber: item.serialNumber
        });
      }
    }
    
    // Then, select items without serial numbers if needed
    for (const item of availableItems.withoutSerialNumber.items) {
      if (autoSelected.length < requestedQuantity) {
        autoSelected.push({
          itemId: item.itemId,
          serialNumber: undefined
        });
      }
    }

    setSelectedItems(autoSelected);
  };

  const isSelected = (uniqueKey: string) => {
    if (uniqueKey.includes('-')) {
      // For items with serial numbers
      const [itemId, serialNumber] = uniqueKey.split('-');
      return selectedItems.some(selected => selected.itemId === itemId && selected.serialNumber === serialNumber);
    } else {
      // For items without serial numbers
      return selectedItems.some(selected => selected.itemId === uniqueKey && !selected.serialNumber);
    }
  };

  const canSelectMore = selectedItems.length < requestedQuantity;
  const isComplete = selectedItems.length === requestedQuantity;

  // Helper functions to get config names with fallback
  const getStatusName = (statusId?: string) => {
    if (!statusId) return '';
    
    // Default mappings
    const defaultStatusMap: Record<string, string> = {
      'status_available': '‡∏°‡∏µ',
      'status_missing': '‡∏´‡∏≤‡∏¢',
      'status_maintenance': '‡∏ã‡πà‡∏≠‡∏°‡∏ö‡∏≥‡∏£‡∏∏‡∏á',
      'status_damaged': '‡πÄ‡∏™‡∏µ‡∏¢‡∏´‡∏≤‡∏¢'
    };
    
    // Try configs first, then fallback to default
    if (configs && configs.statusConfigs) {
      const status = configs.statusConfigs.find(s => s.id === statusId);
      if (status) return status.name;
    }
    
    return defaultStatusMap[statusId] || statusId;
  };

  const getConditionName = (conditionId?: string) => {
    if (!conditionId) return '';
    
    // Default mappings
    const defaultConditionMap: Record<string, string> = {
      'cond_working': '‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ',
      'cond_damaged': '‡∏ä‡∏≥‡∏£‡∏∏‡∏î',
      'cond_broken': '‡πÄ‡∏™‡∏µ‡∏¢‡∏´‡∏≤‡∏¢',
      'cond_repair': '‡∏ã‡πà‡∏≠‡∏°‡πÅ‡∏ã‡∏°'
    };
    
    // Try configs first, then fallback to default
    if (configs && configs.conditionConfigs) {
      const condition = configs.conditionConfigs.find(c => c.id === conditionId);
      if (condition) return condition.name;
    }
    
    return defaultConditionMap[conditionId] || conditionId;
  };

  if (loading) {
    return (
      <div className="p-4 border rounded-lg">
        <div className="animate-pulse">
          <div className="h-4 bg-gray-200 rounded w-1/4 mb-2"></div>
          <div className="h-3 bg-gray-200 rounded w-1/2"></div>
        </div>
      </div>
    );
  }

  if (error) {
    const isSuccess = error.includes('‚úÖ');
    return (
      <div className={`p-4 border rounded-lg ${
        isSuccess 
          ? 'border-green-200 bg-green-50' 
          : 'border-red-200 bg-red-50'
      }`}>
        <div className={`flex items-center ${
          isSuccess ? 'text-green-600' : 'text-red-600'
        }`}>
          <AlertCircle className="w-4 h-4 mr-2" />
          <span className="text-sm">{error}</span>
        </div>
      </div>
    );
  }

  if (!availableItems) {
    return (
      <div className="p-4 border rounded-lg border-gray-200">
        <div className="text-sm text-gray-500">‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå</div>
      </div>
    );
  }

  if (availableItems.totalAvailable === 0) {
    return (
      <div className="p-4 border rounded-lg border-yellow-200 bg-yellow-50">
        <div className="flex items-center text-yellow-600">
          <AlertCircle className="w-4 h-4 mr-2" />
          <span className="text-sm">‡πÑ‡∏°‡πà‡∏°‡∏µ {itemName} ‡∏ß‡πà‡∏≤‡∏á‡πÉ‡∏ô‡∏Ñ‡∏•‡∏±‡∏á</span>
        </div>
      </div>
    );
  }

  if (availableItems.totalAvailable < requestedQuantity) {
    return (
      <div className="p-4 border rounded-lg border-red-200 bg-red-50">
        <div className="flex items-center text-red-600">
          <AlertCircle className="w-4 h-4 mr-2" />
          <span className="text-sm">
            ‡∏°‡∏µ {itemName} ‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏û‡∏µ‡∏¢‡∏á {availableItems.totalAvailable} ‡∏ä‡∏¥‡πâ‡∏ô ‡πÅ‡∏ï‡πà‡∏Ç‡∏≠ {requestedQuantity} ‡∏ä‡∏¥‡πâ‡∏ô
          </span>
        </div>
      </div>
    );
  }

  return (
    <div className="p-4 border rounded-lg">
      {/* Header */}
      <div className="flex items-center justify-between mb-3">
        <div className="flex items-center">
          <Package className="w-4 h-4 mr-2 text-blue-600" />
          <span className="font-medium text-sm text-gray-900">{itemName}</span>
          <span className="ml-2 px-2 py-1 text-xs bg-gray-100 text-gray-900 rounded font-medium">
            ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å {selectedItems.length}/{requestedQuantity}
          </span>
        </div>
        
        {isComplete && (
          <div className="flex items-center text-green-600">
            <CheckCircle className="w-4 h-4 mr-1" />
            <span className="text-xs">‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏£‡∏ö‡πÅ‡∏•‡πâ‡∏ß</span>
          </div>
        )}
      </div>

      {/* Quick Actions */}
      <div className="mb-3">
        <button
          onClick={handleAutoSelect}
          className="px-3 py-1 text-xs bg-blue-100 text-blue-800 rounded hover:bg-blue-200 font-medium"
        >
          ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
        </button>
        {selectedItems.length > 0 && (
          <button
            onClick={() => setSelectedItems([])}
            className="ml-2 px-3 py-1 text-xs bg-gray-100 text-gray-700 rounded hover:bg-gray-200"
          >
            ‡∏•‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
          </button>
        )}
      </div>

      {/* Items without Serial Numbers - ‡∏•‡∏≥‡∏î‡∏±‡∏ö‡πÅ‡∏£‡∏Å */}
      {availableItems.withoutSerialNumber.count > 0 && (
        <div className="mb-4">
          <h4 className="text-sm font-medium text-gray-700 mb-2">
            ‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ SN/‡πÄ‡∏ö‡∏≠‡∏£‡πå ({availableItems.withoutSerialNumber.count} ‡∏ä‡∏¥‡πâ‡∏ô)
          </h4>
          <div className="space-y-1">
            {availableItems.withoutSerialNumber.items.map((item, index) => (
              <div
                key={item.itemId}
                className={`p-3 border rounded cursor-pointer transition-colors ${
                  isSelected(item.itemId)
                    ? 'border-blue-500 bg-blue-50'
                    : canSelectMore
                    ? item.isVirtual 
                      ? 'border-purple-200 hover:border-purple-300 hover:bg-purple-50'
                      : 'border-gray-200 hover:border-gray-300 hover:bg-gray-50'
                    : 'border-gray-200 bg-gray-50 cursor-not-allowed opacity-50'
                }`}
                onClick={() => canSelectMore || isSelected(item.itemId) ? handleItemSelect(item) : null}
              >
                <div className="space-y-2">
                  {/* First row: Item number and selection checkbox */}
                  <div className="flex items-center justify-between">
                    <div className="flex items-center">
                      <div className={`w-3 h-3 rounded border mr-2 ${
                        isSelected(item.itemId)
                          ? 'bg-blue-600 border-blue-600'
                          : 'border-gray-300'
                      }`}>
                        {isSelected(item.itemId) && (
                          <CheckCircle className="w-3 h-3 text-white" />
                        )}
                      </div>
                      <span className={`text-sm font-medium ${item.isVirtual ? 'text-purple-600' : 'text-gray-600'}`}>
                        ‡∏ä‡∏¥‡πâ‡∏ô‡∏ó‡∏µ‡πà {item.displayIndex || index + 1} (‡πÑ‡∏°‡πà‡∏°‡∏µ SN) {item.isVirtual ? '[Virtual]' : ''}
                      </span>
                    </div>
                    <div className="flex items-center text-xs text-gray-500">
                      <Calendar className="w-3 h-3 mr-1" />
                      {new Date(item.dateAdded).toLocaleDateString('th-TH')}
                    </div>
                  </div>
                  
                  {/* Second row: Status and Condition */}
                  <div className="flex items-center justify-between text-xs">
                    <div className="flex items-center space-x-3">
                      {/* Status */}
                      {item.statusId && (
                        <span className="px-2 py-1 bg-green-100 text-green-800 rounded-full font-medium">
                          {getStatusName(item.statusId)}
                        </span>
                      )}
                      
                      {/* Condition */}
                      {item.conditionId && (
                        <span className="px-2 py-1 bg-blue-100 text-blue-800 rounded-full font-medium">
                          {getConditionName(item.conditionId)}
                        </span>
                      )}
                    </div>
                  </div>
                </div>
              </div>
            ))}
            {availableItems.withoutSerialNumber.hasMore && (
              <div className="text-xs text-gray-500 text-center py-1">
                ‡πÅ‡∏•‡∏∞‡∏≠‡∏µ‡∏Å {availableItems.withoutSerialNumber.count - availableItems.withoutSerialNumber.items.length} ‡∏ä‡∏¥‡πâ‡∏ô
              </div>
            )}
          </div>
        </div>
      )}

      {/* Items with Serial Numbers */}
      {availableItems.withSerialNumber.length > 0 && (
        <div>
          <h4 className="text-sm font-medium text-gray-700 mb-2 flex items-center">
            <Hash className="w-3 h-3 mr-1" />
            ‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏ó‡∏µ‡πà‡∏°‡∏µ SN ({availableItems.withSerialNumber.length} ‡∏ä‡∏¥‡πâ‡∏ô)
          </h4>
          <div className="space-y-1 max-h-64 overflow-y-auto">
            {availableItems.withSerialNumber.map((item) => (
              <div
                key={`${item.itemId}-${item.serialNumber}`}
                className={`p-3 border rounded cursor-pointer transition-colors ${
                  isSelected(`${item.itemId}-${item.serialNumber}`)
                    ? 'border-blue-500 bg-blue-50'
                    : canSelectMore
                    ? 'border-gray-200 hover:border-gray-300 hover:bg-gray-50'
                    : 'border-gray-200 bg-gray-50 cursor-not-allowed opacity-50'
                }`}
                onClick={() => canSelectMore || isSelected(`${item.itemId}-${item.serialNumber}`) ? handleItemSelect(item) : null}
              >
                <div className="space-y-2">
                  {/* First row: Serial Number and selection checkbox */}
                  <div className="flex items-center justify-between">
                    <div className="flex items-center">
                      <div className={`w-3 h-3 rounded border mr-2 ${
                        isSelected(`${item.itemId}-${item.serialNumber}`)
                          ? 'bg-blue-600 border-blue-600'
                          : 'border-gray-300'
                      }`}>
                        {isSelected(`${item.itemId}-${item.serialNumber}`) && (
                          <CheckCircle className="w-3 h-3 text-white" />
                        )}
                      </div>
                      <div className="flex flex-col">
                        <span className="text-sm font-mono text-blue-600 font-medium">
                          {item.serialNumber || item.numberPhone}
                        </span>
                        <span className="text-xs text-red-600 font-semibold">
                          TEST: ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ {getStatusName(item.statusId)} | ‡∏™‡∏†‡∏≤‡∏û {getConditionName(item.conditionId)}
                        </span>
                      </div>
                    </div>
                    <div className="flex items-center text-xs text-gray-500">
                      <User className="w-3 h-3 mr-1" />
                      {item.addedBy === 'admin' ? 'Admin' : 'User'}
                    </div>
                  </div>
                  
                  {/* Second row: Status and Condition */}
                  <div className="flex items-center justify-between text-xs mt-2">
                    <div className="flex flex-col space-y-1 w-full">
                      {/* Debug: Always show raw data */}
                      <div className="px-2 py-1 bg-gray-100 text-gray-600 rounded text-xs">
                        Debug: {item.statusId || 'no-status'} | {item.conditionId || 'no-condition'} | configs: {configs ? 'loaded' : 'null'}
                      </div>
                      
                      <div className="flex items-center space-x-2">
                        {/* Status */}
                        <span className="px-3 py-1 bg-green-200 text-green-900 rounded-full font-semibold text-sm border border-green-300">
                          ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: {getStatusName(item.statusId) || item.statusId || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'}
                        </span>
                        
                        {/* Condition */}
                        <span className="px-3 py-1 bg-blue-200 text-blue-900 rounded-full font-semibold text-sm border border-blue-300">
                          ‡∏™‡∏†‡∏≤‡∏û: {getConditionName(item.conditionId) || item.conditionId || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'}
                        </span>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            ))}
          </div>
        </div>
      )}

      {/* Selection Summary */}
      {selectedItems.length > 0 && (
        <div className="mt-3 pt-3 border-t border-gray-200">
          <div className="text-xs text-gray-600 mb-1">‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å:</div>
          <div className="flex flex-wrap gap-1">
            {selectedItems.map((item, index) => (
              <span
                key={item.itemId}
                className="inline-flex items-center px-2 py-1 text-xs bg-blue-100 text-blue-800 rounded"
              >
                {item.serialNumber || `‡∏ä‡∏¥‡πâ‡∏ô‡∏ó‡∏µ‡πà ${index + 1}`}
              </span>
            ))}
          </div>
        </div>
      )}
    </div>
  );
}
