import { NextRequest, NextResponse } from 'next/server';
import { getTokensFromCode, getUserProfile } from '@/lib/google-auth';
import dbConnect from '@/lib/mongodb';
import User from '@/models/User';
import jwt from 'jsonwebtoken';

export async function POST(request: NextRequest) {
  try {
    const { code, action } = await request.json();

    if (!code) {
      return NextResponse.json(
        { error: 'Missing authorization code' },
        { status: 400 }
      );
    }

    // Exchange code for tokens
    const tokens = await getTokensFromCode(code);
    
    if (!tokens.access_token) {
      return NextResponse.json(
        { error: 'Failed to get access token' },
        { status: 400 }
      );
    }

    // Get user profile from Google
    const googleProfile = await getUserProfile(tokens.access_token);
    
    if (!googleProfile || !googleProfile.email) {
      return NextResponse.json(
        { error: 'Failed to get user profile' },
        { status: 400 }
      );
    }

    await dbConnect();

    // Check if user exists
    const existingUser = await User.findOne({ email: googleProfile.email });

    if (action === 'register') {
      // Registration flow
      if (existingUser) {
        if (existingUser.registrationMethod === 'google' && !existingUser.isApproved) {
          return NextResponse.json(
            { 
              error: '‚è≥ ‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏à‡∏≤‡∏Å‡∏ó‡∏µ‡∏° IT Support',
              errorType: 'pending_approval',
              details: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏à‡∏≤‡∏Å‡∏ó‡∏µ‡∏° IT Support ‡∏´‡∏£‡∏∑‡∏≠‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏ó‡∏µ‡∏° IT Support ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥'
            },
            { status: 400 }
          );
        } else if (existingUser.registrationMethod === 'google') {
          return NextResponse.json(
            { 
              error: '‚úÖ ‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö',
              errorType: 'already_exists',
              details: '‡∏ö‡∏±‡∏ç‡∏ä‡∏µ Google ‡∏ô‡∏µ‡πâ‡πÑ‡∏î‡πâ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏•‡πâ‡∏ß ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏ä‡πâ‡∏õ‡∏∏‡πà‡∏° "‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏î‡πâ‡∏ß‡∏¢ Google" ‡πÅ‡∏ó‡∏ô'
            },
            { status: 400 }
          );
        } else {
          return NextResponse.json(
            { 
              error: 'üìß ‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö',
              errorType: 'email_taken',
              details: `‡∏≠‡∏µ‡πÄ‡∏°‡∏• ${googleProfile.email} ‡πÑ‡∏î‡πâ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏î‡πâ‡∏ß‡∏¢‡∏ß‡∏¥‡∏ò‡∏µ‡∏≠‡∏∑‡πà‡∏ô‡πÅ‡∏•‡πâ‡∏ß ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏ä‡πâ‡∏ß‡∏¥‡∏ò‡∏µ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏õ‡∏Å‡∏ï‡∏¥ ‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏ä‡πâ‡∏≠‡∏µ‡πÄ‡∏°‡∏• Google ‡∏≠‡∏∑‡πà‡∏ô`
            },
            { status: 400 }
          );
        }
      }

      // Redirect to profile completion page
      const profileParam = encodeURIComponent(JSON.stringify(googleProfile));
      return NextResponse.json({
        redirect: `/auth/google-register?profile=${profileParam}`
      });
    } else {
      // Login flow
      if (!existingUser) {
        return NextResponse.json(
          { 
            error: '‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ',
            errorType: 'no_account',
            details: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏î‡πâ‡∏ß‡∏¢ Google ‡∏´‡∏£‡∏∑‡∏≠‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏ó‡∏µ‡∏° IT Support'
          },
          { status: 400 }
        );
      }

      if (existingUser.registrationMethod !== 'google') {
        return NextResponse.json(
          { error: '‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏ú‡πà‡∏≤‡∏ô Google ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏ä‡πâ‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÅ‡∏•‡∏∞‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô' },
          { status: 400 }
        );
      }

      if (!existingUser.isApproved) {
        return NextResponse.json(
          { error: '‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏à‡∏≤‡∏Å‡∏ó‡∏µ‡∏° IT Support' },
          { status: 400 }
        );
      }

      // Create JWT token
      const token = jwt.sign(
        {
          userId: existingUser.user_id, // ‡πÉ‡∏ä‡πâ user_id ‡πÅ‡∏ó‡∏ô _id ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö auth check
          email: existingUser.email,
          userRole: existingUser.userRole,
          isMainAdmin: existingUser.isMainAdmin,
          pendingDeletion: existingUser.pendingDeletion || false // ‡πÄ‡∏û‡∏¥‡πà‡∏° pendingDeletion status
        },
        process.env.JWT_SECRET || 'fallback-secret',
        { expiresIn: '7d' }
      );

      // Set HTTP-only cookie
      const response = NextResponse.json({
        success: true,
        user: {
          id: existingUser.user_id,
          user_id: existingUser.user_id,
          firstName: existingUser.firstName,
          lastName: existingUser.lastName,
          nickname: existingUser.nickname,
          department: existingUser.department,
          phone: existingUser.phone,
          email: existingUser.email,
          userType: existingUser.userType,
          office: existingUser.office,
          userRole: existingUser.userRole,
          isMainAdmin: existingUser.isMainAdmin
        }
      });

      response.cookies.set('auth-token', token, {
        httpOnly: true,
        secure: process.env.NODE_ENV === 'production',
        sameSite: 'lax',
        maxAge: 7 * 24 * 60 * 60 // 7 days
      });

      return response;
    }

  } catch (error) {
    console.error('Google auth error:', error);
    return NextResponse.json(
      { error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Google' },
      { status: 500 }
    );
  }
}
