import { NextRequest, NextResponse } from 'next/server';
import dbConnect from '@/lib/mongodb';
import RequestLog from '@/models/RequestLog';
import { verifyToken } from '@/lib/auth';
import InventoryMaster from '@/models/InventoryMaster';
import InventoryItem from '@/models/InventoryItem';
import InventoryConfig from '@/models/InventoryConfig';
import { findAvailableItems } from '@/lib/inventory-helpers';
import { createDatabaseDate } from '@/lib/thai-date-utils';

export async function POST(request: NextRequest) {
  try {
    const requestData = await request.json();
    
    // Debug: Log the received data

    // Validate required fields (notes no longer required)
    const requiredFields = ['firstName', 'lastName', 'requestDate', 'urgency', 'deliveryLocation', 'items'];
    
    for (const field of requiredFields) {
      if (!requestData[field]) {
        console.error(`Missing required field: ${field}`);
        return NextResponse.json(
          { error: `‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å ${field}` },
          { status: 400 }
        );
      }
    }

    // Validate phone number if provided (10 digits only)
    if (requestData.phone) {
      const phoneRegex = /^[0-9]{10}$/;
      if (!phoneRegex.test(requestData.phone)) {
        return NextResponse.json(
          { error: '‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç 10 ‡∏´‡∏•‡∏±‡∏Å' },
          { status: 400 }
        );
      }
    }

    // Validate items
    if (!Array.isArray(requestData.items) || requestData.items.length === 0) {
      return NextResponse.json(
        { error: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 1 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£' },
        { status: 400 }
      );
    }

    // Enhanced validation logging
    
    for (const item of requestData.items) {
      // ‡πÉ‡∏ä‡πâ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÉ‡∏´‡∏°‡πà: ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ masterId
      if (!item.masterId) {
        console.error('üîç API - Missing masterId:', item);
        return NextResponse.json(
          { error: '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô: ‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏∏ Master ID ‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå' },
          { status: 400 }
        );
      }
      
      if (!item.quantity || item.quantity <= 0) {
        console.error('üîç API - Invalid quantity:', item);
        return NextResponse.json(
          { error: '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 0' },
          { status: 400 }
        );
      }
    }

    await dbConnect();

    // Get user ID for personal item updates
    const token = request.cookies.get('auth-token')?.value;
    const payload: any = token ? verifyToken(token) : null;
    const currentUserId = payload?.userId;

    if (!currentUserId) {
      return NextResponse.json(
        { error: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö' },
        { status: 401 }
      );
    }

    // Load inventory config to get correct status and condition IDs
    const inventoryConfig = await InventoryConfig.findOne({});
    let availableStatusId = 'status_available';
    let workingConditionId = 'cond_working';
    
    if (inventoryConfig) {
      // Find the "‡∏°‡∏µ" status config
      const availableStatus = inventoryConfig.statusConfigs?.find(s => s.name === '‡∏°‡∏µ');
      if (availableStatus) {
        availableStatusId = availableStatus.id;
      }
      
      // Find the "‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ" condition config
      const workingCondition = inventoryConfig.conditionConfigs?.find(c => c.name === '‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ');
      if (workingCondition) {
        workingConditionId = workingCondition.id;
      }
    }

    // Check for pending requests first
    const pendingRequests = await RequestLog.find({
      userId: currentUserId,
      status: 'pending'
    });

    // Check if any requested items are already in pending requests
    for (const item of requestData.items) {
      const hasPendingRequest = pendingRequests.some(request => 
        request.items.some((requestItem: any) => 
          requestItem.masterId === item.masterId &&
          (!item.serialNumber || requestItem.serialNumber === item.serialNumber)
        )
      );

      if (hasPendingRequest) {
        const master = await InventoryMaster.findById(item.masterId);
        const itemName = master?.itemName || '‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå';
        return NextResponse.json(
          { error: `${itemName} ${item.serialNumber ? `(S/N: ${item.serialNumber}) ` : ''}‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏ö‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß` },
          { status: 400 }
        );
      }
    }

    // Validate that requested items are available
    const validatedItems = [];
    
    for (const item of requestData.items) {
      
      try {
        // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å InventoryMaster (‡πÑ‡∏°‡πà‡∏û‡∏∂‡πà‡∏á‡∏û‡∏≤ InventoryItem ‡∏≠‡∏µ‡∏Å‡∏ï‡πà‡∏≠‡πÑ‡∏õ)
        const master = await InventoryMaster.findById(item.masterId);
        if (!master) {
          return NextResponse.json(
            { error: `‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå ID: ${item.masterId}` },
            { status: 400 }
          );
        }

        const itemName = master.itemName; // ‡πÉ‡∏ä‡πâ‡∏ä‡∏∑‡πà‡∏≠‡∏à‡∏≤‡∏Å master ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
        const categoryId = master.categoryId;
        
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏à‡∏≤‡∏Å InventoryItem ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ itemName ‡πÅ‡∏•‡∏∞ categoryId
        const availableItems = await findAvailableItems(itemName, categoryId, item.quantity);
        
        if (availableItems.length < item.quantity) {
          return NextResponse.json(
            { 
              error: `‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå "${itemName}" ‡∏°‡∏µ‡πÑ‡∏°‡πà‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠ (‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£: ${item.quantity}, ‡∏°‡∏µ: ${availableItems.length})`,
              itemName: itemName,
              requested: item.quantity,
              available: availableItems.length
            },
            { status: 400 }
          );
        }

        // ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡∏≥‡∏Ç‡∏≠
        const cleanItems = {
          masterId: item.masterId,
          itemName: itemName,
          categoryId: categoryId,
          quantity: item.quantity,
          // ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å serialNumbers ‡πÄ‡∏õ‡πá‡∏ô array (‡∏ï‡∏≤‡∏° model)
          serialNumbers: item.serialNumber ? [item.serialNumber] : undefined,
          availableItemIds: availableItems.map(it => it._id.toString()),
          itemNotes: item.itemNotes || undefined,
          // ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÅ‡∏•‡∏∞‡∏™‡∏†‡∏≤‡∏û‡∏Ç‡∏≠‡∏á‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏ö‡∏¥‡∏Å (‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏ó‡∏µ‡πà‡πÅ‡∏™‡∏î‡∏á‡πÉ‡∏´‡πâ‡πÄ‡∏ö‡∏¥‡∏Å‡πÑ‡∏î‡πâ‡∏°‡∏µ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ "‡∏°‡∏µ" ‡πÅ‡∏•‡∏∞‡∏™‡∏†‡∏≤‡∏û "‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ")
          statusOnRequest: availableStatusId, // ‡∏°‡∏µ
          conditionOnRequest: workingConditionId // ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ
        };

        validatedItems.push(cleanItems);
        
      } catch (error) {
        console.error('‚ùå Error validating item:', error);
        return NextResponse.json(
          { error: `‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå: ${error}` },
          { status: 500 }
        );
      }
    }

    // Create new request log with new structure (real-time lookup)
    const requestLogData = {
      userId: currentUserId,
      // Store user info for branch users (who don't have user profiles)
      requesterFirstName: requestData.firstName || undefined,
      requesterLastName: requestData.lastName || undefined,
      requesterNickname: requestData.nickname || undefined,
      requesterDepartment: requestData.department || undefined,
      requesterPhone: requestData.phone || undefined,
      requesterOffice: requestData.office || undefined,
      requestDate: createDatabaseDate(),
      urgency: requestData.urgency,
      deliveryLocation: requestData.deliveryLocation,
      items: validatedItems,
      status: 'pending',
      requestType: 'request'
    };

    const newRequest = new RequestLog(requestLogData);
    await newRequest.save();
    const newRequestId = newRequest._id;

    // NOTE: ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á deduct inventory ‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏à‡∏∞ deduct ‡πÄ‡∏°‡∏∑‡πà‡∏≠ Admin ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
    // ‡∏Å‡∏≤‡∏£ deduct ‡∏à‡∏∞‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡∏∂‡πâ‡∏ô‡πÉ‡∏ô approve-with-selection API ‡πÅ‡∏ó‡∏ô

    return NextResponse.json({
      message: '‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏ö‡∏¥‡∏Å‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß',
      requestId: newRequestId,
      userIdSaved: currentUserId
    });

  } catch (error) {
    console.error('Equipment request error:', error);
    
    // Enhanced error logging
    if (error instanceof Error) {
      console.error('Error message:', error.message);
      console.error('Error stack:', error.stack);
    }
    
    return NextResponse.json(
      { 
        error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö', 
        details: process.env.NODE_ENV === 'development' ? String(error) : undefined 
      },
      { status: 500 }
    );
  }
}

export async function GET(request: NextRequest) {
  try {
    await dbConnect();
    
    // Get query parameters for filtering
    const { searchParams } = new URL(request.url);
    const userId = searchParams.get('userId');
    const status = searchParams.get('status');
    
    // Build filter object
    const filter: any = { requestType: 'request' };
    
    if (userId) {
      filter.userId = userId;
    }
    
    if (status) {
      filter.status = status;
    }
    
    // Fetch request logs
    const requests = await RequestLog.find(filter)
      .sort({ requestDate: -1 });
    
    // ‡πÉ‡∏ä‡πâ populate functions ‡πÄ‡∏û‡∏∑‡πà‡∏≠ populate ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
    const { populateRequestLogCompleteBatch } = await import('@/lib/equipment-populate-helpers');
    const populatedRequests = await populateRequestLogCompleteBatch(requests);
    
    return NextResponse.json({ requests: populatedRequests });
    
  } catch (error) {
    console.error('Error fetching request logs:', error);
    return NextResponse.json(
      { error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•' },
      { status: 500 }
    );
  }
}