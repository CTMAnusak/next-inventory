import { NextRequest, NextResponse } from 'next/server';
import dbConnect from '@/lib/mongodb';
import User from '@/models/User';
import { verifyPassword, generateToken } from '@/lib/auth';

export async function POST(request: NextRequest) {
  try {
    const { email, password } = await request.json();
    console.log('üîç Login attempt for email:', email);

    if (!email || !password) {
      console.log('‚ùå Missing email or password');
      return NextResponse.json(
        { error: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÅ‡∏•‡∏∞‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô' },
        { status: 400 }
      );
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô database
    await dbConnect();

    // ‡πÉ‡∏ä‡πâ MongoDB Native ‡πÄ‡∏û‡∏£‡∏≤‡∏∞ Mongoose ‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤ select user_id
    const { MongoClient } = require('mongodb');
    const uri = process.env.MONGODB_URI || 'mongodb://localhost:27017/inventory-management';
    const client = new MongoClient(uri);
    
    await client.connect();
    const db = client.db();
    const collection = db.collection('users');
    
    const user = await collection.findOne({ email });
    await client.close();
    
    console.log('üîç User found:', user ? 'Yes' : 'No');
    
    if (!user) {
      console.log('‚ùå User not found for email:', email);
      return NextResponse.json(
        { error: '‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á' },
        { status: 401 }
      );
    }

    // Verify password
    console.log('üîç Verifying password...');
    const isValid = await verifyPassword(password, user.password);
    console.log('üîç Password valid:', isValid);
    
    if (!isValid) {
      console.log('‚ùå Invalid password for email:', email);
      return NextResponse.json(
        { error: '‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á' },
        { status: 401 }
      );
    }

    // Generate JWT token
    const token = generateToken({
      userId: user.user_id, // ‡πÉ‡∏ä‡πâ user_id ‡πÅ‡∏ó‡∏ô _id
      email: user.email,
      userType: user.userType,
      userRole: user.userRole || 'user',
      isMainAdmin: user.isMainAdmin || false,
      pendingDeletion: user.pendingDeletion || false // ‡πÄ‡∏û‡∏¥‡πà‡∏° pendingDeletion status
    });

    // Create response with token in cookie
    const response = NextResponse.json({
      message: '‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
      user: {
        id: user.user_id, // ‡πÉ‡∏ä‡πâ user_id ‡πÅ‡∏ó‡∏ô _id
        email: user.email,
        firstName: user.firstName,
        lastName: user.lastName,
        userType: user.userType,
        office: user.office,
        isMainAdmin: user.isMainAdmin || false,
        userRole: user.userRole || 'user'
      }
    });

    // Set secure cookie with debug - 7 days = 7 * 24 * 60 * 60 = 604800 seconds
    const maxAge = 7 * 24 * 60 * 60; // 7 ‡∏ß‡∏±‡∏ô
    console.log('üç™ Setting auth-token cookie, maxAge:', maxAge, '(7 days)');
    console.log('üç™ Token to set:', token.substring(0, 30) + '...');
    
    // ‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ manual Set-Cookie header ‡πÅ‡∏ó‡∏ô
    response.headers.set('Set-Cookie', 
      `auth-token=${token}; Path=/; Max-Age=${maxAge}; SameSite=Strict`
    );
    
    console.log('‚úÖ Cookie set via manual header');

    return response;

  } catch (error) {
    console.error('Login error:', error);
    return NextResponse.json(
      { error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö' },
      { status: 500 }
    );
  }
}

export async function DELETE(request: NextRequest) {
  // Logout endpoint
  const response = NextResponse.json({ message: '‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à' });
  response.cookies.delete('auth-token');
  return response;
}
