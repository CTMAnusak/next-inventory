import { NextRequest, NextResponse } from 'next/server';
import dbConnect from '@/lib/mongodb';
import IssueLog from '@/models/IssueLog';
import { sendIssueUpdateNotification } from '@/lib/email';
import { formatIssueForEmail } from '@/lib/issue-helpers';

// POST - Handle status transitions (Accept Job or Send Work)
export async function POST(
  request: NextRequest,
  { params }: { params: Promise<{ id: string }> }
) {
  try {
    await dbConnect();
    
    const { id } = await params;
    const requestData = await request.json().catch(() => ({}));

    // Find the issue
    const issue = await IssueLog.findById(id);
    if (!issue) {
      return NextResponse.json(
        { error: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£' },
        { status: 404 }
      );
    }

    // Determine the next status based on current status
    let newStatus: string;
    let updateFields: any = { updatedAt: new Date() };
    
    if (issue.status === 'pending') {
      // Accept job: pending ‚Üí in_progress
      newStatus = 'in_progress';
      updateFields.status = newStatus;
      updateFields.acceptedDate = new Date(); // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö‡∏á‡∏≤‡∏ô
      
      // Add assigned admin info if provided
      if (requestData.assignedAdminId) {
        updateFields.assignedAdminId = requestData.assignedAdminId; // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å User ID
      }
      if (requestData.assignedAdmin) {
        updateFields.assignedAdmin = requestData.assignedAdmin; // ‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ß‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠ backward compatibility
      }
    } else if (issue.status === 'in_progress') {
      // Send work: in_progress ‚Üí completed
      newStatus = 'completed';
      updateFields.status = newStatus;
      updateFields.completedDate = new Date();
    } else {
      return NextResponse.json(
        { error: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡πÑ‡∏î‡πâ' },
        { status: 400 }
      );
    }

    // Update the issue
    const updatedIssue = await IssueLog.findByIdAndUpdate(
      id,
      updateFields,
      { new: true }
    );

    // ‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
    console.log('üìß Sending email notification for status:', newStatus);
    console.log('üì∏ Issue images:', updatedIssue.images);
    
    try {
      // Populate requester information before sending email
      const emailData = await formatIssueForEmail(updatedIssue);
      
      if (newStatus === 'in_progress') {
        // 2. ‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÅ‡∏à‡πâ‡∏á‡∏ú‡∏π‡πâ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠ IT ‡∏£‡∏±‡∏ö‡∏á‡∏≤‡∏ô
        const { sendJobAcceptedNotification } = await import('@/lib/email');
        const emailResult = await sendJobAcceptedNotification(emailData);
        
        if (emailResult.success) {
          console.log('‚úÖ Job accepted email sent successfully');
        } else {
          console.error('‚ùå Failed to send job accepted email:', emailResult.error);
        }
      } else if (newStatus === 'completed') {
        // 3. ‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÅ‡∏à‡πâ‡∏á‡∏ú‡∏π‡πâ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠ IT ‡∏™‡πà‡∏á‡∏á‡∏≤‡∏ô
        const { sendWorkCompletedNotification } = await import('@/lib/email');
        const emailResult = await sendWorkCompletedNotification(emailData);
        
        if (emailResult.success) {
          console.log('‚úÖ Work completed email sent successfully');
        } else {
          console.error('‚ùå Failed to send work completed email:', emailResult.error);
        }
      }
    } catch (emailError) {
      console.error('Email notification error:', emailError);
      // ‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ email error ‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß
    }

    // Return appropriate message based on status change
    const message = newStatus === 'in_progress' 
      ? '‡∏£‡∏±‡∏ö‡∏á‡∏≤‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß' 
      : '‡∏™‡πà‡∏á‡∏á‡∏≤‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß';

    return NextResponse.json({
      message,
      issue: updatedIssue
    });
  } catch (error) {
    console.error('Error sending work:', error);
    return NextResponse.json(
      { error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏á‡∏≤‡∏ô' },
      { status: 500 }
    );
  }
}
