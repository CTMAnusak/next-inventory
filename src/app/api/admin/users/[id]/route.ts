import { NextRequest, NextResponse } from 'next/server';
import dbConnect from '@/lib/mongodb';
import User from '@/models/User';
import { InventoryItem } from '@/models/InventoryItem';
import ReturnLog from '@/models/ReturnLog';
import { hashPassword } from '@/lib/auth';
import jwt from 'jsonwebtoken';
import { createAutoReturnForUser, checkUserEquipment } from '@/lib/user-deletion-helpers';

// PUT - Update user
export async function PUT(
  request: NextRequest,
  { params }: { params: Promise<{ id: string }> }
) {
  try {
    // Verify admin token
    const token = request.cookies.get('auth-token')?.value;
    if (!token) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
    }

    let decoded;
    try {
      decoded = jwt.verify(token, process.env.JWT_SECRET || 'fallback-secret') as any;
    } catch (error) {
      return NextResponse.json({ error: 'Invalid token' }, { status: 401 });
    }

    // Check if user is admin or it_admin
    if (decoded.userRole !== 'admin' && decoded.userRole !== 'it_admin' && !decoded.isMainAdmin) {
      return NextResponse.json({ error: 'Insufficient permissions' }, { status: 403 });
    }

    await dbConnect();
    
    const body = await request.json();
    const { 
      firstName, lastName, nickname, department, office, phone, email, password, userType, userRole,
      // Fields ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å pending deletion
      pendingDeletion, pendingDeletionReason, pendingDeletionRequestedBy, pendingDeletionRequestedAt
    } = body;
    const { id } = params;

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏≤‡∏£‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å pending deletion ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if (pendingDeletion !== undefined) {
      console.log(`üîÑ Updating pending deletion status for user ${id}: ${pendingDeletion}`);
      
      // ‡∏´‡∏≤ user ‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏≠‡∏≤ user_id
      const userToUpdate = await User.findById(id);
      if (!userToUpdate) {
        return NextResponse.json(
          { error: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï' },
          { status: 404 }
        );
      }

      // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏≤‡∏£‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏•‡∏ö (pendingDeletion = false) ‡πÉ‡∏´‡πâ‡∏•‡∏ö ReturnLog ‡πÄ‡∏Å‡πà‡∏≤
      if (pendingDeletion === false) {
        console.log(`üóëÔ∏è Cancelling deletion - removing pending ReturnLogs for user ${userToUpdate.user_id}`);
        
        const ReturnLog = (await import('@/models/ReturnLog')).default;
        const deleteResult = await ReturnLog.deleteMany({
          userId: userToUpdate.user_id,
          isAutoReturn: true,
          status: 'pending'
        });
        
        console.log(`üóëÔ∏è Deleted ${deleteResult.deletedCount} pending ReturnLogs for user ${userToUpdate.user_id}`);
      }
      
      // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡πÄ‡∏â‡∏û‡∏≤‡∏∞ pending deletion fields
      const updateData = {
        pendingDeletion,
        pendingDeletionReason,
        pendingDeletionRequestedBy,
        pendingDeletionRequestedAt,
        updatedAt: new Date()
      };

      // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏≤‡∏£‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏•‡∏ö ‡πÉ‡∏´‡πâ‡∏•‡∏ö jwtInvalidatedAt ‡∏î‡πâ‡∏ß‡∏¢
      if (pendingDeletion === false) {
        updateData.jwtInvalidatedAt = undefined;
      }

      const updatedUser = await User.findByIdAndUpdate(
        id,
        updateData,
        { new: true }
      ).select('-password');

      if (!updatedUser) {
        return NextResponse.json(
          { error: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï' },
          { status: 404 }
        );
      }

      console.log(`‚úÖ Updated pending deletion status successfully`);
      return NextResponse.json(updatedUser);
    }

    // Validate required fields based on user type (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏Å‡∏ï‡∏¥)
    if (userType === 'individual') {
      if (!firstName || !lastName || !nickname || !department || !office || !phone || !email) {
        return NextResponse.json(
          { error: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô' },
          { status: 400 }
        );
      }
    } else {
      if (!office || !phone || !email) {
        return NextResponse.json(
          { error: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô' },
          { status: 400 }
        );
      }
    }

    // Validate phone number (must be exactly 10 digits)
    if (phone && phone.length !== 10) {
      return NextResponse.json(
        { error: '‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç 10 ‡∏´‡∏•‡∏±‡∏Å‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô' },
        { status: 400 }
      );
    }

    // Validate email format
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    if (!emailRegex.test(email)) {
      return NextResponse.json(
        { error: '‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏•‡πå‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á' },
        { status: 400 }
      );
    }

    // Check if email already exists (excluding current user)
    const existingUser = await User.findOne({ 
      email, 
      _id: { $ne: id } 
    });
    if (existingUser) {
      return NextResponse.json(
        { error: '‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏•‡πå‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏•‡πâ‡∏ß' },
        { status: 400 }
      );
    }

    // Prepare update data
    const updateData: any = {
      firstName: userType === 'individual' ? firstName : undefined,
      lastName: userType === 'individual' ? lastName : undefined,
      nickname: userType === 'individual' ? nickname : undefined,
      department: userType === 'individual' ? department : undefined,
      office,
      phone,
      email,
      userRole: userRole || 'user',
      updatedAt: new Date()
    };

    // Only update password if provided
    if (password && password.trim()) {
      updateData.password = await hashPassword(password);
    }

    const updatedUser = await User.findByIdAndUpdate(
      id,
      updateData,
      { new: true }
    ).select('-password');

    if (!updatedUser) {
      return NextResponse.json(
        { error: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï' },
        { status: 404 }
      );
    }

    return NextResponse.json(updatedUser);
  } catch (error) {
    console.error('Error updating user:', error);
    return NextResponse.json(
      { error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ' },
      { status: 500 }
    );
  }
}

// DELETE - Delete user
export async function DELETE(
  request: NextRequest,
  { params }: { params: Promise<{ id: string }> }
) {
  try {
    // Verify admin token
    const token = request.cookies.get('auth-token')?.value;
    if (!token) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
    }

    let decoded;
    try {
      decoded = jwt.verify(token, process.env.JWT_SECRET || 'fallback-secret') as any;
    } catch (error) {
      return NextResponse.json({ error: 'Invalid token' }, { status: 401 });
    }

    // Check if user is admin or it_admin
    if (decoded.userRole !== 'admin' && decoded.userRole !== 'it_admin' && !decoded.isMainAdmin) {
      return NextResponse.json({ error: 'Insufficient permissions' }, { status: 403 });
    }

    await dbConnect();
    
    const { id } = await params;

    // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ user ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏•‡∏ö
    const userToDelete = await User.findById(id);
    if (!userToDelete) {
      return NextResponse.json(
        { error: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö' },
        { status: 404 }
      );
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏ó‡∏µ‡πà user ‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á
    const userOwnedItems = await InventoryItem.find({
      'currentOwnership.ownerType': 'user_owned',
      'currentOwnership.userId': userToDelete.user_id
    });

    console.log(`üîç Found ${userOwnedItems.length} equipment owned by user: ${userToDelete.user_id}`);

    // ‡∏´‡∏≤‡∏Å‡∏°‡∏µ‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏ó‡∏µ‡πà user ‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á - ‡πÑ‡∏°‡πà‡∏•‡∏ö user ‡πÅ‡∏ï‡πà‡∏ó‡∏≥‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏´‡∏°‡∏≤‡∏¢‡∏£‡∏≠‡∏•‡∏ö
    if (userOwnedItems.length > 0) {
      console.log(`üì¶ User has ${userOwnedItems.length} items, marking for pending deletion instead of deleting`);
      
      // ‡∏à‡∏±‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏ï‡∏≤‡∏°‡∏ä‡∏ô‡∏¥‡∏î
      const itemGroups = new Map();
      for (const item of userOwnedItems) {
        const key = `${item.itemName}-${item.category}`;
        if (!itemGroups.has(key)) {
          itemGroups.set(key, []);
        }
        itemGroups.get(key).push(item);
      }

      // ‡∏™‡∏£‡πâ‡∏≤‡∏á ReturnLog ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
      const returnLogData = {
        userId: userToDelete.user_id, // ‡πÄ‡∏û‡∏¥‡πà‡∏° userId ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á
        firstName: userToDelete.firstName || '‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏•‡∏ö',
        lastName: userToDelete.lastName || '',
        nickname: userToDelete.nickname || '',
        department: userToDelete.department || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏',
        office: userToDelete.office || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏',
        email: userToDelete.email || '',
        phoneNumber: userToDelete.phoneNumber || '',
        returnDate: new Date(),
        items: Array.from(itemGroups.entries()).flatMap(([key, items]) => {
          const firstItem = items[0];
          
          // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ SN ‡∏´‡∏•‡∏≤‡∏¢‡∏ï‡∏±‡∏ß ‡πÉ‡∏´‡πâ‡πÅ‡∏¢‡∏Å‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏¢‡πà‡∏≠‡∏¢
          const itemsWithSN = items.filter(item => item.serialNumber);
          const itemsWithoutSN = items.filter(item => !item.serialNumber);
          
          const result = [];
          
          // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏°‡∏µ SN ‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ï‡∏±‡∏ß
          for (const item of itemsWithSN) {
            result.push({
              itemId: item._id.toString(),
              itemName: item.itemName,
              category: item.category,
              quantity: 1,
              serialNumber: item.serialNumber, // ‡πÉ‡∏ä‡πâ singular
              reason: '‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏Ñ‡∏∑‡∏ô‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ñ‡∏π‡∏Å‡∏•‡∏ö'
            });
          }
          
          // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ SN (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
          if (itemsWithoutSN.length > 0) {
            result.push({
              itemId: firstItem._id.toString(),
              itemName: firstItem.itemName,
              category: firstItem.category,
              quantity: itemsWithoutSN.length,
              reason: '‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏Ñ‡∏∑‡∏ô‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ñ‡∏π‡∏Å‡∏•‡∏ö'
            });
          }
          
          return result;
        }),
        status: 'pending', // ‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥
        isAutoReturn: true, // flag ‡∏û‡∏¥‡πÄ‡∏®‡∏©‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏Ñ‡∏∑‡∏ô‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
        autoReturnReason: `‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ${userToDelete.firstName} ${userToDelete.lastName} (${userToDelete.user_id}) ‡∏ñ‡∏π‡∏Å‡∏£‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏•‡∏ö‡πÇ‡∏î‡∏¢ admin`,
        submittedAt: new Date(),
        notes: `‡∏Å‡∏≤‡∏£‡∏Ñ‡∏∑‡∏ô‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥: ‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ñ‡∏π‡∏Å‡∏£‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏•‡∏ö‡πÇ‡∏î‡∏¢ admin ${decoded.firstName || decoded.user_id} ‡πÄ‡∏°‡∏∑‡πà‡∏≠ ${new Date().toLocaleString('th-TH')}`
      };

      const returnLog = new ReturnLog(returnLogData);
      await returnLog.save();

      // ‡∏ó‡∏≥‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏´‡∏°‡∏≤‡∏¢ user ‡∏ß‡πà‡∏≤‡∏£‡∏≠‡∏•‡∏ö ‡πÅ‡∏ó‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
      userToDelete.pendingDeletion = true;
      userToDelete.pendingDeletionReason = `‡∏°‡∏µ‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå ${userOwnedItems.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Ñ‡∏∑‡∏ô‡∏Å‡πà‡∏≠‡∏ô`;
      userToDelete.pendingDeletionRequestedBy = decoded.userId;
      userToDelete.pendingDeletionRequestedAt = new Date();
      await userToDelete.save();

      // ‡∏™‡πà‡∏á‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡πÉ‡∏´‡πâ user ‡∏£‡∏≠‡∏•‡∏ö logout ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ (‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏≠ 10 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ)
      try {
        await fetch(new URL('/api/admin/force-logout-user', request.url).toString(), {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'Cookie': request.headers.get('Cookie') || ''
          },
          body: JSON.stringify({ userId: userToDelete.user_id })
        });
        console.log(`üö™ Sent immediate force logout signal for user ${userToDelete.user_id}`);
      } catch (logoutError) {
        console.error('Error sending immediate logout signal:', logoutError);
      }

      // ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡πÉ‡∏´‡πâ user login ‡πÉ‡∏´‡∏°‡πà‡πÇ‡∏î‡∏¢‡∏Å‡∏≤‡∏£ invalidate JWT token
      // ‡πÇ‡∏î‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏° field ‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡πÉ‡∏´‡πâ JWT token ‡πÄ‡∏Å‡πà‡∏≤‡πÉ‡∏ä‡πâ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ
      userToDelete.jwtInvalidatedAt = new Date();
      await userToDelete.save();
      console.log(`üîê Added jwtInvalidatedAt to invalidate JWT token for user ${userToDelete.user_id}`);

      console.log(`‚úÖ Created automatic return log: ${returnLog._id}`);
      console.log(`üîÑ User marked for pending deletion instead of immediate deletion`);

      return NextResponse.json({ 
        message: `‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ñ‡∏π‡∏Å‡∏ó‡∏≥‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏´‡∏°‡∏≤‡∏¢‡∏£‡∏≠‡∏•‡∏ö ‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ñ‡∏∑‡∏ô‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥ ${userOwnedItems.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ó‡∏µ‡πà "‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Ñ‡∏∑‡∏ô" ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏Ñ‡∏∑‡∏ô‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå`,
        equipmentCount: userOwnedItems.length,
        hasEquipment: true,
        pendingDeletion: true
      });
    } else {
      // ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå - ‡∏•‡∏ö user ‡πÑ‡∏î‡πâ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
      const deletedUser = await User.findByIdAndDelete(id);
      console.log(`‚úÖ User deleted immediately (no equipment found)`);

      return NextResponse.json({ 
        message: '‡∏•‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß',
        equipmentCount: 0,
        hasEquipment: false,
        pendingDeletion: false
      });
    }
  } catch (error) {
    console.error('Error deleting user:', error);
    return NextResponse.json(
      { error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ' },
      { status: 500 }
    );
  }
}
