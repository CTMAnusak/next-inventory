import { NextRequest, NextResponse } from 'next/server';
import dbConnect from '@/lib/mongodb';
import User from '@/models/User';
import { verifyToken } from '@/lib/auth';
import { snapshotUserBeforeDelete, checkUserRelatedIssues } from '@/lib/snapshot-helpers';

/**
 * DELETE - ‡∏•‡∏ö User ‡∏û‡∏£‡πâ‡∏≠‡∏° Snapshot ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡πÉ‡∏ô IssueLog
 */
export async function DELETE(
  request: NextRequest,
  { params }: { params: Promise<{ id: string }> }
) {
  try {
    // Verify admin token
    const token = request.cookies.get('auth-token')?.value;
    if (!token) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
    }

    let decoded;
    try {
      decoded = verifyToken(token) as any;
    } catch (error) {
      return NextResponse.json({ error: 'Invalid token' }, { status: 401 });
    }

    // Check if user is admin
    if (decoded.userRole !== 'admin' && !decoded.isMainAdmin) {
      return NextResponse.json({ error: 'Insufficient permissions' }, { status: 403 });
    }

    await dbConnect();
    
    const { id } = await params;

    // 1. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ User ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏£‡∏¥‡∏á
    const user = await User.findOne({ user_id: id });
    if (!user) {
      return NextResponse.json(
        { error: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö' },
        { status: 404 }
      );
    }

    // 2. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡πÉ‡∏ô IssueLog ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    const relatedIssues = await checkUserRelatedIssues(id);
    
    console.log(`üìä User ${id} has ${relatedIssues.total} related issues`);
    console.log(`   - As Requester: ${relatedIssues.asRequester}`);
    console.log(`   - As Admin: ${relatedIssues.asAdmin}`);

    // 3. Snapshot ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏Å‡πà‡∏≠‡∏ô‡∏•‡∏ö (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á)
    if (relatedIssues.hasRelatedIssues) {
      console.log(`üì∏ Creating snapshots for user ${id}...`);
      
      const snapshotResults = await snapshotUserBeforeDelete(id);
      
      console.log(`‚úÖ Snapshot completed:`);
      console.log(`   - Requester: ${snapshotResults.requester.modifiedCount} issues`);
      console.log(`   - Admin: ${snapshotResults.admin.modifiedCount} issues`);
    } else {
      console.log(`‚ÑπÔ∏è No related issues found, skipping snapshot`);
    }

    // 4. ‡∏•‡∏ö User
    await User.deleteOne({ user_id: id });
    
    console.log(`‚úÖ User ${id} deleted successfully`);

    return NextResponse.json({
      message: '‡∏•‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß',
      userId: id,
      relatedIssues: relatedIssues.total,
      snapshot: relatedIssues.hasRelatedIssues ? {
        requester: relatedIssues.asRequester,
        admin: relatedIssues.asAdmin
      } : null
    });

  } catch (error) {
    console.error('Error deleting user with snapshot:', error);
    return NextResponse.json(
      { error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ' },
      { status: 500 }
    );
  }
}

