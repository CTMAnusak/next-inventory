import { NextRequest, NextResponse } from 'next/server';
import dbConnect from '@/lib/mongodb';
import InventoryMaster from '@/models/InventoryMaster';
import InventoryItem from '@/models/InventoryItem';
import User from '@/models/User';
import { verifyToken } from '@/lib/auth';
import { getAdminStockInfo, updateInventoryMaster, syncAdminStockItems } from '@/lib/inventory-helpers';
import { clearAllCaches } from '@/lib/cache-utils';

// GET - ‡∏î‡∏π‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ stock ‡∏Ç‡∏≠‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡πâ‡∏ô‡πÜ
export async function GET(request: NextRequest) {
  try {
    await dbConnect();
    
    // Get user info from token
    const token = request.cookies.get('auth-token')?.value;
    const payload: any = token ? verifyToken(token) : null;
    
    if (!payload) {
      return NextResponse.json(
        { error: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö' },
        { status: 401 }
      );
    }

    // Check if user is admin
    const currentUser = await User.findOne({ user_id: payload.userId });
    if (!currentUser || !['admin', 'it_admin'].includes(currentUser.userRole)) {
      return NextResponse.json(
        { error: '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á' },
        { status: 403 }
      );
    }

    const { searchParams } = new URL(request.url);
    const itemName = searchParams.get('itemName');
    const category = searchParams.get('category');


    if (!itemName || !category) {
      console.error('‚ùå Missing itemName or category parameters');
      return NextResponse.json(
        { error: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏ itemName ‡πÅ‡∏•‡∏∞ category' },
        { status: 400 }
      );
    }

    // Debug: Check if item exists in database
    const debugItem = await InventoryMaster.findOne({ itemName, categoryId: category });
    if (debugItem) {
      console.log('üîç Found item in InventoryMaster:', {
        itemName: debugItem.itemName,
        categoryId: debugItem.categoryId,
        totalQuantity: debugItem.totalQuantity
      });
    }

    // Use getAdminStockInfo which includes auto-detection logic
    try {
      const stockData = await getAdminStockInfo(itemName, category);
      
      // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• breakdown ‡∏à‡∏£‡∏¥‡∏á‡∏à‡∏≤‡∏Å breakdown API
      const breakdownResponse = await fetch(`${process.env.NEXT_PUBLIC_BASE_URL || 'http://localhost:3000'}/api/admin/inventory/breakdown?itemName=${encodeURIComponent(itemName)}&categoryId=${encodeURIComponent(category)}`, {
        method: 'GET',
        headers: {
          'Cookie': request.headers.get('cookie') || ''
        }
      });
      
      let realBreakdown = {
        statusBreakdown: {},
        conditionBreakdown: {},
        typeBreakdown: { withoutSN: 0, withSN: 0, withPhone: 0 },
        adminStatusBreakdown: {},
        userStatusBreakdown: {},
        adminConditionBreakdown: {},
        userConditionBreakdown: {},
        adminTypeBreakdown: { withoutSN: 0, withSN: 0, withPhone: 0 },
        userTypeBreakdown: { withoutSN: 0, withSN: 0, withPhone: 0 }
      } as any;
      
      if (breakdownResponse.ok) {
        realBreakdown = await breakdownResponse.json();
      } else {
        console.log('‚ö†Ô∏è Failed to fetch breakdown data, using defaults');
      }
      
      // ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å realBreakdown ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á (‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏õ‡∏•‡∏á)
      const statusBreakdown = realBreakdown.statusBreakdown || {};
      const conditionBreakdown = realBreakdown.conditionBreakdown || {};
      
      
      // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• breakdown ‡∏ó‡∏µ‡πà‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô - ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÅ‡∏õ‡∏•‡∏á‡πÅ‡∏•‡πâ‡∏ß
      const enhancedStockData = {
        ...stockData,
        statusBreakdown: statusBreakdown,
        conditionBreakdown: conditionBreakdown,
        typeBreakdown: realBreakdown.typeBreakdown || {
          withoutSN: 0,
          withSN: 0,
          withPhone: 0
        },
        // pass through owner-specific breakdowns
        adminStatusBreakdown: (realBreakdown as any).adminStatusBreakdown || {},
        userStatusBreakdown: (realBreakdown as any).userStatusBreakdown || {},
        adminConditionBreakdown: (realBreakdown as any).adminConditionBreakdown || {},
        userConditionBreakdown: (realBreakdown as any).userConditionBreakdown || {},
        adminTypeBreakdown: (realBreakdown as any).adminTypeBreakdown || { withoutSN: 0, withSN: 0, withPhone: 0 },
        userTypeBreakdown: (realBreakdown as any).userTypeBreakdown || { withoutSN: 0, withSN: 0, withPhone: 0 },
        // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• breakdown ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ SN
        nonSNStatusBreakdown: realBreakdown.nonSNStatusBreakdown || {},
        nonSNConditionBreakdown: realBreakdown.nonSNConditionBreakdown || {},
        // üÜï FIXED: ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á
        totalQuantity: realBreakdown.totalQuantity
      };
      
      console.log('üìä Enhanced stock data prepared:', {
        itemName: enhancedStockData.itemName,
        category: enhancedStockData.category,
        adminDefinedStock: enhancedStockData.stockManagement?.adminDefinedStock,
        userContributedCount: enhancedStockData.stockManagement?.userContributedCount,
        currentlyAllocated: enhancedStockData.stockManagement?.currentlyAllocated,
        realAvailable: enhancedStockData.stockManagement?.realAvailable,
        totalQuantity: enhancedStockData.currentStats?.totalQuantity,
        hasOperations: enhancedStockData.adminStockOperations?.length > 0,
        hasStatusBreakdown: !!enhancedStockData.statusBreakdown,
        hasConditionBreakdown: !!enhancedStockData.conditionBreakdown,
        hasTypeBreakdown: !!enhancedStockData.typeBreakdown
      });
      
      return NextResponse.json(enhancedStockData);
      
    } catch (stockError) {
      console.error('‚ùå Error in getAdminStockInfo:', stockError);
      
      // Fallback: try to get basic data from InventoryMaster
      const item = await InventoryMaster.findOne({ itemName, categoryId: category });
      
      if (!item) {
        console.error('‚ùå Item not found in InventoryMaster');
        return NextResponse.json(
          { error: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏î‡∏±‡∏á‡∏Å‡∏•‡πà‡∏≤‡∏ß' },
          { status: 404 }
        );
      }

      console.log('üì¶ Using fallback stock data:', {
        itemName: item.itemName,
        totalQuantity: item.totalQuantity,
        stockManagement: item.stockManagement
      });

      return NextResponse.json({
        itemName: item.itemName,
        category: item.categoryId,
        stockManagement: item.stockManagement || {
          adminDefinedStock: 0,
          userContributedCount: 0,
          currentlyAllocated: 0,
          realAvailable: 0
        },
        adminStockOperations: item.adminStockOperations || [],
        currentStats: {
          totalQuantity: item.totalQuantity,
          availableQuantity: item.availableQuantity,
          userOwnedQuantity: item.userOwnedQuantity
        }
      });
    }

  } catch (error) {
    console.error('Error fetching stock management data:', error);
    return NextResponse.json(
      { error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•' },
      { status: 500 }
    );
  }
}

// POST - ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡∏õ‡∏£‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô admin stock
export async function POST(request: NextRequest) {
  clearAllCaches(); // üÜï FIXED: ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡πÅ‡∏Ñ‡∏ä‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏ï‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏™‡∏î‡πÉ‡∏´‡∏°‡πà

  try {
    await dbConnect();
    
    // Get user info from token
    const token = request.cookies.get('auth-token')?.value;
    const payload: any = token ? verifyToken(token) : null;
    
    if (!payload) {
      return NextResponse.json(
        { error: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö' },
        { status: 401 }
      );
    }

    // Check if user is admin
    const currentUser = await User.findOne({ user_id: payload.userId });
    if (!currentUser || !['admin', 'it_admin'].includes(currentUser.userRole)) {
      return NextResponse.json(
        { error: '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á' },
        { status: 403 }
      );
    }

    const body = await request.json();
    const { itemId, itemName, category, operationType, value, reason, newStatusId, newConditionId, changeQuantity, statusChangeQuantity, conditionChangeQuantity, currentStatusId, currentConditionId } = body;

    console.log('üîß Stock operation request:', {
      itemName,
      category,
      operationType,
      value,
      reason,
      newStatusId,
      newConditionId,
      changeQuantity,
      statusChangeQuantity,
      conditionChangeQuantity,
      currentStatusId,
      currentConditionId,
      adminId: currentUser.user_id,
      adminName: `${currentUser.firstName} ${currentUser.lastName}`
    });

    // Validate required fields
    if (!itemName || !category || !operationType || !reason) {
      console.error('‚ùå Missing required fields:', { itemName, category, operationType, reason });
      return NextResponse.json(
        { error: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô' },
        { status: 400 }
      );
    }
    
    // For adjust_stock operation, value is required and cannot be 0
    if (operationType === 'adjust_stock') {
      if (value === undefined) {
        console.error('‚ùå Missing value for adjust_stock operation');
        return NextResponse.json(
          { error: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö' },
          { status: 400 }
        );
      }
      if (value === 0) {
        console.error('‚ùå Cannot adjust stock to 0');
        return NextResponse.json(
          { error: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏õ‡∏£‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏õ‡πá‡∏ô 0 ‡πÑ‡∏î‡πâ (‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏Å‡∏≤‡∏£‡∏•‡∏ö)' },
          { status: 400 }
        );
      }
    }
    
    // For change_status_condition operation, at least one change field is required
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ newStatusId, newConditionId ‡πÑ‡∏°‡πà‡πÄ‡∏õ‡πá‡∏ô undefined ‡∏´‡∏£‡∏∑‡∏≠ empty string
    const hasValidStatusChange = newStatusId && newStatusId.trim() !== '';
    const hasValidConditionChange = newConditionId && newConditionId.trim() !== '';
    
    if (operationType === 'change_status_condition' && !hasValidStatusChange && !hasValidConditionChange) {
      console.error('‚ùå No valid changes specified for change_status_condition operation');
      return NextResponse.json(
        { error: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢‡∏´‡∏ô‡∏∂‡πà‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô' },
        { status: 400 }
      );
    }

    if (!['set_stock', 'adjust_stock', 'change_status_condition'].includes(operationType)) {
      return NextResponse.json(
        { error: 'operationType ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô set_stock, adjust_stock ‡∏´‡∏£‡∏∑‡∏≠ change_status_condition' },
        { status: 400 }
      );
    }

    const adminId = currentUser.user_id;
    const adminName = `${currentUser.firstName} ${currentUser.lastName}`;

    let updatedItem;

    try {
      if (operationType === 'set_stock') {
        if (value < 0) {
          console.error('‚ùå Invalid value for set_stock:', value);
          return NextResponse.json(
            { error: '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô stock ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ö‡∏ß‡∏Å' },
            { status: 400 }
          );
        }
        updatedItem = await InventoryMaster.setAdminStock(itemName, category, value, reason, adminId, adminName);
      } else if (operationType === 'adjust_stock') {
        // üÜï FIXED: For UI "adjust_stock", the value is actually the NEW ABSOLUTE VALUE, not adjustment
        // We need to calculate the actual adjustment amount
        
        // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• breakdown ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏≤ adjustableCount
        const breakdownResponse = await fetch(`${process.env.NEXT_PUBLIC_BASE_URL || 'http://localhost:3000'}/api/admin/inventory/breakdown?itemName=${encodeURIComponent(itemName)}&categoryId=${encodeURIComponent(category)}`, {
          method: 'GET',
          headers: {
            'Cookie': request.headers.get('cookie') || ''
          }
        });
        
        let realBreakdown = { adjustableCount: 0 };
        if (breakdownResponse.ok) {
          realBreakdown = await breakdownResponse.json();
        }
        
        const currentAdjustableCount = realBreakdown.adjustableCount || 0;

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ value ‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏°‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏ï‡πá‡∏°‡∏ö‡∏ß‡∏Å ‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏±‡∏ö‡πÑ‡∏î‡πâ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏´‡∏≤‡∏Å‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏î
        if (value < 0) {
          return NextResponse.json(
            { error: '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡∏ï‡∏¥‡∏î‡∏•‡∏ö' },
            { status: 400 }
          );
        }

        // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì actualAdjustment ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ adjustableCount
        const actualAdjustment = value - currentAdjustableCount;
        
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡∏•‡∏î‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô‡∏Å‡∏ß‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏°‡∏µ
        if (actualAdjustment < 0 && Math.abs(actualAdjustment) > currentAdjustableCount) {
          return NextResponse.json(
            { error: `‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏î‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÑ‡∏î‡πâ ‡∏°‡∏µ‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏ó‡∏µ‡πà‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ \"‡∏°‡∏µ\" ‡πÅ‡∏•‡∏∞‡∏™‡∏†‡∏≤‡∏û \"‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ\" ‡πÄ‡∏û‡∏µ‡∏¢‡∏á ${currentAdjustableCount} ‡∏ä‡∏¥‡πâ‡∏ô ‡πÅ‡∏ï‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏î ${Math.abs(actualAdjustment)} ‡∏ä‡∏¥‡πâ‡∏ô` },
            { status: 400 }
          );
        }

        // Update InventoryMaster.adminDefinedStock (‡∏ã‡∏∂‡πà‡∏á‡πÄ‡∏õ‡πá‡∏ô total stock)
        // ‡πÄ‡∏£‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì targetAdminStock ‡∏ó‡∏µ‡πà‡∏£‡∏ß‡∏° SN ‡∏î‡πâ‡∏ß‡∏¢
        const currentItem = await InventoryMaster.findOne({ itemName, categoryId: category });
        const currentTotalAdminStock = currentItem?.stockManagement?.adminDefinedStock || 0;
        const currentSNCount = (await InventoryItem.countDocuments({
          itemName, 
          categoryId: category, 
          'currentOwnership.ownerType': 'admin_stock',
          deletedAt: { $exists: false },
          $or: [
            { serialNumber: { $exists: true, $ne: '' } },
            { numberPhone: { $exists: true, $ne: '' } }
          ]
        })) || 0;
        
        // üÜï CRITICAL: ‡∏ï‡πâ‡∏≠‡∏á‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏Ñ‡∏ß‡∏£‡∏ñ‡∏π‡∏Å‡πÅ‡∏ï‡∏∞‡∏ï‡πâ‡∏≠‡∏á‡∏î‡πâ‡∏ß‡∏¢!
        const currentNonAdjustableNonSNCount = (await InventoryItem.countDocuments({
          itemName, 
          categoryId: category, 
          'currentOwnership.ownerType': 'admin_stock',
          deletedAt: { $exists: false },
          $and: [
            { $or: [{ serialNumber: { $exists: false } }, { serialNumber: '' }] },
            { $or: [{ numberPhone: { $exists: false } }, { numberPhone: '' }] }
          ],
          $or: [
            { statusId: { $ne: 'status_available' } }, // ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ "‡∏°‡∏µ"
            { conditionId: { $ne: 'cond_working' } }   // ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏™‡∏†‡∏≤‡∏û "‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ"
          ]
        })) || 0;
        
        console.log(`  - Current SN count: ${currentSNCount}`);
        console.log(`  - Current adjustable count (non-SN available+working): ${currentAdjustableCount}`);
        console.log(`  - Current non-adjustable non-SN count (missing/damaged): ${currentNonAdjustableNonSNCount}`);
        console.log(`  - Target non-SN available+working: ${value}`);
        
        // üÜï CRITICAL: ‡∏£‡∏ß‡∏°‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏Ñ‡∏ß‡∏£‡∏ñ‡∏π‡∏Å‡πÅ‡∏ï‡∏∞‡∏ï‡πâ‡∏≠‡∏á‡∏î‡πâ‡∏ß‡∏¢!
        const targetNonSNCount = value; // value ‡∏Ñ‡∏∑‡∏≠‡∏à‡∏≥‡∏ô‡∏ß‡∏ô non-SN ‡∏ó‡∏µ‡πà‡∏°‡∏µ+‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
        const targetAdminStock = targetNonSNCount + currentSNCount + currentNonAdjustableNonSNCount; // ‡∏£‡∏ß‡∏°‡∏ó‡∏∏‡∏Å‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏Ñ‡∏ß‡∏£‡∏°‡∏µ

        console.log(`  Debug: targetNonSNCount = ${targetNonSNCount}, currentSNCount = ${currentSNCount}, currentNonAdjustableNonSNCount = ${currentNonAdjustableNonSNCount}`);
        updatedItem = await InventoryMaster.adjustAdminStock(itemName, category, targetAdminStock - currentTotalAdminStock, reason, adminId, adminName);
        
        // üÜï CRITICAL: Sync InventoryItems after adjusting InventoryMaster
        await syncAdminStockItems(
          itemName,
          category,
          targetAdminStock, // üÜï FIXED: ‡∏™‡πà‡∏á targetAdminStock ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÑ‡∏õ‡πÉ‡∏´‡πâ syncAdminStockItems
          reason,
          adminId,
          undefined, // ‡πÑ‡∏°‡πà‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà
          undefined, // üîß CRITICAL FIX: ‡πÑ‡∏°‡πà‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô)
          undefined  // üîß CRITICAL FIX: ‡πÑ‡∏°‡πà‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏†‡∏≤‡∏û‡∏Ç‡∏≠‡∏á‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô)
        );
        clearAllCaches(); // üÜï FIXED: ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡πÅ‡∏Ñ‡∏ä‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï inventory item ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß

      } else if (operationType === 'change_status_condition') {
        // For change_status_condition, we ONLY change status/condition, NOT quantity
        console.log('üîÅ Status/Condition change:', {
          newStatusId: hasValidStatusChange ? newStatusId : 'no change',
          newConditionId: hasValidConditionChange ? newConditionId : 'no change'
        });
        
        // Find the item first using itemName and categoryId
        const currentItem = await InventoryMaster.findOne({ itemName, categoryId: category });
        if (!currentItem) {
          console.error(`‚ùå Item not found: ${itemName} in category ${category}`);
          return NextResponse.json(
            { error: `‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ ${itemName} ‡πÉ‡∏ô‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà ${category}` },
            { status: 404 }
          );
        }
        
        // For status/condition change, keep the current quantity - NO adjustment
        updatedItem = currentItem;
      }
      
      console.log('üì¶ Updated admin stock summary:', {
        itemName: updatedItem.itemName,
        operationType,
        newAdminStock: updatedItem.stockManagement?.adminDefinedStock,
        lastOperation: updatedItem.adminStockOperations[updatedItem.adminStockOperations.length - 1]
      });

      // üÜï CRITICAL: Sync actual InventoryItem records to match new admin stock
      const newAdminStock = updatedItem.stockManagement.adminDefinedStock;
      
      try {
        if (operationType === 'change_status_condition') {
          // For change_status_condition, update status/condition of specific non-SN items
          
          let updatedItemsCount = 0;
          
          // Handle status change with priority linking
          if (hasValidStatusChange && statusChangeQuantity > 0 && currentStatusId) {
            
            try {
              const { changeNonSNItemStatusWithPriority } = await import('@/lib/inventory-helpers');
              const result = await changeNonSNItemStatusWithPriority(
                updatedItem.itemName,
                updatedItem.categoryId,
                newStatusId,        // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
                undefined,          // ‡πÑ‡∏°‡πà‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏†‡∏≤‡∏û
                currentStatusId,    // ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
                undefined,          // ‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏™‡∏†‡∏≤‡∏û‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
                statusChangeQuantity,
                payload.userId,
                reason
              );
              updatedItemsCount += result.updatedCount;
            } catch (error) {
              console.error(`‚ùå Status change with priority failed:`, error);
              throw error;
            }
          }
          
          // Handle condition change with priority linking
          if (hasValidConditionChange && conditionChangeQuantity > 0 && currentConditionId) {
            
            try {
              const { changeNonSNItemStatusWithPriority } = await import('@/lib/inventory-helpers');
              const result = await changeNonSNItemStatusWithPriority(
                updatedItem.itemName,
                updatedItem.categoryId,
                undefined,          // ‡πÑ‡∏°‡πà‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
                newConditionId,     // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏†‡∏≤‡∏û
                undefined,          // ‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
                currentConditionId, // ‡∏™‡∏†‡∏≤‡∏û‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
                conditionChangeQuantity,
                payload.userId,
                reason
              );
              updatedItemsCount += result.updatedCount;
            } catch (error) {
              console.error(`‚ùå Condition change with priority failed:`, error);
              throw error;
            }
          }
          
          if (updatedItemsCount === 0) {
            return NextResponse.json(
              { error: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏ï‡∏≤‡∏°‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏' },
              { status: 400 }
            );
          }
          
 
            // üÜï CRITICAL: Update InventoryMaster and clear caches immediately after changing status/condition
            await updateInventoryMaster(itemName, category); // ‡πÉ‡∏ä‡πâ itemName, category ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏à‡∏≤‡∏Å request
            clearAllCaches();
            
          } else {
          // For other operations, sync normally
          await syncAdminStockItems(
            updatedItem.itemName, 
            updatedItem.categoryId, 
            newAdminStock, 
            reason, 
            adminId, 
            undefined, // ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà 
            hasValidStatusChange ? newStatusId : undefined, 
            hasValidConditionChange ? newConditionId : undefined
          );
        }
      } catch (syncError) {
        console.error('‚ùå Stock sync failed:', syncError);
        
        // üÜï ENHANCED: Check if it's our specific validation error
        if (syncError instanceof Error && syncError.message.includes('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏î‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÑ‡∏î‡πâ')) {
          return NextResponse.json(
            { 
              error: syncError.message,
              errorType: 'CANNOT_REDUCE_WITH_SERIAL_NUMBERS',
              suggestion: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡πà‡∏ô "‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£" ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏°‡∏µ Serial Number ‡πÅ‡∏ö‡∏ö Manual'
            },
            { status: 400 }
          );
        }
        
        // Re-throw other errors
        throw syncError;
      }
      
      // Update InventoryMaster to reflect the synced items
      const finalCategoryId = updatedItem.categoryId; // ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà
      
      try {
        await updateInventoryMaster(updatedItem.itemName, finalCategoryId);
      } catch (updateError) {
        console.error('‚ùå Error updating InventoryMaster:', updateError);
        
        // ‡∏´‡∏≤‡∏Å‡πÄ‡∏Å‡∏¥‡∏î duplicate key error ‡πÉ‡∏´‡πâ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏£‡∏∞‡∏°‡∏±‡∏î‡∏£‡∏∞‡∏ß‡∏±‡∏á
        if (updateError instanceof Error && updateError.message.includes('E11000')) {
          
          // ‡∏´‡∏≤ InventoryMaster ‡∏ó‡∏µ‡πà‡∏ã‡πâ‡∏≥‡∏Å‡∏±‡∏ô
          const duplicateMasters = await InventoryMaster.find({ 
            itemName: updatedItem.itemName, 
            categoryId: finalCategoryId 
          });
          
          
          if (duplicateMasters.length > 1) {
            // ‡∏•‡∏ö master ‡πÄ‡∏Å‡πà‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏¢‡∏Å‡πÄ‡∏ß‡πâ‡∏ô‡∏ï‡∏±‡∏ß‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
            const mastersToDelete = duplicateMasters.slice(0, -1);
            for (const master of mastersToDelete) {
              // üÜï Snapshot ‡∏Å‡πà‡∏≠‡∏ô‡∏•‡∏ö duplicate InventoryMaster
              try {
                const { snapshotItemNameBeforeDelete } = await import('@/lib/equipment-snapshot-helpers');
                await snapshotItemNameBeforeDelete(master._id.toString());
              } catch (error) {
                console.warn('Failed to snapshot before deleting duplicate InventoryMaster:', error);
              }
              
              await InventoryMaster.findByIdAndDelete(master._id);
            }
          }
          
          // ‡∏•‡∏ö master ‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà
          // üÜï Snapshot ‡∏Å‡πà‡∏≠‡∏ô‡∏•‡∏ö masters ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
          const mastersToDeleteAll = await InventoryMaster.find({ 
            itemName: updatedItem.itemName, 
            categoryId: finalCategoryId 
          });
          
          for (const master of mastersToDeleteAll) {
            try {
              const { snapshotItemNameBeforeDelete } = await import('@/lib/equipment-snapshot-helpers');
              await snapshotItemNameBeforeDelete(master._id.toString());
            } catch (error) {
              console.warn('Failed to snapshot before deleting InventoryMaster:', error);
            }
          }
          
          await InventoryMaster.deleteMany({ 
            itemName: updatedItem.itemName, 
            categoryId: finalCategoryId 
          });
          
          await updateInventoryMaster(updatedItem.itemName, finalCategoryId);
        } else {
          throw updateError;
        }
      }
      
      // Clear all caches to ensure fresh data in UI
      clearAllCaches();

      return NextResponse.json({
        message: `${operationType === 'set_stock' ? '‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤' : '‡∏õ‡∏£‡∏±‡∏ö'}‡∏à‡∏≥‡∏ô‡∏ß‡∏ô stock ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß`,
        item: {
          itemName: updatedItem.itemName,
          category: updatedItem.category,
          stockManagement: updatedItem.stockManagement,
          lastOperation: updatedItem.adminStockOperations[updatedItem.adminStockOperations.length - 1]
        }
      });
    } catch (stockError) {
      console.error('‚ùå Error in stock operation:', stockError);
      return NextResponse.json(
        { error: stockError instanceof Error ? stockError.message : '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ stock' },
        { status: 500 }
      );
    }

  } catch (error) {
    console.error('Error managing admin stock:', error);
    return NextResponse.json(
      { error: error instanceof Error ? error.message : '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ stock' },
      { status: 500 }
    );
  }
}
