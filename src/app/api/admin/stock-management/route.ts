import { NextRequest, NextResponse } from 'next/server';
import dbConnect from '@/lib/mongodb';
import InventoryMaster from '@/models/InventoryMaster';
import InventoryItem from '@/models/InventoryItem';
import User from '@/models/User';
import { verifyToken } from '@/lib/auth';
import { getAdminStockInfo, updateInventoryMaster, syncAdminStockItems } from '@/lib/inventory-helpers';
import { clearAllCaches } from '@/lib/cache-utils';

// GET - ‡∏î‡∏π‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ stock ‡∏Ç‡∏≠‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡πâ‡∏ô‡πÜ
export async function GET(request: NextRequest) {
  try {
    await dbConnect();
    
    // Get user info from token
    const token = request.cookies.get('auth-token')?.value;
    const payload: any = token ? verifyToken(token) : null;
    
    if (!payload) {
      return NextResponse.json(
        { error: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö' },
        { status: 401 }
      );
    }

    // Check if user is admin
    const currentUser = await User.findOne({ user_id: payload.userId });
    if (!currentUser || !['admin', 'it_admin'].includes(currentUser.userRole)) {
      return NextResponse.json(
        { error: '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á' },
        { status: 403 }
      );
    }

    const { searchParams } = new URL(request.url);
    const itemName = searchParams.get('itemName');
    const category = searchParams.get('category');

    console.log(`üîç Stock Management API GET - Fetching data for: ${itemName} (${category})`);

    if (!itemName || !category) {
      console.error('‚ùå Missing itemName or category parameters');
      return NextResponse.json(
        { error: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏ itemName ‡πÅ‡∏•‡∏∞ category' },
        { status: 400 }
      );
    }

    // Debug: Check if item exists in database
    console.log(`üîç Debug: Checking if item exists in database...`);
    const debugItem = await InventoryMaster.findOne({ itemName, categoryId: category });
    console.log(`üîç Debug: Found item:`, debugItem ? 'YES' : 'NO');
    if (debugItem) {
      console.log(`üîç Debug: Item details:`, {
        itemName: debugItem.itemName,
        categoryId: debugItem.categoryId,
        totalQuantity: debugItem.totalQuantity
      });
    }

    // Use getAdminStockInfo which includes auto-detection logic
    console.log('üìä Calling getAdminStockInfo with auto-detection...');
    try {
      const stockData = await getAdminStockInfo(itemName, category);
      
      // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• breakdown ‡∏à‡∏£‡∏¥‡∏á‡∏à‡∏≤‡∏Å breakdown API
      console.log('üìä Fetching real breakdown data...');
      const breakdownResponse = await fetch(`${process.env.NEXT_PUBLIC_BASE_URL || 'http://localhost:3000'}/api/admin/inventory/breakdown?itemName=${encodeURIComponent(itemName)}&categoryId=${encodeURIComponent(category)}`, {
        method: 'GET',
        headers: {
          'Cookie': request.headers.get('cookie') || ''
        }
      });
      
      let realBreakdown = {
        statusBreakdown: {},
        conditionBreakdown: {},
        typeBreakdown: { withoutSN: 0, withSN: 0, withPhone: 0 }
      };
      
      if (breakdownResponse.ok) {
        realBreakdown = await breakdownResponse.json();
        console.log('‚úÖ Real breakdown data fetched:', realBreakdown);
      } else {
        console.log('‚ö†Ô∏è Failed to fetch breakdown data, using defaults');
      }
      
      // ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å realBreakdown ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á (‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏õ‡∏•‡∏á)
      const statusBreakdown = realBreakdown.statusBreakdown || {};
      const conditionBreakdown = realBreakdown.conditionBreakdown || {};
      
      
      // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• breakdown ‡∏ó‡∏µ‡πà‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô - ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÅ‡∏õ‡∏•‡∏á‡πÅ‡∏•‡πâ‡∏ß
      const enhancedStockData = {
        ...stockData,
        statusBreakdown: statusBreakdown,
        conditionBreakdown: conditionBreakdown,
        typeBreakdown: realBreakdown.typeBreakdown || {
          withoutSN: 0,
          withSN: 0,
          withPhone: 0
        }
      };
      
      console.log('üìã Enhanced stock data retrieved:', {
        itemName: enhancedStockData.itemName,
        category: enhancedStockData.category,
        adminDefinedStock: enhancedStockData.stockManagement?.adminDefinedStock,
        userContributedCount: enhancedStockData.stockManagement?.userContributedCount,
        currentlyAllocated: enhancedStockData.stockManagement?.currentlyAllocated,
        realAvailable: enhancedStockData.stockManagement?.realAvailable,
        totalQuantity: enhancedStockData.currentStats?.totalQuantity,
        hasOperations: enhancedStockData.adminStockOperations?.length > 0,
        hasStatusBreakdown: !!enhancedStockData.statusBreakdown,
        hasConditionBreakdown: !!enhancedStockData.conditionBreakdown,
        hasTypeBreakdown: !!enhancedStockData.typeBreakdown
      });
      
      return NextResponse.json(enhancedStockData);
      
    } catch (stockError) {
      console.error('‚ùå Error in getAdminStockInfo:', stockError);
      
      // Fallback: try to get basic data from InventoryMaster
      console.log('üîÑ Fallback: trying basic InventoryMaster lookup...');
      const item = await InventoryMaster.findOne({ itemName, categoryId: category });
      
      if (!item) {
        console.error('‚ùå Item not found in InventoryMaster');
        return NextResponse.json(
          { error: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏î‡∏±‡∏á‡∏Å‡∏•‡πà‡∏≤‡∏ß' },
          { status: 404 }
        );
      }

      console.log('üìã Fallback data retrieved:', {
        itemName: item.itemName,
        totalQuantity: item.totalQuantity,
        stockManagement: item.stockManagement
      });

      return NextResponse.json({
        itemName: item.itemName,
        category: item.categoryId,
        stockManagement: item.stockManagement || {
          adminDefinedStock: 0,
          userContributedCount: 0,
          currentlyAllocated: 0,
          realAvailable: 0
        },
        adminStockOperations: item.adminStockOperations || [],
        currentStats: {
          totalQuantity: item.totalQuantity,
          availableQuantity: item.availableQuantity,
          userOwnedQuantity: item.userOwnedQuantity
        }
      });
    }

  } catch (error) {
    console.error('Error fetching stock management data:', error);
    return NextResponse.json(
      { error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•' },
      { status: 500 }
    );
  }
}

// POST - ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡∏õ‡∏£‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô admin stock
export async function POST(request: NextRequest) {
  try {
    await dbConnect();
    
    // Get user info from token
    const token = request.cookies.get('auth-token')?.value;
    const payload: any = token ? verifyToken(token) : null;
    
    if (!payload) {
      return NextResponse.json(
        { error: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö' },
        { status: 401 }
      );
    }

    // Check if user is admin
    const currentUser = await User.findOne({ user_id: payload.userId });
    if (!currentUser || !['admin', 'it_admin'].includes(currentUser.userRole)) {
      return NextResponse.json(
        { error: '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á' },
        { status: 403 }
      );
    }

    const body = await request.json();
    const { itemId, itemName, category, operationType, value, reason, newStatusId, newConditionId } = body;

    console.log(`üìù Stock Management API POST - Received data:`, {
      itemName,
      category,
      operationType,
      value,
      reason,
      newStatusId,
      newConditionId,
      adminId: currentUser.user_id,
      adminName: `${currentUser.firstName} ${currentUser.lastName}`
    });

    // Validate required fields
    if (!itemName || !category || !operationType || !reason) {
      console.error('‚ùå Missing required fields:', { itemName, category, operationType, reason });
      return NextResponse.json(
        { error: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô' },
        { status: 400 }
      );
    }
    
    // For adjust_stock operation, value is required and cannot be 0
    if (operationType === 'adjust_stock') {
      if (value === undefined) {
        console.error('‚ùå Missing value for adjust_stock operation');
        return NextResponse.json(
          { error: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö' },
          { status: 400 }
        );
      }
      if (value === 0) {
        console.error('‚ùå Cannot adjust stock to 0');
        return NextResponse.json(
          { error: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏õ‡∏£‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏õ‡πá‡∏ô 0 ‡πÑ‡∏î‡πâ (‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏Å‡∏≤‡∏£‡∏•‡∏ö)' },
          { status: 400 }
        );
      }
    }
    
    // For change_status_condition operation, at least one change field is required
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ newStatusId, newConditionId ‡πÑ‡∏°‡πà‡πÄ‡∏õ‡πá‡∏ô undefined ‡∏´‡∏£‡∏∑‡∏≠ empty string
    const hasValidStatusChange = newStatusId && newStatusId.trim() !== '';
    const hasValidConditionChange = newConditionId && newConditionId.trim() !== '';
    
    if (operationType === 'change_status_condition' && !hasValidStatusChange && !hasValidConditionChange) {
      console.error('‚ùå No valid changes specified for change_status_condition operation');
      return NextResponse.json(
        { error: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢‡∏´‡∏ô‡∏∂‡πà‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô' },
        { status: 400 }
      );
    }

    if (!['set_stock', 'adjust_stock', 'change_status_condition'].includes(operationType)) {
      return NextResponse.json(
        { error: 'operationType ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô set_stock, adjust_stock ‡∏´‡∏£‡∏∑‡∏≠ change_status_condition' },
        { status: 400 }
      );
    }

    const adminId = currentUser.user_id;
    const adminName = `${currentUser.firstName} ${currentUser.lastName}`;

    let updatedItem;

    try {
      if (operationType === 'set_stock') {
        if (value < 0) {
          console.error('‚ùå Invalid value for set_stock:', value);
          return NextResponse.json(
            { error: '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô stock ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ö‡∏ß‡∏Å' },
            { status: 400 }
          );
        }
        console.log(`üìä Executing setAdminStock: ${itemName} = ${value}`);
        updatedItem = await InventoryMaster.setAdminStock(itemName, category, value, reason, adminId, adminName);
      } else if (operationType === 'adjust_stock') {
        // üÜï FIXED: For UI "adjust_stock", the value is actually the NEW ABSOLUTE VALUE, not adjustment
        // We need to calculate the actual adjustment amount
        const currentItem = await InventoryMaster.findOne({ itemName, categoryId: category });
        if (!currentItem) {
          return NextResponse.json(
            { error: `‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ ${itemName} ‡πÉ‡∏ô‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà ${category}` },
            { status: 404 }
          );
        }
        
        const currentAdminStock = currentItem.stockManagement?.adminDefinedStock || 0;
        const actualAdjustment = value - currentAdminStock;
        
        console.log(`üìä Executing adjustAdminStock: ${itemName} from ${currentAdminStock} to ${value} (adjustment = ${actualAdjustment})`);
        updatedItem = await InventoryMaster.adjustAdminStock(itemName, category, actualAdjustment, reason, adminId, adminName);
      } else if (operationType === 'change_status_condition') {
        // For change_status_condition, we ONLY change status/condition, NOT quantity
        console.log(`üîÑ Executing change_status_condition: ${itemName} - updating status/condition only`);
        console.log(`üîß Change options:`, { 
          newStatusId: hasValidStatusChange ? newStatusId : 'no change', 
          newConditionId: hasValidConditionChange ? newConditionId : 'no change'
        });
        
        // Find the item first using itemName and categoryId
        const currentItem = await InventoryMaster.findOne({ itemName, categoryId: category });
        if (!currentItem) {
          console.error(`‚ùå Item not found: ${itemName} in category ${category}`);
          return NextResponse.json(
            { error: `‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ ${itemName} ‡πÉ‡∏ô‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà ${category}` },
            { status: 404 }
          );
        }
        
        // For status/condition change, keep the current quantity - NO adjustment
        console.log(`üìä Status/condition change: keeping current admin stock (${currentItem.stockManagement?.adminDefinedStock || 0})`);
        updatedItem = currentItem;
      }

      console.log(`‚úÖ Stock operation completed:`, {
        itemName: updatedItem.itemName,
        operationType,
        newAdminStock: updatedItem.stockManagement?.adminDefinedStock,
        lastOperation: updatedItem.adminStockOperations[updatedItem.adminStockOperations.length - 1]
      });

      // üÜï CRITICAL: Sync actual InventoryItem records to match new admin stock
      const newAdminStock = updatedItem.stockManagement.adminDefinedStock;
      console.log(`üîÑ Syncing InventoryItem records to match adminDefinedStock: ${newAdminStock}`);
      
      try {
        if (operationType === 'change_status_condition') {
          // For change_status_condition, don't change quantity, just update status/condition
          // Use current admin stock count instead of newAdminStock to avoid deletion
          const currentAdminItems = await InventoryItem.find({
            itemName: updatedItem.itemName,
            categoryId: updatedItem.categoryId,
            'currentOwnership.ownerType': 'admin_stock',
            deletedAt: { $exists: false }
          });
          const currentAdminStockCount = currentAdminItems.length;
          
          console.log(`üìä Status/condition change: using current admin stock count (${currentAdminStockCount}) instead of newAdminStock (${newAdminStock})`);
          
          await syncAdminStockItems(
            updatedItem.itemName, 
            updatedItem.categoryId, 
            currentAdminStockCount, // Use current count to avoid deletion
            reason, 
            adminId, 
            undefined, // ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà 
            hasValidStatusChange ? newStatusId : undefined, 
            hasValidConditionChange ? newConditionId : undefined
          );
        } else {
          // For other operations, sync normally
          await syncAdminStockItems(
            updatedItem.itemName, 
            updatedItem.categoryId, 
            newAdminStock, 
            reason, 
            adminId, 
            undefined, // ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà 
            hasValidStatusChange ? newStatusId : undefined, 
            hasValidConditionChange ? newConditionId : undefined
          );
        }
      } catch (syncError) {
        console.error('‚ùå Stock sync failed:', syncError);
        
        // üÜï ENHANCED: Check if it's our specific validation error
        if (syncError instanceof Error && syncError.message.includes('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏î‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÑ‡∏î‡πâ')) {
          return NextResponse.json(
            { 
              error: syncError.message,
              errorType: 'CANNOT_REDUCE_WITH_SERIAL_NUMBERS',
              suggestion: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡πà‡∏ô "‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£" ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏°‡∏µ Serial Number ‡πÅ‡∏ö‡∏ö Manual'
            },
            { status: 400 }
          );
        }
        
        // Re-throw other errors
        throw syncError;
      }
      
      // Update InventoryMaster to reflect the synced items
      console.log(`üîÑ Updating InventoryMaster after item sync...`);
      const finalCategoryId = updatedItem.categoryId; // ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà
      
      try {
        await updateInventoryMaster(updatedItem.itemName, finalCategoryId);
        console.log(`‚úÖ InventoryMaster updated successfully for ${updatedItem.itemName} in category ${finalCategoryId}`);
      } catch (updateError) {
        console.error('‚ùå Error updating InventoryMaster:', updateError);
        
        // ‡∏´‡∏≤‡∏Å‡πÄ‡∏Å‡∏¥‡∏î duplicate key error ‡πÉ‡∏´‡πâ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏£‡∏∞‡∏°‡∏±‡∏î‡∏£‡∏∞‡∏ß‡∏±‡∏á
        if (updateError instanceof Error && updateError.message.includes('E11000')) {
          console.log('üîÑ Duplicate key error detected, cleaning up duplicates...');
          
          // ‡∏´‡∏≤ InventoryMaster ‡∏ó‡∏µ‡πà‡∏ã‡πâ‡∏≥‡∏Å‡∏±‡∏ô
          const duplicateMasters = await InventoryMaster.find({ 
            itemName: updatedItem.itemName, 
            categoryId: finalCategoryId 
          });
          
          console.log(`üîç Found ${duplicateMasters.length} duplicate masters`);
          
          if (duplicateMasters.length > 1) {
            // ‡∏•‡∏ö master ‡πÄ‡∏Å‡πà‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏¢‡∏Å‡πÄ‡∏ß‡πâ‡∏ô‡∏ï‡∏±‡∏ß‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
            const mastersToDelete = duplicateMasters.slice(0, -1);
            for (const master of mastersToDelete) {
              console.log(`üóëÔ∏è Deleting duplicate master: ${master._id}`);
              await InventoryMaster.findByIdAndDelete(master._id);
            }
          }
          
          // ‡∏•‡∏ö master ‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà
          await InventoryMaster.deleteMany({ 
            itemName: updatedItem.itemName, 
            categoryId: finalCategoryId 
          });
          
          console.log('üîÑ Recreating InventoryMaster...');
          await updateInventoryMaster(updatedItem.itemName, finalCategoryId);
        } else {
          throw updateError;
        }
      }
      
      // Clear all caches to ensure fresh data in UI
      clearAllCaches();
      console.log(`üóëÔ∏è Cleared all caches after stock update`);

      return NextResponse.json({
        message: `${operationType === 'set_stock' ? '‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤' : '‡∏õ‡∏£‡∏±‡∏ö'}‡∏à‡∏≥‡∏ô‡∏ß‡∏ô stock ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß`,
        item: {
          itemName: updatedItem.itemName,
          category: updatedItem.category,
          stockManagement: updatedItem.stockManagement,
          lastOperation: updatedItem.adminStockOperations[updatedItem.adminStockOperations.length - 1]
        }
      });
    } catch (stockError) {
      console.error('‚ùå Error in stock operation:', stockError);
      return NextResponse.json(
        { error: stockError instanceof Error ? stockError.message : '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ stock' },
        { status: 500 }
      );
    }

  } catch (error) {
    console.error('Error managing admin stock:', error);
    return NextResponse.json(
      { error: error instanceof Error ? error.message : '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ stock' },
      { status: 500 }
    );
  }
}
