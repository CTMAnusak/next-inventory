import { NextRequest, NextResponse } from 'next/server';
import { verifyTokenFromRequest } from '@/lib/auth';

console.log('üöÄ [API] Loading rename script...');
import { renameItemGlobally, rollbackRename, RenameResult } from '@/scripts/rename-item-global';
console.log('‚úÖ [API] Rename script loaded successfully');
console.log('üîç [API] Function types:', {
  renameItemGlobally: typeof renameItemGlobally,
  rollbackRename: typeof rollbackRename
});

export async function POST(request: NextRequest) {
  try {
    // Verify admin authentication
    console.log('üîë Verifying token...');
    const payload = verifyTokenFromRequest(request);
    if (!payload) {
      console.log('‚ùå Token verification failed');
      return NextResponse.json(
        { error: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö' },
        { status: 401 }
      );
    }
    
    console.log(`‚úÖ Token verified for user: ${payload.userId}`);

    const body = await request.json();
    const { action, oldName, newName, options = {} } = body;

    // Validate required fields
    if (!action) {
      return NextResponse.json(
        { error: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏ action' },
        { status: 400 }
      );
    }

    if (action === 'rename') {
      if (!oldName || !newName) {
        return NextResponse.json(
          { error: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏Å‡πà‡∏≤‡πÅ‡∏•‡∏∞‡∏ä‡∏∑‡πà‡∏≠‡πÉ‡∏´‡∏°‡πà' },
          { status: 400 }
        );
      }

      if (oldName.trim() === newName.trim()) {
        return NextResponse.json(
          { error: '‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏Å‡πà‡∏≤‡πÅ‡∏•‡∏∞‡∏ä‡∏∑‡πà‡∏≠‡πÉ‡∏´‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏Å‡∏±‡∏ô' },
          { status: 400 }
        );
      }

      console.log(`üöÄ Admin ${payload.userId} initiated rename: "${oldName}" ‚Üí "${newName}"`);
      console.log(`‚öôÔ∏è Options:`, options);

      console.log('üì° Starting renameItemGlobally...');
      
      // Execute global rename
      let result: RenameResult;
      try {
        result = await renameItemGlobally(
          oldName.trim(),
          newName.trim(),
          {
            dryRun: options.dryRun || false,
            createBackup: options.createBackup !== false, // default to true
            batchSize: options.batchSize || 1000
          }
        );
        console.log('‚úÖ renameItemGlobally completed');
      } catch (scriptError) {
        console.error('‚ùå renameItemGlobally failed:', scriptError);
        return NextResponse.json({
          success: false,
          error: `Script execution failed: ${scriptError instanceof Error ? scriptError.message : String(scriptError)}`
        }, { status: 500 });
      }

      console.log(`üìä Rename result:`, {
        success: result.success,
        documentsUpdated: result.documentsUpdated,
        errors: result.errors.length,
        errorDetails: result.errors
      });

      console.log('üöÄ Full result object:', result);

      return NextResponse.json({
        success: result.success,
        message: result.success 
          ? `‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: "${oldName}" ‚Üí "${newName}"` 
          : '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡∏∑‡πà‡∏≠',
        result
      });

    } else if (action === 'rollback') {
      const { backupId } = body;
      
      if (!backupId) {
        return NextResponse.json(
          { error: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏ backup ID' },
          { status: 400 }
        );
      }

      console.log(`üîÑ Admin ${payload.userId} initiated rollback: ${backupId}`);

      const success = await rollbackRename(backupId);

      return NextResponse.json({
        success,
        message: success 
          ? `‡∏Å‡∏π‡πâ‡∏Ñ‡∏∑‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ${backupId}` 
          : `‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Å‡∏π‡πâ‡∏Ñ‡∏∑‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: ${backupId}`
      });

    } else if (action === 'preview') {
      // Dry run to show what would be changed
      if (!oldName) {
        return NextResponse.json(
          { error: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏ä‡∏∑‡πà‡∏≠‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö' },
          { status: 400 }
        );
      }

      console.log(`üëÄ Admin ${payload.userId} previewing changes for: "${oldName}"`);

      const result: RenameResult = await renameItemGlobally(
        oldName.trim(),
        'PREVIEW_MODE',
        { dryRun: true, createBackup: false }
      );

      return NextResponse.json({
        success: true,
        message: `‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏ú‡∏•‡∏Å‡∏£‡∏∞‡∏ó‡∏ö`,
        result
      });

    } else {
      return NextResponse.json(
        { error: 'Action ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á (rename, rollback, preview)' },
        { status: 400 }
      );
    }

  } catch (error) {
    console.error('‚ùå Rename API error:', error);
    
    return NextResponse.json(
      { 
        success: false,
        error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö',
        details: error instanceof Error ? error.message : String(error)
      },
      { status: 500 }
    );
  }
}

export async function GET(request: NextRequest) {
  try {
    // Verify admin authentication
    const payload = verifyTokenFromRequest(request);
    if (!payload) {
      return NextResponse.json(
        { error: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö' },
        { status: 401 }
      );
    }

    return NextResponse.json({
      message: 'Item Rename API',
      description: 'API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î',
      endpoints: {
        'POST /': '‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå',
        'actions': {
          'rename': '‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡∏∑‡πà‡∏≠ (oldName, newName, options)',
          'rollback': '‡∏Å‡∏π‡πâ‡∏Ñ‡∏∑‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (backupId)', 
          'preview': '‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏ú‡∏•‡∏Å‡∏£‡∏∞‡∏ó‡∏ö (oldName)'
        }
      }
    });

  } catch (error) {
    console.error('‚ùå Rename API GET error:', error);
    return NextResponse.json(
      { error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö' },
      { status: 500 }
    );
  }
}