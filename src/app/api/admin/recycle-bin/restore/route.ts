import { NextRequest, NextResponse } from 'next/server';
import dbConnect from '@/lib/mongodb';
import User from '@/models/User';
import { verifyToken } from '@/lib/auth';
import { restoreFromRecycleBin } from '@/lib/recycle-bin-helpers';

// POST - Restore item from recycle bin
export async function POST(request: NextRequest) {
  try {
    await dbConnect();
    
    // Get user info from token
    const token = request.cookies.get('auth-token')?.value;
    const payload: any = token ? verifyToken(token) : null;
    
    if (!payload) {
      return NextResponse.json(
        { error: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö' },
        { status: 401 }
      );
    }

    // Check if user is admin or it_admin
    const currentUser = await User.findOne({ user_id: payload.userId });
    if (!currentUser || !['admin', 'it_admin'].includes(currentUser.userRole)) {
      return NextResponse.json(
        { error: '‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏Å‡∏π‡πâ‡∏Ñ‡∏∑‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£' },
        { status: 403 }
      );
    }

    const body = await request.json();
    const { recycleBinId } = body;

    if (!recycleBinId) {
      return NextResponse.json(
        { error: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏ ID ‡∏Ç‡∏≠‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Å‡∏π‡πâ‡∏Ñ‡∏∑‡∏ô' },
        { status: 400 }
      );
    }

    console.log(`‚ôªÔ∏è Restoring item from recycle bin: ${recycleBinId}`);
    console.log(`üë§ Restored by: ${currentUser.firstName} ${currentUser.lastName} (${currentUser.user_id})`);

    const result = await restoreFromRecycleBin({
      recycleBinId: recycleBinId,
      restoredBy: currentUser.user_id,
      restoredByName: `${currentUser.firstName || 'Unknown'} ${currentUser.lastName || 'User'}`
    });

    if (result.type === 'individual') {
      return NextResponse.json({
        success: true,
        message: '‡∏Å‡∏π‡πâ‡∏Ñ‡∏∑‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß',
        type: 'individual',
        item: {
          _id: result.item._id,
          itemName: result.item.itemName,
          category: result.item.category,
          serialNumber: result.item.serialNumber,
          numberPhone: result.item.numberPhone, // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå
          status: result.item.status
        }
      });
    } else if (result.type === 'category') {
      return NextResponse.json({
        success: true,
        message: `‡∏Å‡∏π‡πâ‡∏Ñ‡∏∑‡∏ô‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß (${result.items.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£)`,
        type: 'category',
        restoredCount: result.items.length,
        items: result.items.map(item => ({
          _id: item._id,
          itemName: item.itemName,
          category: item.category,
          serialNumber: item.serialNumber,
          numberPhone: item.numberPhone, // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå
          status: item.status
        }))
      });
    }

    return NextResponse.json(
      { error: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Å‡∏π‡πâ‡∏Ñ‡∏∑‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÑ‡∏î‡πâ' },
      { status: 500 }
    );

  } catch (error) {
    console.error('‚ùå Restore API - Error restoring item:', error);
    
    if (error instanceof Error) {
      return NextResponse.json(
        { error: error.message },
        { status: 400 }
      );
    }
    
    return NextResponse.json(
      { error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Å‡∏π‡πâ‡∏Ñ‡∏∑‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£' },
      { status: 500 }
    );
  }
}
