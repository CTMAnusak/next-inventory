import { NextRequest, NextResponse } from 'next/server';
import dbConnect from '@/lib/mongodb';
import InventoryItem from '@/models/InventoryItem';
import { verifyTokenFromRequest } from '@/lib/auth';

export async function GET(request: NextRequest) {
  try {
    await dbConnect();
    
    // Verify admin authentication
    const payload = verifyTokenFromRequest(request);
    if (!payload) {
      return NextResponse.json(
        { error: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö' },
        { status: 401 }
      );
    }
    
    const { searchParams } = new URL(request.url);
    const itemName = searchParams.get('itemName');
    const categoryId = searchParams.get('categoryId');
    
    if (!itemName || !categoryId) {
      return NextResponse.json(
        { error: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏ itemName ‡πÅ‡∏•‡∏∞ categoryId' },
        { status: 400 }
      );
    }
    
    console.log(`üîç Fetching breakdown for: ${itemName} (${categoryId})`);
    
    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• items ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì
    const allItems = await InventoryItem.find({
      itemName,
      categoryId,
      status: { $ne: 'deleted' }
    }).lean();
    
    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì status breakdown - ‡πÉ‡∏ä‡πâ‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡πÉ‡∏ô‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Stock
    const statusBreakdown = await InventoryItem.aggregate([
      { 
        $match: { 
          itemName, 
          categoryId, 
          status: { $ne: 'deleted' } 
        } 
      },
      { 
        $group: { 
          _id: '$statusId', 
          count: { $sum: 1 } 
        } 
      }
    ]);
    
    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì condition breakdown - ‡πÉ‡∏ä‡πâ‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡πÉ‡∏ô‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Stock
    const conditionBreakdown = await InventoryItem.aggregate([
      { 
        $match: { 
          itemName, 
          categoryId, 
          status: { $ne: 'deleted' } 
        } 
      },
      { 
        $group: { 
          _id: '$conditionId', 
          count: { $sum: 1 } 
        } 
      }
    ]);
    
    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì type breakdown - ‡πÉ‡∏ä‡πâ JavaScript ‡πÅ‡∏ó‡∏ô aggregation ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥
    const withSN = allItems.filter(item => 
      item.serialNumber && item.serialNumber.trim() !== ''
    );
    const withPhone = allItems.filter(item => 
      item.numberPhone && item.numberPhone.trim() !== ''
    );
    const withoutSN = allItems.filter(item => 
      (!item.serialNumber || item.serialNumber.trim() === '') && 
      (!item.numberPhone || item.numberPhone.trim() === '')
    );
    
    const typeResult = {
      withoutSN: withoutSN.length,
      withSN: withSN.length,
      withPhone: withPhone.length
    };
    
    // ‡πÅ‡∏õ‡∏•‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÄ‡∏õ‡πá‡∏ô object - ‡πÉ‡∏ä‡πâ‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡πÉ‡∏ô‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Stock
    const statusResult = statusBreakdown.reduce((acc, item) => {
      acc[item._id] = item.count;
      return acc;
    }, {} as Record<string, number>);
    
    const conditionResult = conditionBreakdown.reduce((acc, item) => {
      acc[item._id] = item.count;
      return acc;
    }, {} as Record<string, number>);
    
    console.log(`üìä Breakdown results for ${itemName}:`, {
      totalItems: allItems.length,
      type: typeResult,
      status: statusResult,
      condition: conditionResult
    });
    
    // Debug: ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î items ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏à‡∏±‡∏î‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà
    console.log(`üîç Items categorization:`, {
      withSN: withSN.map(item => ({ id: item._id.toString(), sn: item.serialNumber })),
      withPhone: withPhone.map(item => ({ id: item._id.toString(), phone: item.numberPhone })),
      withoutSN: withoutSN.map(item => ({ id: item._id.toString(), sn: item.serialNumber, phone: item.numberPhone }))
    });
    
    return NextResponse.json({
      statusBreakdown: statusResult,
      conditionBreakdown: conditionResult,
      typeBreakdown: typeResult
    });
    
  } catch (error) {
    console.error('Error fetching breakdown:', error);
    return NextResponse.json(
      { error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•' },
      { status: 500 }
    );
  }
}
