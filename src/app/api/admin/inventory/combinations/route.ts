import { NextRequest, NextResponse } from 'next/server';
import dbConnect from '@/lib/mongodb';
import { InventoryItem } from '@/models/InventoryItemNew';
import InventoryMaster from '@/models/InventoryMaster';

/**
 * GET /api/admin/inventory/combinations
 * ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• status+condition combinations ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ SN
 */
export async function GET(request: NextRequest) {
  try {
    await dbConnect();

    const { searchParams } = new URL(request.url);
    const itemName = searchParams.get('itemName');
    const categoryId = searchParams.get('categoryId');

    if (!itemName || !categoryId) {
      return NextResponse.json(
        { error: '‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏∏ itemName ‡πÅ‡∏•‡∏∞ categoryId' },
        { status: 400 }
      );
    }

    // ‡∏´‡∏≤ InventoryMaster ‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö itemName ‡πÅ‡∏•‡∏∞ categoryId
    const inventoryMaster = await InventoryMaster.findOne({
      itemName,
      categoryId
    });

    if (!inventoryMaster) {
      return NextResponse.json(
        { error: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏' },
        { status: 404 }
      );
    }

    // ‡∏î‡∏∂‡∏á‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ SN, ‡πÄ‡∏õ‡πá‡∏ô admin_stock, ‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏•‡∏ö
    // ‡πÅ‡∏•‡∏∞‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô masterItemId ‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô
    const items = await InventoryItem.find({
      itemMasterId: (inventoryMaster._id as any).toString(),
      serialNumber: { $in: [null, ''] },
      numberPhone: { $in: [null, ''] },
      'currentOwnership.ownerType': 'admin_stock',
      deletedAt: { $exists: false }
    }).select('statusId conditionId _id');

    console.log(`üìä Found ${items.length} non-SN items for ${itemName}`);

    // ‡∏à‡∏±‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ï‡∏≤‡∏° statusId + conditionId
    const combinationsMap = new Map<string, {
      statusId: string;
      conditionId: string;
      quantity: number;
      itemIds: string[];
    }>();

    items.forEach((item) => {
      // ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ statusId ‡∏´‡∏£‡∏∑‡∏≠ conditionId
      const statusId = item.statusId || 'status_available';
      const conditionId = item.conditionId || 'cond_working';
      const key = `${statusId}_${conditionId}`;

      if (!combinationsMap.has(key)) {
        combinationsMap.set(key, {
          statusId,
          conditionId,
          quantity: 0,
          itemIds: []
        });
      }

      const combo = combinationsMap.get(key)!;
      combo.quantity += 1;
      combo.itemIds.push((item._id as any).toString());
    });

    console.log(`üìä Combinations found:`, Array.from(combinationsMap.entries()).map(([key, data]) => ({
      key,
      statusId: data.statusId,
      conditionId: data.conditionId,
      quantity: data.quantity
    })));

    // ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô array ‡πÅ‡∏•‡∏∞‡∏Å‡∏£‡∏≠‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô > 0
    const combinations = Array.from(combinationsMap.values())
      .filter(combo => combo.quantity > 0)
      .map(combo => ({
        statusId: combo.statusId,
        conditionId: combo.conditionId,
        quantity: combo.quantity,
        key: `${combo.statusId}_${combo.conditionId}`
      }))
      .sort((a, b) => {
        // ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏° statusId ‡∏Å‡πà‡∏≠‡∏ô ‡πÅ‡∏•‡πâ‡∏ß‡∏ï‡∏≤‡∏° conditionId
        if (a.statusId !== b.statusId) {
          return a.statusId.localeCompare(b.statusId);
        }
        return a.conditionId.localeCompare(b.conditionId);
      });

    return NextResponse.json({ combinations });

  } catch (error) {
    console.error('Error fetching combinations:', error);
    return NextResponse.json(
      { error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•' },
      { status: 500 }
    );
  }
}

