import { NextRequest, NextResponse } from 'next/server';
import dbConnect from '@/lib/mongodb';
import IssueLog from '@/models/IssueLog';
import RequestLog from '@/models/RequestLog';
import ReturnLog from '@/models/ReturnLog';
import User from '@/models/User';
import InventoryItem from '@/models/InventoryItem';
import InventoryMaster from '@/models/InventoryMaster';
import InventorySnapshot from '@/models/InventorySnapshot';
import { getCachedData, setCachedData, clearDashboardCache } from '@/lib/cache-utils';

export async function GET(request: NextRequest) {
  try {
    await dbConnect();
    
    const { searchParams } = new URL(request.url);
    const monthParam = searchParams.get('month');
    const year = parseInt(searchParams.get('year') || String(new Date().getFullYear()));
    const monthNumber = monthParam && monthParam !== 'all' ? parseInt(monthParam) : undefined;
    const forceRefresh = searchParams.get('forceRefresh') === 'true';

    // Cache key based on query params
    const cacheKey = `dashboard_${year}_${monthParam || 'all'}`;
    
    // Clear cache if forceRefresh is requested
    if (forceRefresh) {
      clearDashboardCache();
    }
    
    const cached = getCachedData(cacheKey);
    if (cached && !forceRefresh) {
      return NextResponse.json(cached);
    }

    // Create date range
    const startDate = monthNumber ? new Date(year, monthNumber - 1, 1) : new Date(year, 0, 1);
    const endDate = monthNumber ? new Date(year, monthNumber, 0, 23, 59, 59) : new Date(year, 11, 31, 23, 59, 59);

    // DB-side aggregations and counts with optimized queries
    const [
      totalIssues,
      pendingIssues,
      inProgressIssues,
      completedIssues,
      urgentIssues,
      normalIssues,
      totalRequests,
      totalReturns,
      totalUsers,
      inventoryStatsResult,
      userAddedItems,
      lowStockItems,
      // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏•‡πà‡∏≠‡∏á "‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÅ‡∏à‡πâ‡∏á‡∏á‡∏≤‡∏ô IT" (‡∏≠‡∏¥‡∏á‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤)
      pendingIssuesInPeriod,
      inProgressIssuesInPeriod,
      completedIssuesInPeriod,
      closedIssuesInPeriod,
      urgentIssuesInPeriod,
      normalIssuesInPeriod,
      // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏•‡πà‡∏≠‡∏á "‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ñ‡∏•‡∏±‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤" (‡∏≠‡∏¥‡∏á‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤)
      totalInventoryItemsInPeriod,
      lowStockItemsInPeriod,
      // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏•‡πà‡∏≠‡∏á "‡∏™‡∏£‡∏∏‡∏õ" (‡∏≠‡∏¥‡∏á‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤)
      userAddedItemsInPeriod,
      monthlyIssues,
      monthlyRequests,
      monthlyReturns,
      issuesByCategory,
      requestsByUrgency
    ] = await Promise.all([
      // ‡∏Å‡∏≤‡∏£‡πå‡∏î‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô: ‡∏ô‡∏±‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡πÑ‡∏°‡πà‡∏≠‡∏¥‡∏á‡πÄ‡∏î‡∏∑‡∏≠‡∏ô/‡∏õ‡∏µ) - ‡πÉ‡∏ä‡πâ estimatedDocumentCount ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö performance
      IssueLog.estimatedDocumentCount(),
      IssueLog.countDocuments({ status: 'pending' }).lean(),
      IssueLog.countDocuments({ status: 'in_progress' }).lean(),
      IssueLog.countDocuments({ status: 'completed' }).lean(),
      IssueLog.countDocuments({ urgency: 'very_urgent' }).lean(),
      IssueLog.countDocuments({ urgency: 'normal' }).lean(),

      // ‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡πÄ‡∏ö‡∏¥‡∏Å (‡∏ô‡∏±‡∏ö items ‡∏ó‡∏µ‡πà‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô)
      RequestLog.aggregate([
        { $match: { status: { $in: ['approved', 'completed'] } } }, // ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ó‡∏µ‡πà‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÅ‡∏•‡πâ‡∏ß
        { $unwind: '$items' },
        { $count: 'total' }
      ]).then(result => result[0]?.total || 0),
      // ‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡∏Ñ‡∏∑‡∏ô (‡∏ô‡∏±‡∏ö items ‡∏ó‡∏µ‡πà‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô)
      ReturnLog.aggregate([
        { $unwind: '$items' },
        { $match: { 'items.approvalStatus': 'approved' } }, // ‡πÄ‡∏â‡∏û‡∏≤‡∏∞ items ‡∏ó‡∏µ‡πà‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÅ‡∏•‡πâ‡∏ß
        { $count: 'total' }
      ]).then(result => result[0]?.total || 0),
      User.countDocuments({ pendingDeletion: { $ne: true } }).lean(),
      // üîß FIX: ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì totalInventoryItems ‡∏à‡∏≤‡∏Å sum ‡∏Ç‡∏≠‡∏á totalQuantity ‡∏à‡∏≤‡∏Å InventoryMaster ‡πÅ‡∏ó‡∏ô‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡∏ö InventoryItem
      InventoryMaster.aggregate([
        {
          $match: {
            relatedItemIds: { $exists: true, $ne: [] }
          }
        },
        {
          $group: {
            _id: null,
            totalInventoryItems: { $sum: 1 },  // ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå)
            totalInventoryCount: { $sum: '$totalQuantity' }  // ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ä‡∏¥‡πâ‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
          }
        }
      ]).then(result => {
        if (result.length > 0) {
          return { totalInventoryItems: result[0].totalInventoryItems, totalInventoryCount: result[0].totalInventoryCount };
        }
        return { totalInventoryItems: 0, totalInventoryCount: 0 };
      }),
      // ‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏ó‡∏µ‡πà User ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏≠‡∏á (self_reported) - ‡πÉ‡∏ä‡πâ lean()
      InventoryItem.countDocuments({ 
        'sourceInfo.acquisitionMethod': 'self_reported',
        'currentOwnership.ownerType': 'user_owned',
        deletedAt: { $exists: false }
      }).lean(),
      // ‡∏ô‡∏±‡∏ö‡πÅ‡∏ñ‡∏ß‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏Å‡∏•‡πâ‡∏´‡∏°‡∏î (availableQuantity <= 2 ‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡∏°‡∏µ serial number) - ‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÅ‡∏ñ‡∏ß ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏à‡∏≥‡∏ô‡∏ß‡∏ô items
      // ‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏ö‡∏¥‡∏Å‡πÑ‡∏î‡πâ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô ‚â§ 2 (‡∏£‡∏ß‡∏° 0) ‡πÑ‡∏°‡πà‡∏ï‡∏±‡∏î SN/‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏≠‡∏≠‡∏Å ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤ Inventory
      InventoryMaster.countDocuments({ 
        availableQuantity: { $lte: 2, $gte: 0 }
      }).lean(),

      // ‡∏Å‡∏•‡πà‡∏≠‡∏á "‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÅ‡∏à‡πâ‡∏á‡∏á‡∏≤‡∏ô IT" (‡∏≠‡∏¥‡∏á‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤) - ‡πÉ‡∏ä‡πâ lean()
      IssueLog.countDocuments({ status: 'pending', reportDate: { $gte: startDate, $lte: endDate } }).lean(),
      IssueLog.countDocuments({ status: 'in_progress', reportDate: { $gte: startDate, $lte: endDate } }).lean(),
      IssueLog.countDocuments({ status: 'completed', reportDate: { $gte: startDate, $lte: endDate } }).lean(),
      IssueLog.countDocuments({ status: 'closed', reportDate: { $gte: startDate, $lte: endDate } }).lean(),
      IssueLog.countDocuments({ urgency: 'very_urgent', reportDate: { $gte: startDate, $lte: endDate } }).lean(),
      IssueLog.countDocuments({ urgency: 'normal', reportDate: { $gte: startDate, $lte: endDate } }).lean(),

      // ‡∏Å‡∏•‡πà‡∏≠‡∏á "‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ñ‡∏•‡∏±‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤" (‡∏≠‡∏¥‡∏á‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤) ‚Äì ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Ç‡∏≠‡∏á items ‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏ï‡πá‡∏≠‡∏Å‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤ (‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡πÄ‡∏û‡∏¥‡πà‡∏° ‡∏´‡∏£‡∏∑‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏∑‡∏ô)
      InventoryItem.aggregate([
        {
          $match: {
            deletedAt: { $exists: false },
            'currentOwnership.ownerType': 'admin_stock'
          }
        },
        {
          $addFields: {
            entryDate: {
              $ifNull: [
                '$transferInfo.transferDate',
                '$currentOwnership.ownedSince',
                '$sourceInfo.dateAdded',
                '$createdAt'
              ]
            }
          }
        },
        {
          $match: {
            entryDate: { $gte: startDate, $lte: endDate }
          }
        },
        { $count: 'total' }
      ]).then(result => result[0]?.total || 0),
      // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì "‡πÉ‡∏Å‡∏•‡πâ‡∏´‡∏°‡∏î (‚â§ 2) ‡∏ï‡∏≤‡∏°‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤" ‡πÉ‡∏´‡πâ‡∏™‡∏≠‡∏î‡∏Ñ‡∏•‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤ Inventory:
      // ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏ó‡∏µ‡πà‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô availableQuantity ‚â§ 2 ‡πÅ‡∏•‡∏∞:
      // 1. InventoryMaster ‡∏ñ‡∏π‡∏Å‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å (createdAt) ‡∏´‡∏£‡∏∑‡∏≠
      // 2. ‡∏°‡∏µ InventoryItem ‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏ï‡πá‡∏≠‡∏Å‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å (‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà/‡∏Ñ‡∏∑‡∏ô‡∏Ç‡∏≠‡∏á)
      // ‡πÇ‡∏î‡∏¢ InventoryItem ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ: admin_stock + status_available + cond_working (‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö availableQuantity)
      InventoryMaster.aggregate([
        {
          $match: {
            availableQuantity: { $lte: 2, $gte: 0 }
          }
        },
        {
          $lookup: {
            from: 'inventoryitems',
            let: { itemName: '$itemName', categoryId: '$categoryId' },
            pipeline: [
              {
                $match: {
                  $expr: {
                    $and: [
                      { $eq: ['$itemName', '$$itemName'] },
                      { $eq: ['$categoryId', '$$categoryId'] },
                      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô admin_stock ‡πÅ‡∏•‡∏∞‡∏°‡∏µ status + condition ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á (‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö availableQuantity)
                      { $eq: ['$currentOwnership.ownerType', 'admin_stock'] },
                      { $eq: ['$statusId', 'status_available'] },
                      { $eq: ['$conditionId', 'cond_working'] }
                    ]
                  }
                }
              },
              {
                $addFields: {
                  entryDate: {
                    $ifNull: [
                      '$transferInfo.transferDate',
                      '$currentOwnership.ownedSince',
                      '$sourceInfo.dateAdded',
                      '$createdAt'
                    ]
                  }
                }
              },
              {
                $match: {
                  entryDate: { $gte: startDate, $lte: endDate }
                }
              },
              { $limit: 1 }
            ],
            as: 'enteredInPeriod'
          }
        },
        {
          $match: {
            $or: [
              // ‡∏ñ‡πâ‡∏≤ InventoryMaster ‡∏ñ‡∏π‡∏Å‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å ‡πÉ‡∏´‡πâ‡∏ô‡∏±‡∏ö (‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Å‡∏£‡∏ì‡∏µ‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏ñ‡∏π‡∏Å‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ô‡∏±‡πâ‡∏ô)
              { createdAt: { $gte: startDate, $lte: endDate } },
              // ‡∏´‡∏£‡∏∑‡∏≠‡∏°‡∏µ InventoryItem ‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏ï‡πá‡∏≠‡∏Å‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å (‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô admin_stock + status_available + cond_working)
              { enteredInPeriod: { $ne: [] } }
            ]
          }
        },
        { $count: 'lowStockNames' }
      ]).then(x => x?.[0]?.lowStockNames || 0),
      
      // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏•‡πà‡∏≠‡∏á "‡∏™‡∏£‡∏∏‡∏õ" - User ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏≠‡∏á‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤
      InventoryItem.countDocuments({ 
        'sourceInfo.acquisitionMethod': 'self_reported',
        'currentOwnership.ownerType': 'user_owned',
        'sourceInfo.dateAdded': { $gte: startDate, $lte: endDate },
        deletedAt: { $exists: false }
      }),

      // monthlyIssues
      IssueLog.aggregate([
        { $match: { reportDate: { $gte: startDate, $lte: endDate } } },
        { $group: { _id: { y: { $year: '$reportDate' }, m: { $month: '$reportDate' } }, count: { $sum: 1 } } },
        { $project: { _id: 0, month: { $concat: [ { $toString: '$_id.y' }, '-', { $toString: { $cond: [ { $lt: ['$_id.m', 10] }, { $concat: ['0', { $toString: '$_id.m' }] }, { $toString: '$_id.m' } ] } } ] }, count: 1 } },
        { $sort: { month: 1 } }
      ]),
      // monthlyRequests (‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô items ‡∏ó‡∏µ‡πà‡πÄ‡∏ö‡∏¥‡∏Å - ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ó‡∏µ‡πà‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÅ‡∏•‡πâ‡∏ß)
      RequestLog.aggregate([
        { $match: { 
          requestDate: { $gte: startDate, $lte: endDate },
          status: { $in: ['approved', 'completed'] } // ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ó‡∏µ‡πà‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÅ‡∏•‡πâ‡∏ß
        }},
        { $unwind: '$items' }, // ‚úÖ Unwind items ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå
        { $group: { _id: { y: { $year: '$requestDate' }, m: { $month: '$requestDate' } }, count: { $sum: 1 } } },
        { $project: { _id: 0, month: { $concat: [ { $toString: '$_id.y' }, '-', { $toString: { $cond: [ { $lt: ['$_id.m', 10] }, { $concat: ['0', { $toString: '$_id.m' }] }, { $toString: '$_id.m' } ] } } ] }, count: 1 } },
        { $sort: { month: 1 } }
      ]),
      // monthlyReturns (‡∏ô‡∏±‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞ items ‡∏ó‡∏µ‡πà‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÅ‡∏•‡πâ‡∏ß)
      ReturnLog.aggregate([
        { $match: { returnDate: { $gte: startDate, $lte: endDate } }},
        { $unwind: '$items' },
        { $match: { 'items.approvalStatus': 'approved' }}, // ‡πÄ‡∏â‡∏û‡∏≤‡∏∞ items ‡∏ó‡∏µ‡πà‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÅ‡∏•‡πâ‡∏ß
        { $group: { _id: { y: { $year: '$returnDate' }, m: { $month: '$returnDate' } }, count: { $sum: 1 } } },
        { $project: { _id: 0, month: { $concat: [ { $toString: '$_id.y' }, '-', { $toString: { $cond: [ { $lt: ['$_id.m', 10] }, { $concat: ['0', { $toString: '$_id.m' }] }, { $toString: '$_id.m' } ] } } ] }, count: 1 } },
        { $sort: { month: 1 } }
      ]),
      // issuesByCategory in selected period
      IssueLog.aggregate([
        { $match: { reportDate: { $gte: startDate, $lte: endDate } } },
        { $group: { _id: '$issueCategory', count: { $sum: 1 } } },
        { $project: { _id: 0, category: { $ifNull: ['$_id', '‡∏≠‡∏∑‡πà‡∏ô‡πÜ'] }, count: 1 } },
        { $sort: { count: -1 } }
      ]),
      // requestsByUrgency in selected period (‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô items ‡∏ó‡∏µ‡πà‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô)
      RequestLog.aggregate([
        { $match: { 
          requestDate: { $gte: startDate, $lte: endDate },
          status: { $in: ['approved', 'completed'] } // ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ó‡∏µ‡πà‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÅ‡∏•‡πâ‡∏ß
        }},
        { $unwind: '$items' }, // ‚úÖ Unwind items ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå
        { $group: { _id: { $cond: [{ $eq: ['$urgency', 'very_urgent'] }, '‡∏î‡πà‡∏ß‡∏ô‡∏°‡∏≤‡∏Å', '‡∏õ‡∏Å‡∏ï‡∏¥'] }, count: { $sum: 1 } } },
        { $project: { _id: 0, urgency: '$_id', count: 1 } },
        { $sort: { urgency: 1 } }
      ])
    ]);

    // compute percentages for pie charts
    const issuesTotalInRange = issuesByCategory.reduce((s: number, x: any) => s + x.count, 0);
    const issuesByCategoryWithPct = issuesByCategory.map((x: any) => ({
      category: x.category,
      count: x.count,
      percentage: issuesTotalInRange > 0 ? (x.count / issuesTotalInRange) * 100 : 0
    }));

    const requestsTotalInRange = requestsByUrgency.reduce((s: number, x: any) => s + x.count, 0);
    const requestsByUrgencyWithPct = requestsByUrgency
      .map((x: any) => ({ urgency: x.urgency, count: x.count, percentage: requestsTotalInRange > 0 ? (x.count / requestsTotalInRange) * 100 : 0 }))
      .filter((x: any) => x.count > 0);

    // üîß FIX: ‡πÅ‡∏¢‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• inventory stats
    const inventoryStats = inventoryStatsResult || { totalInventoryItems: 0, totalInventoryCount: 0 };
    const totalInventoryItems = inventoryStats.totalInventoryItems;
    const totalInventoryCount = inventoryStats.totalInventoryCount;

    // üîß NEW: ‡πÉ‡∏ä‡πâ snapshot ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤ (‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà "‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î")
    let snapshotData: any = null;
    if (monthNumber) {
      const thaiYear = year + 543;
      snapshotData = await InventorySnapshot.findOne({ year: thaiYear, month: monthNumber }).lean();
    }

    // üîß FIX: ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì totalInventoryItemsInPeriod ‡πÅ‡∏•‡∏∞ lowStockItemsInPeriod ‡∏à‡∏≤‡∏Å snapshot ‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÉ‡∏´‡∏°‡πà
    let calculatedTotalInventoryItemsInPeriod = totalInventoryItemsInPeriod;
    let calculatedLowStockItemsInPeriod = lowStockItemsInPeriod;

    if (snapshotData && snapshotData.totalInventoryCount !== undefined) {
      // ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å snapshot
      calculatedTotalInventoryItemsInPeriod = snapshotData.totalInventoryCount; // ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ä‡∏¥‡πâ‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
      calculatedLowStockItemsInPeriod = snapshotData.lowStockItems || 0;
    } else if (monthNumber) {
      // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ snapshot ‡πÅ‡∏ï‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏î‡∏∑‡∏≠‡∏ô ‡πÉ‡∏´‡πâ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÉ‡∏´‡∏°‡πà (fallback)
      // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ä‡∏¥‡πâ‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏à‡∏≤‡∏Å InventoryMaster ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÉ‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ô‡∏±‡πâ‡∏ô
      const masterStats = await InventoryMaster.aggregate([
        {
          $match: {
            relatedItemIds: { $exists: true, $ne: [] },
            createdAt: { $gte: startDate, $lte: endDate }
          }
        },
        {
          $group: {
            _id: null,
            totalCount: { $sum: '$totalQuantity' }
          }
        }
      ]);
      if (masterStats.length > 0) {
        calculatedTotalInventoryItemsInPeriod = masterStats[0].totalCount;
      }
    } else {
      // ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å "‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î" ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
      calculatedTotalInventoryItemsInPeriod = totalInventoryCount;
      calculatedLowStockItemsInPeriod = lowStockItems;
    }

    const stats = {
      // ‡∏Å‡∏≤‡∏£‡πå‡∏î‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô (‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î - ‡πÑ‡∏°‡πà‡∏≠‡∏¥‡∏á‡πÄ‡∏î‡∏∑‡∏≠‡∏ô/‡∏õ‡∏µ)
      totalIssues,
      totalRequests,
      totalReturns,
      totalUsers,
      totalInventoryItems, // ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå)
      totalInventoryCount, // ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ä‡∏¥‡πâ‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (sum of totalQuantity)
      userAddedItems,
      lowStockItems,
      // ‡∏Å‡∏•‡πà‡∏≠‡∏á "‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÅ‡∏à‡πâ‡∏á‡∏á‡∏≤‡∏ô IT" (‡∏≠‡∏¥‡∏á‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤)
      pendingIssues: pendingIssuesInPeriod,
      inProgressIssues: inProgressIssuesInPeriod,
      completedIssues: completedIssuesInPeriod,
      closedIssues: closedIssuesInPeriod,
      urgentIssues: urgentIssuesInPeriod,
      normalIssues: normalIssuesInPeriod,
      // ‡∏Å‡∏•‡πà‡∏≠‡∏á "‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ñ‡∏•‡∏±‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤" (‡∏≠‡∏¥‡∏á‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤)
      totalInventoryItemsInPeriod: calculatedTotalInventoryItemsInPeriod,
      lowStockItemsInPeriod: calculatedLowStockItemsInPeriod,
      // ‡∏Å‡∏•‡πà‡∏≠‡∏á "‡∏™‡∏£‡∏∏‡∏õ" (‡∏≠‡∏¥‡∏á‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤)
      userAddedItemsInPeriod,
      // Charts ‡πÅ‡∏•‡∏∞ aggregations (‡∏≠‡∏¥‡∏á‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤)
      monthlyIssues,
      monthlyRequests,
      monthlyReturns,
      issuesByCategory: issuesByCategoryWithPct,
      requestsByUrgency: requestsByUrgencyWithPct
    };

    // Cache the result for 30 seconds
    setCachedData(cacheKey, stats);

    return NextResponse.json(stats);
  } catch (error) {
    console.error('Error fetching dashboard stats:', error);
    return NextResponse.json(
      { error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•' },
      { status: 500 }
    );
  }
}

function generateMonthlyData(data: any[], dateField: string) {
  const monthlyCount: { [key: string]: number } = {};
  
  data.forEach(item => {
    const date = new Date(item[dateField]);
    const monthKey = `${date.getFullYear()}-${(date.getMonth() + 1).toString().padStart(2, '0')}`;
    monthlyCount[monthKey] = (monthlyCount[monthKey] || 0) + 1;
  });

  return Object.entries(monthlyCount).map(([month, count]) => ({
    month,
    count
  }));
}

function generateCategoryData(data: any[], categoryField: string) {
  const categoryCount: { [key: string]: number } = {};
  
  data.forEach(item => {
    const category = item[categoryField] || '‡∏≠‡∏∑‡πà‡∏ô‡πÜ';
    categoryCount[category] = (categoryCount[category] || 0) + 1;
  });

  const total = data.length;
  
  return Object.entries(categoryCount)
    .map(([category, count]) => ({
      category,
      count,
      percentage: total > 0 ? (count / total) * 100 : 0
    }))
    .sort((a, b) => b.count - a.count);
}

function generateUrgencyData(data: any[]) {
  const urgencyCount = {
    normal: 0,
    very_urgent: 0
  };
  
  data.forEach(item => {
    if (item.urgency === 'very_urgent') {
      urgencyCount.very_urgent++;
    } else {
      urgencyCount.normal++;
    }
  });

  const total = data.length;
  
  return [
    {
      urgency: '‡∏î‡πà‡∏ß‡∏ô‡∏°‡∏≤‡∏Å',
      count: urgencyCount.very_urgent,
      percentage: total > 0 ? (urgencyCount.very_urgent / total) * 100 : 0
    },
    {
      urgency: '‡∏õ‡∏Å‡∏ï‡∏¥',
      count: urgencyCount.normal,
      percentage: total > 0 ? (urgencyCount.normal / total) * 100 : 0
    }
  ].filter(item => item.count > 0);
}
