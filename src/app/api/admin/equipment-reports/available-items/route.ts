import { NextRequest, NextResponse } from 'next/server';
import dbConnect from '@/lib/mongodb';
import InventoryItem from '@/models/InventoryItem';
import InventoryMaster from '@/models/InventoryMaster';
import { verifyTokenFromRequest } from '@/lib/auth';

// Force Node.js runtime for database operations
export const runtime = 'nodejs';

// GET - ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏ó‡∏µ‡πà‡∏ß‡πà‡∏≤‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
export async function GET(request: NextRequest) {
  try {
    console.log('üîç Available Items API called');
    console.log('üìã Request URL:', request.url);
    console.log('üç™ Request cookies:', request.headers.get('cookie'));
    
    await dbConnect();

    // Verify admin authentication
    const payload = verifyTokenFromRequest(request);
    console.log('üë§ Auth payload:', payload ? 'Valid' : 'Invalid');
    
    if (!payload) {
      console.log('‚ùå Authentication failed - no valid token');
      return NextResponse.json(
        { error: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö' },
        { status: 401 }
      );
    }
    
    console.log('‚úÖ Authentication successful:', payload.userId, payload.userRole);

    const { searchParams } = new URL(request.url);
    const itemName = searchParams.get('itemName');
    const category = searchParams.get('category');

    console.log('üìù Request params:', { itemName, category });

    if (!itemName || !category) {
      console.log('‚ùå Missing required params');
      return NextResponse.json(
        { error: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏ itemName ‡πÅ‡∏•‡∏∞ category' },
        { status: 400 }
      );
    }

    console.log(`üîç Finding available items for: ${itemName} (${category})`);

    // ‚úÖ First check InventoryMaster to get consistent count (same as main inventory)
    // Try exact match first, then fuzzy match for category
    let inventoryMaster = await InventoryMaster.findOne({
      itemName: itemName,
      categoryId: category
    });

    // If not found and category is "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏", try to find by itemName only
    if (!inventoryMaster && category === '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏') {
      console.log(`üîç Exact match failed, trying to find by itemName only: ${itemName}`);
      inventoryMaster = await InventoryMaster.findOne({
        itemName: itemName
      });
      
      if (inventoryMaster) {
        console.log(`‚úÖ Found InventoryMaster with different categoryId: ${inventoryMaster.categoryId}`);
      }
    }

    if (!inventoryMaster) {
      // Debug: Let's see what InventoryMaster records exist for this itemName
      const allItemRecords = await InventoryMaster.find({ itemName: itemName });
      console.log(`üîç Debug: All InventoryMaster records for ${itemName}:`, 
        allItemRecords.map(r => ({ categoryId: r.categoryId, _id: r._id })));
      
      return NextResponse.json(
        { error: `‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå ${itemName} ‡πÉ‡∏ô‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà ${category}` },
        { status: 404 }
      );
    }

    console.log(`üìä InventoryMaster data:`, {
      totalQuantity: inventoryMaster.totalQuantity,
      availableQuantity: inventoryMaster.availableQuantity,
      userOwnedQuantity: inventoryMaster.userOwnedQuantity
    });

    // ‡∏´‡∏≤‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏ó‡∏µ‡πà‡∏ß‡πà‡∏≤‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö itemName + categoryId ‡∏ô‡∏µ‡πâ (‡∏¢‡∏Å‡πÄ‡∏ß‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏•‡∏ö)
    // Use the actual categoryId from InventoryMaster that was found
    const actualCategoryId = inventoryMaster.categoryId;
    console.log(`üîç Using actual categoryId from InventoryMaster: ${actualCategoryId}`);
    console.log(`üîç Searching for items with:`, {
      itemName: itemName,
      categoryId: actualCategoryId,
      ownerType: 'admin_stock',
      statusId: ['status_available', 'status_maintenance', 'status_damaged']
    });
    
    const availableItems = await InventoryItem.find({
      itemName: itemName,
      categoryId: actualCategoryId, // Use the actual categoryId from InventoryMaster
      'currentOwnership.ownerType': 'admin_stock',
      statusId: { $in: ['status_available', 'status_maintenance', 'status_damaged'] }, // ‡πÉ‡∏ä‡πâ statusId ‡πÅ‡∏ó‡∏ô status
      deletedAt: { $exists: false } // ‡∏¢‡∏Å‡πÄ‡∏ß‡πâ‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏•‡∏ö
    }).sort({ 
      serialNumber: 1,  // ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏° SN ‡∏Å‡πà‡∏≠‡∏ô
      createdAt: 1      // ‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏°‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á
    });

    console.log(`üîç Debug: Raw availableItems from DB:`, availableItems.map(item => ({
      _id: item._id,
      itemName: item.itemName,
      serialNumber: item.serialNumber,
      numberPhone: item.numberPhone,
      status: item.status,
      currentOwnership: item.currentOwnership
    })));

    console.log(`üì¶ Found ${availableItems.length} available InventoryItem records (excluding retired/deleted)`);

    // üîç Debug: Check ALL admin_stock items (regardless of status)
    const allAdminStockItems = await InventoryItem.find({
      itemName: itemName,
      categoryId: actualCategoryId,
      'currentOwnership.ownerType': 'admin_stock',
      status: { $ne: 'deleted' } // ‚úÖ Exclude soft-deleted items for accurate debugging
    });
    console.log(`üîç Debug: Total admin_stock items (all status): ${allAdminStockItems.length}`);
    allAdminStockItems.forEach((item, index) => {
      console.log(`  ${index + 1}. Status: ${item.status}, SN: ${item.serialNumber || 'No SN'}, ID: ${item._id}`);
    });

    console.log(`‚ö†Ô∏è  Data mismatch check: InventoryMaster.availableQuantity=${inventoryMaster.availableQuantity} vs InventoryItem.count=${availableItems.length}`);

    // üîß FIX: ‡∏ñ‡πâ‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô ‡πÉ‡∏´‡πâ sync InventoryMaster ‡∏Å‡πà‡∏≠‡∏ô
    if (inventoryMaster.availableQuantity !== availableItems.length) {
      console.log(`üîÑ Syncing InventoryMaster data due to mismatch...`);
      try {
        const { updateInventoryMaster } = require('@/lib/inventory-helpers');
        await updateInventoryMaster(itemName, actualCategoryId);
        
        // Refresh InventoryMaster data after sync
        inventoryMaster = await InventoryMaster.findOne({
          itemName: itemName,
          categoryId: actualCategoryId
        });
        console.log(`‚úÖ InventoryMaster synced. New availableQuantity: ${inventoryMaster?.availableQuantity}`);
      } catch (syncError) {
        console.error(`‚ùå Failed to sync InventoryMaster:`, syncError);
      }
    }

    // ‚úÖ Use actual InventoryItem count as the source of truth (more accurate)
    const totalAvailable = availableItems.length;

    if (totalAvailable === 0) {
      return NextResponse.json({
        itemName,
        category,
        totalAvailable: 0,
        withSerialNumber: [],
        withoutSerialNumber: {
          count: 0,
          items: [],
          hasMore: false
        }
      });
    }

    // ‡∏à‡∏±‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÄ‡∏õ‡πá‡∏ô ‡∏°‡∏µ SN, ‡πÑ‡∏°‡πà‡∏°‡∏µ SN, ‡πÅ‡∏•‡∏∞‡∏°‡∏µ Phone Number (will be updated after virtual items are added)
    console.log(`üîç Debug: All availableItems:`, availableItems.map(item => ({
      _id: item._id,
      serialNumber: item.serialNumber,
      numberPhone: item.numberPhone,
      statusId: item.statusId
    })));
    
    let itemsWithSN = availableItems.filter(item => item.serialNumber && item.serialNumber.trim() !== '');
    console.log(`üîç Debug: itemsWithSN after filter:`, itemsWithSN.map(item => ({
      _id: item._id,
      serialNumber: item.serialNumber,
      statusId: item.statusId
    })));
    
    let itemsWithoutSN = availableItems.filter(item => (!item.serialNumber || item.serialNumber.trim() === '') && !item.numberPhone);
    let itemsWithPhoneNumber = availableItems.filter(item => item.numberPhone);

    // ‚úÖ No need for virtual items - use actual data from database
    const actualAvailableItems = [...availableItems];

    console.log(`üìä Final response data:`, {
      totalAvailable: totalAvailable,
      withSerialNumberCount: itemsWithSN.length,
      withoutSerialNumberCount: itemsWithoutSN.length,
      withPhoneNumberCount: itemsWithPhoneNumber.length,
      totalItems: itemsWithSN.length + itemsWithoutSN.length + itemsWithPhoneNumber.length
    });

    const response = {
      itemName,
      category,
      totalAvailable: totalAvailable,  // ‚úÖ Use InventoryMaster as source of truth
      withSerialNumber: itemsWithSN.map(item => ({
        itemId: item._id,
        serialNumber: item.serialNumber,
        statusId: item.statusId,
        conditionId: item.conditionId,
        dateAdded: item.sourceInfo?.dateAdded || new Date(),
        addedBy: item.sourceInfo?.addedBy || 'system'
      })),
      withPhoneNumber: itemsWithPhoneNumber.map(item => ({
        itemId: item._id,
        numberPhone: item.numberPhone,
        statusId: item.statusId,
        conditionId: item.conditionId,
        dateAdded: item.sourceInfo?.dateAdded || new Date(),
        addedBy: item.sourceInfo?.addedBy || 'system'
      })),
      withoutSerialNumber: {
        count: itemsWithoutSN.length, // ‚úÖ Use actual count of items without SN
        items: itemsWithoutSN.map(item => ({ // ‚úÖ Show actual items only
          itemId: item._id,
          statusId: item.statusId,
          conditionId: item.conditionId,
          dateAdded: item.sourceInfo?.dateAdded || new Date(),
          addedBy: item.sourceInfo?.addedBy || 'system'
        })),
        hasMore: false // ‚úÖ No pagination needed since we show all items
      }
    };

    return NextResponse.json(response);

  } catch (error) {
    console.error('Error fetching available items:', error);
    return NextResponse.json(
      { error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö' },
      { status: 500 }
    );
  }
}
